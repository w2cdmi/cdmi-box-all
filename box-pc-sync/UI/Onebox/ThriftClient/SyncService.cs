/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Onebox.ThriftClient
{
  public partial class SyncService {
    /// <summary>
    /// thrift service interface
    /// </summary>
    public interface Iface {
      /// <summary>
      /// initial userContext
      /// </summary>
      /// <param name="uiHandle"></param>
      /// <param name="confPath"></param>
      int initUserContext(long uiHandle, string confPath);
      #if SILVERLIGHT
      IAsyncResult Begin_initUserContext(AsyncCallback callback, object state, long uiHandle, string confPath);
      int End_initUserContext(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// release userContext
      /// </summary>
      int releaseUserContext();
      #if SILVERLIGHT
      IAsyncResult Begin_releaseUserContext(AsyncCallback callback, object state);
      int End_releaseUserContext(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get service status
      /// </summary>
      int getServiceStatus();
      #if SILVERLIGHT
      IAsyncResult Begin_getServiceStatus(AsyncCallback callback, object state);
      int End_getServiceStatus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// change service work mode
      /// </summary>
      /// <param name="status"></param>
      int changeServiceWorkMode(Service_Status status);
      #if SILVERLIGHT
      IAsyncResult Begin_changeServiceWorkMode(AsyncCallback callback, object state, Service_Status status);
      int End_changeServiceWorkMode(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// send message
      /// </summary>
      /// <param name="type"></param>
      /// <param name="msg1"></param>
      /// <param name="msg2"></param>
      /// <param name="msg3"></param>
      /// <param name="msg4"></param>
      /// <param name="msg5"></param>
      int sendMessage(int type, string msg1, string msg2, string msg3, string msg4, string msg5);
      #if SILVERLIGHT
      IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, int type, string msg1, string msg2, string msg3, string msg4, string msg5);
      int End_sendMessage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// upload file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      int uploadFile(string source, string target, File_Type fileType);
      #if SILVERLIGHT
      IAsyncResult Begin_uploadFile(AsyncCallback callback, object state, string source, string target, File_Type fileType);
      int End_uploadFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// download file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      int downloadFile(string source, string target, File_Type fileType);
      #if SILVERLIGHT
      IAsyncResult Begin_downloadFile(AsyncCallback callback, object state, string source, string target, File_Type fileType);
      int End_downloadFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// delete file/directory
      /// </summary>
      /// <param name="filePath"></param>
      /// <param name="fileType"></param>
      int deleteFile(string filePath, File_Type fileType);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteFile(AsyncCallback callback, object state, string filePath, File_Type fileType);
      int End_deleteFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// rename file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      int renameFile(string source, string target, File_Type fileType);
      #if SILVERLIGHT
      IAsyncResult Begin_renameFile(AsyncCallback callback, object state, string source, string target, File_Type fileType);
      int End_renameFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// move file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      int moveFile(string source, string target, File_Type fileType);
      #if SILVERLIGHT
      IAsyncResult Begin_moveFile(AsyncCallback callback, object state, string source, string target, File_Type fileType);
      int End_moveFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// copy file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      int copyFile(string source, string target, File_Type fileType);
      #if SILVERLIGHT
      IAsyncResult Begin_copyFile(AsyncCallback callback, object state, string source, string target, File_Type fileType);
      int End_copyFile(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// create directory
      /// </summary>
      /// <param name="dirPath"></param>
      int createDir(string dirPath);
      #if SILVERLIGHT
      IAsyncResult Begin_createDir(AsyncCallback callback, object state, string dirPath);
      int End_createDir(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// list directory
      /// </summary>
      /// <param name="parent"></param>
      /// <param name="owner_id"></param>
      List<List_Info> listRemoteDir(long parent, long owner_id);
      #if SILVERLIGHT
      IAsyncResult Begin_listRemoteDir(AsyncCallback callback, object state, long parent, long owner_id);
      List<List_Info> End_listRemoteDir(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// upload file/directory
      /// </summary>
      /// <param name="path"></param>
      /// <param name="parent"></param>
      /// <param name="owner_id"></param>
      long upload(string path, long parent, long owner_id);
      #if SILVERLIGHT
      IAsyncResult Begin_upload(AsyncCallback callback, object state, string path, long parent, long owner_id);
      long End_upload(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// login
      /// </summary>
      /// <param name="type"></param>
      /// <param name="username"></param>
      /// <param name="password"></param>
      /// <param name="domain"></param>
      int login(int type, string username, string password, string domain);
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, int type, string username, string password, string domain);
      int End_login(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// logout
      /// </summary>
      int logout();
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state);
      int End_logout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// encypt string
      /// </summary>
      /// <param name="src"></param>
      string encyptString(string src);
      #if SILVERLIGHT
      IAsyncResult Begin_encyptString(AsyncCallback callback, object state, string src);
      string End_encyptString(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// decypt string
      /// </summary>
      /// <param name="src"></param>
      string decyptString(string src);
      #if SILVERLIGHT
      IAsyncResult Begin_decyptString(AsyncCallback callback, object state, string src);
      string End_decyptString(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// update configure
      /// </summary>
      int updateConfigure();
      #if SILVERLIGHT
      IAsyncResult Begin_updateConfigure(AsyncCallback callback, object state);
      int End_updateConfigure(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get trans speed information
      /// </summary>
      Trans_Speed_Info getTransSpeed();
      #if SILVERLIGHT
      IAsyncResult Begin_getTransSpeed(AsyncCallback callback, object state);
      Trans_Speed_Info End_getTransSpeed(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get user id
      /// </summary>
      long getUserId();
      #if SILVERLIGHT
      IAsyncResult Begin_getUserId(AsyncCallback callback, object state);
      long End_getUserId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get update information
      /// </summary>
      Update_Info getUpdateInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_getUpdateInfo(AsyncCallback callback, object state);
      Update_Info End_getUpdateInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// download client
      /// </summary>
      /// <param name="downloadUrl"></param>
      /// <param name="location"></param>
      int downloadClient(string downloadUrl, string location);
      #if SILVERLIGHT
      IAsyncResult Begin_downloadClient(AsyncCallback callback, object state, string downloadUrl, string location);
      int End_downloadClient(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get local node
      /// </summary>
      /// <param name="path"></param>
      Node_Info getNodeInfo(string path);
      #if SILVERLIGHT
      IAsyncResult Begin_getNodeInfo(AsyncCallback callback, object state, string path);
      Node_Info End_getNodeInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get overlay icon status
      /// </summary>
      /// <param name="path"></param>
      int getOverlayIconStatus(string path);
      #if SILVERLIGHT
      IAsyncResult Begin_getOverlayIconStatus(AsyncCallback callback, object state, string path);
      int End_getOverlayIconStatus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get remote id
      /// </summary>
      /// <param name="path"></param>
      long getRemoteId(string path);
      #if SILVERLIGHT
      IAsyncResult Begin_getRemoteId(AsyncCallback callback, object state, string path);
      long End_getRemoteId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// list error
      /// </summary>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      List<Error_Info> listError(int offset, int limit);
      #if SILVERLIGHT
      IAsyncResult Begin_listError(AsyncCallback callback, object state, int offset, int limit);
      List<Error_Info> End_listError(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// list domain users
      /// </summary>
      /// <param name="keyword"></param>
      List<Share_User_Info> listDomainUsers(string keyword);
      #if SILVERLIGHT
      IAsyncResult Begin_listDomainUsers(AsyncCallback callback, object state, string keyword);
      List<Share_User_Info> End_listDomainUsers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// list share users
      /// </summary>
      /// <param name="path"></param>
      List<Share_User_Info> listShareUsers(string path);
      #if SILVERLIGHT
      IAsyncResult Begin_listShareUsers(AsyncCallback callback, object state, string path);
      List<Share_User_Info> End_listShareUsers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// set share member
      /// </summary>
      /// <param name="path"></param>
      /// <param name="shareUserInfos"></param>
      /// <param name="emailMsg"></param>
      int setShareMember(string path, List<Share_User_Info> shareUserInfos, string emailMsg);
      #if SILVERLIGHT
      IAsyncResult Begin_setShareMember(AsyncCallback callback, object state, string path, List<Share_User_Info> shareUserInfos, string emailMsg);
      int End_setShareMember(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// del share member
      /// </summary>
      /// <param name="path"></param>
      /// <param name="shareUserInfo"></param>
      int delShareMember(string path, Share_User_Info shareUserInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_delShareMember(AsyncCallback callback, object state, string path, Share_User_Info shareUserInfo);
      int End_delShareMember(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// cancel share
      /// </summary>
      /// <param name="path"></param>
      int cancelShare(string path);
      #if SILVERLIGHT
      IAsyncResult Begin_cancelShare(AsyncCallback callback, object state, string path);
      int End_cancelShare(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get share link
      /// </summary>
      /// <param name="path"></param>
      Share_Link_Info getShareLink(string path);
      #if SILVERLIGHT
      IAsyncResult Begin_getShareLink(AsyncCallback callback, object state, string path);
      Share_Link_Info End_getShareLink(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// modify share link
      /// </summary>
      /// <param name="path"></param>
      /// <param name="shareLinkInfo"></param>
      Share_Link_Info modifyShareLink(string path, Share_Link_Info shareLinkInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_modifyShareLink(AsyncCallback callback, object state, string path, Share_Link_Info shareLinkInfo);
      Share_Link_Info End_modifyShareLink(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// del share link
      /// </summary>
      /// <param name="path"></param>
      int delShareLink(string path);
      #if SILVERLIGHT
      IAsyncResult Begin_delShareLink(AsyncCallback callback, object state, string path);
      int End_delShareLink(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get random string(length:8-20)
      /// </summary>
      string getRandomString();
      #if SILVERLIGHT
      IAsyncResult Begin_getRandomString(AsyncCallback callback, object state);
      string End_getRandomString(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// send share link by email
      /// </summary>
      /// <param name="type"></param>
      /// <param name="path"></param>
      /// <param name="shareLinkInfo"></param>
      /// <param name="emailMsg"></param>
      /// <param name="mailto"></param>
      int sendEmail(string type, string path, Share_Link_Info shareLinkInfo, string emailMsg, List<string> mailto);
      #if SILVERLIGHT
      IAsyncResult Begin_sendEmail(AsyncCallback callback, object state, string type, string path, Share_Link_Info shareLinkInfo, string emailMsg, List<string> mailto);
      int End_sendEmail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// list batch of domain users
      /// </summary>
      /// <param name="keyword"></param>
      Dictionary<string, Share_User_Info> listBatchDomainUsers(List<string> keyword);
      #if SILVERLIGHT
      IAsyncResult Begin_listBatchDomainUsers(AsyncCallback callback, object state, List<string> keyword);
      Dictionary<string, Share_User_Info> End_listBatchDomainUsers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// upload outlook attachements
      /// </summary>
      /// <param name="attachements"></param>
      /// <param name="parent"></param>
      /// <param name="taskGroupId"></param>
      int uploadAttachements(List<string> attachements, string parent, string taskGroupId);
      #if SILVERLIGHT
      IAsyncResult Begin_uploadAttachements(AsyncCallback callback, object state, List<string> attachements, string parent, string taskGroupId);
      int End_uploadAttachements(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// is outlook attachements trans complete
      /// </summary>
      /// <param name="taskGroupId"></param>
      bool isAttachementsTransComplete(string taskGroupId);
      #if SILVERLIGHT
      IAsyncResult Begin_isAttachementsTransComplete(AsyncCallback callback, object state, string taskGroupId);
      bool End_isAttachementsTransComplete(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// get outlook attachements share links
      /// </summary>
      /// <param name="transGroupId"></param>
      Dictionary<string, string> getAttachementsLinks(string transGroupId);
      #if SILVERLIGHT
      IAsyncResult Begin_getAttachementsLinks(AsyncCallback callback, object state, string transGroupId);
      Dictionary<string, string> End_getAttachementsLinks(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// delete trans tasks by task group id
      /// </summary>
      /// <param name="transGroupId"></param>
      int deleteTransTasksByGroupId(string transGroupId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteTransTasksByGroupId(AsyncCallback callback, object state, string transGroupId);
      int End_deleteTransTasksByGroupId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// show trans task
      /// </summary>
      /// <param name="transGroupId"></param>
      int showTransTask(string transGroupId);
      #if SILVERLIGHT
      IAsyncResult Begin_showTransTask(AsyncCallback callback, object state, string transGroupId);
      int End_showTransTask(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// list user teamspaces
      /// </summary>
      /// <param name="userId"></param>
      List<Teamspace_Membership> listTeamspacesByUser(long userId);
      #if SILVERLIGHT
      IAsyncResult Begin_listTeamspacesByUser(AsyncCallback callback, object state, long userId);
      List<Teamspace_Membership> End_listTeamspacesByUser(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// thrift service interface
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_initUserContext(AsyncCallback callback, object state, long uiHandle, string confPath)
      {
        return send_initUserContext(callback, state, uiHandle, confPath);
      }

      public int End_initUserContext(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_initUserContext();
      }

      #endif

      /// <summary>
      /// initial userContext
      /// </summary>
      /// <param name="uiHandle"></param>
      /// <param name="confPath"></param>
      public int initUserContext(long uiHandle, string confPath)
      {
        #if !SILVERLIGHT
        send_initUserContext(uiHandle, confPath);
        return recv_initUserContext();

        #else
        var asyncResult = Begin_initUserContext(null, null, uiHandle, confPath);
        return End_initUserContext(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_initUserContext(AsyncCallback callback, object state, long uiHandle, string confPath)
      #else
      public void send_initUserContext(long uiHandle, string confPath)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("initUserContext", TMessageType.Call, seqid_));
        initUserContext_args args = new initUserContext_args();
        args.UiHandle = uiHandle;
        args.ConfPath = confPath;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_initUserContext()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        initUserContext_result result = new initUserContext_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "initUserContext failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_releaseUserContext(AsyncCallback callback, object state)
      {
        return send_releaseUserContext(callback, state);
      }

      public int End_releaseUserContext(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_releaseUserContext();
      }

      #endif

      /// <summary>
      /// release userContext
      /// </summary>
      public int releaseUserContext()
      {
        #if !SILVERLIGHT
        send_releaseUserContext();
        return recv_releaseUserContext();

        #else
        var asyncResult = Begin_releaseUserContext(null, null);
        return End_releaseUserContext(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_releaseUserContext(AsyncCallback callback, object state)
      #else
      public void send_releaseUserContext()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("releaseUserContext", TMessageType.Call, seqid_));
        releaseUserContext_args args = new releaseUserContext_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_releaseUserContext()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        releaseUserContext_result result = new releaseUserContext_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "releaseUserContext failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getServiceStatus(AsyncCallback callback, object state)
      {
        return send_getServiceStatus(callback, state);
      }

      public int End_getServiceStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getServiceStatus();
      }

      #endif

      /// <summary>
      /// get service status
      /// </summary>
      public int getServiceStatus()
      {
        #if !SILVERLIGHT
        send_getServiceStatus();
        return recv_getServiceStatus();

        #else
        var asyncResult = Begin_getServiceStatus(null, null);
        return End_getServiceStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getServiceStatus(AsyncCallback callback, object state)
      #else
      public void send_getServiceStatus()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getServiceStatus", TMessageType.Call, seqid_));
        getServiceStatus_args args = new getServiceStatus_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getServiceStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getServiceStatus_result result = new getServiceStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getServiceStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changeServiceWorkMode(AsyncCallback callback, object state, Service_Status status)
      {
        return send_changeServiceWorkMode(callback, state, status);
      }

      public int End_changeServiceWorkMode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_changeServiceWorkMode();
      }

      #endif

      /// <summary>
      /// change service work mode
      /// </summary>
      /// <param name="status"></param>
      public int changeServiceWorkMode(Service_Status status)
      {
        #if !SILVERLIGHT
        send_changeServiceWorkMode(status);
        return recv_changeServiceWorkMode();

        #else
        var asyncResult = Begin_changeServiceWorkMode(null, null, status);
        return End_changeServiceWorkMode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changeServiceWorkMode(AsyncCallback callback, object state, Service_Status status)
      #else
      public void send_changeServiceWorkMode(Service_Status status)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changeServiceWorkMode", TMessageType.Call, seqid_));
        changeServiceWorkMode_args args = new changeServiceWorkMode_args();
        args.Status = status;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_changeServiceWorkMode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changeServiceWorkMode_result result = new changeServiceWorkMode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changeServiceWorkMode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, int type, string msg1, string msg2, string msg3, string msg4, string msg5)
      {
        return send_sendMessage(callback, state, type, msg1, msg2, msg3, msg4, msg5);
      }

      public int End_sendMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sendMessage();
      }

      #endif

      /// <summary>
      /// send message
      /// </summary>
      /// <param name="type"></param>
      /// <param name="msg1"></param>
      /// <param name="msg2"></param>
      /// <param name="msg3"></param>
      /// <param name="msg4"></param>
      /// <param name="msg5"></param>
      public int sendMessage(int type, string msg1, string msg2, string msg3, string msg4, string msg5)
      {
        #if !SILVERLIGHT
        send_sendMessage(type, msg1, msg2, msg3, msg4, msg5);
        return recv_sendMessage();

        #else
        var asyncResult = Begin_sendMessage(null, null, type, msg1, msg2, msg3, msg4, msg5);
        return End_sendMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendMessage(AsyncCallback callback, object state, int type, string msg1, string msg2, string msg3, string msg4, string msg5)
      #else
      public void send_sendMessage(int type, string msg1, string msg2, string msg3, string msg4, string msg5)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
        sendMessage_args args = new sendMessage_args();
        args.Type = type;
        args.Msg1 = msg1;
        args.Msg2 = msg2;
        args.Msg3 = msg3;
        args.Msg4 = msg4;
        args.Msg5 = msg5;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_sendMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendMessage_result result = new sendMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_uploadFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      {
        return send_uploadFile(callback, state, source, target, fileType);
      }

      public int End_uploadFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_uploadFile();
      }

      #endif

      /// <summary>
      /// upload file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      public int uploadFile(string source, string target, File_Type fileType)
      {
        #if !SILVERLIGHT
        send_uploadFile(source, target, fileType);
        return recv_uploadFile();

        #else
        var asyncResult = Begin_uploadFile(null, null, source, target, fileType);
        return End_uploadFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_uploadFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      #else
      public void send_uploadFile(string source, string target, File_Type fileType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("uploadFile", TMessageType.Call, seqid_));
        uploadFile_args args = new uploadFile_args();
        args.Source = source;
        args.Target = target;
        args.FileType = fileType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_uploadFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        uploadFile_result result = new uploadFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uploadFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_downloadFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      {
        return send_downloadFile(callback, state, source, target, fileType);
      }

      public int End_downloadFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_downloadFile();
      }

      #endif

      /// <summary>
      /// download file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      public int downloadFile(string source, string target, File_Type fileType)
      {
        #if !SILVERLIGHT
        send_downloadFile(source, target, fileType);
        return recv_downloadFile();

        #else
        var asyncResult = Begin_downloadFile(null, null, source, target, fileType);
        return End_downloadFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_downloadFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      #else
      public void send_downloadFile(string source, string target, File_Type fileType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("downloadFile", TMessageType.Call, seqid_));
        downloadFile_args args = new downloadFile_args();
        args.Source = source;
        args.Target = target;
        args.FileType = fileType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_downloadFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        downloadFile_result result = new downloadFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteFile(AsyncCallback callback, object state, string filePath, File_Type fileType)
      {
        return send_deleteFile(callback, state, filePath, fileType);
      }

      public int End_deleteFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteFile();
      }

      #endif

      /// <summary>
      /// delete file/directory
      /// </summary>
      /// <param name="filePath"></param>
      /// <param name="fileType"></param>
      public int deleteFile(string filePath, File_Type fileType)
      {
        #if !SILVERLIGHT
        send_deleteFile(filePath, fileType);
        return recv_deleteFile();

        #else
        var asyncResult = Begin_deleteFile(null, null, filePath, fileType);
        return End_deleteFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteFile(AsyncCallback callback, object state, string filePath, File_Type fileType)
      #else
      public void send_deleteFile(string filePath, File_Type fileType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteFile", TMessageType.Call, seqid_));
        deleteFile_args args = new deleteFile_args();
        args.FilePath = filePath;
        args.FileType = fileType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_deleteFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteFile_result result = new deleteFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_renameFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      {
        return send_renameFile(callback, state, source, target, fileType);
      }

      public int End_renameFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_renameFile();
      }

      #endif

      /// <summary>
      /// rename file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      public int renameFile(string source, string target, File_Type fileType)
      {
        #if !SILVERLIGHT
        send_renameFile(source, target, fileType);
        return recv_renameFile();

        #else
        var asyncResult = Begin_renameFile(null, null, source, target, fileType);
        return End_renameFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_renameFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      #else
      public void send_renameFile(string source, string target, File_Type fileType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("renameFile", TMessageType.Call, seqid_));
        renameFile_args args = new renameFile_args();
        args.Source = source;
        args.Target = target;
        args.FileType = fileType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_renameFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        renameFile_result result = new renameFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "renameFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_moveFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      {
        return send_moveFile(callback, state, source, target, fileType);
      }

      public int End_moveFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_moveFile();
      }

      #endif

      /// <summary>
      /// move file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      public int moveFile(string source, string target, File_Type fileType)
      {
        #if !SILVERLIGHT
        send_moveFile(source, target, fileType);
        return recv_moveFile();

        #else
        var asyncResult = Begin_moveFile(null, null, source, target, fileType);
        return End_moveFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_moveFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      #else
      public void send_moveFile(string source, string target, File_Type fileType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("moveFile", TMessageType.Call, seqid_));
        moveFile_args args = new moveFile_args();
        args.Source = source;
        args.Target = target;
        args.FileType = fileType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_moveFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        moveFile_result result = new moveFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "moveFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_copyFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      {
        return send_copyFile(callback, state, source, target, fileType);
      }

      public int End_copyFile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_copyFile();
      }

      #endif

      /// <summary>
      /// copy file/directory
      /// </summary>
      /// <param name="source"></param>
      /// <param name="target"></param>
      /// <param name="fileType"></param>
      public int copyFile(string source, string target, File_Type fileType)
      {
        #if !SILVERLIGHT
        send_copyFile(source, target, fileType);
        return recv_copyFile();

        #else
        var asyncResult = Begin_copyFile(null, null, source, target, fileType);
        return End_copyFile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_copyFile(AsyncCallback callback, object state, string source, string target, File_Type fileType)
      #else
      public void send_copyFile(string source, string target, File_Type fileType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("copyFile", TMessageType.Call, seqid_));
        copyFile_args args = new copyFile_args();
        args.Source = source;
        args.Target = target;
        args.FileType = fileType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_copyFile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        copyFile_result result = new copyFile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "copyFile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createDir(AsyncCallback callback, object state, string dirPath)
      {
        return send_createDir(callback, state, dirPath);
      }

      public int End_createDir(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createDir();
      }

      #endif

      /// <summary>
      /// create directory
      /// </summary>
      /// <param name="dirPath"></param>
      public int createDir(string dirPath)
      {
        #if !SILVERLIGHT
        send_createDir(dirPath);
        return recv_createDir();

        #else
        var asyncResult = Begin_createDir(null, null, dirPath);
        return End_createDir(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createDir(AsyncCallback callback, object state, string dirPath)
      #else
      public void send_createDir(string dirPath)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createDir", TMessageType.Call, seqid_));
        createDir_args args = new createDir_args();
        args.DirPath = dirPath;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_createDir()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createDir_result result = new createDir_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createDir failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listRemoteDir(AsyncCallback callback, object state, long parent, long owner_id)
      {
        return send_listRemoteDir(callback, state, parent, owner_id);
      }

      public List<List_Info> End_listRemoteDir(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listRemoteDir();
      }

      #endif

      /// <summary>
      /// list directory
      /// </summary>
      /// <param name="parent"></param>
      /// <param name="owner_id"></param>
      public List<List_Info> listRemoteDir(long parent, long owner_id)
      {
        #if !SILVERLIGHT
        send_listRemoteDir(parent, owner_id);
        return recv_listRemoteDir();

        #else
        var asyncResult = Begin_listRemoteDir(null, null, parent, owner_id);
        return End_listRemoteDir(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listRemoteDir(AsyncCallback callback, object state, long parent, long owner_id)
      #else
      public void send_listRemoteDir(long parent, long owner_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listRemoteDir", TMessageType.Call, seqid_));
        listRemoteDir_args args = new listRemoteDir_args();
        args.Parent = parent;
        args.Owner_id = owner_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<List_Info> recv_listRemoteDir()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listRemoteDir_result result = new listRemoteDir_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listRemoteDir failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upload(AsyncCallback callback, object state, string path, long parent, long owner_id)
      {
        return send_upload(callback, state, path, parent, owner_id);
      }

      public long End_upload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upload();
      }

      #endif

      /// <summary>
      /// upload file/directory
      /// </summary>
      /// <param name="path"></param>
      /// <param name="parent"></param>
      /// <param name="owner_id"></param>
      public long upload(string path, long parent, long owner_id)
      {
        #if !SILVERLIGHT
        send_upload(path, parent, owner_id);
        return recv_upload();

        #else
        var asyncResult = Begin_upload(null, null, path, parent, owner_id);
        return End_upload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upload(AsyncCallback callback, object state, string path, long parent, long owner_id)
      #else
      public void send_upload(string path, long parent, long owner_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upload", TMessageType.Call, seqid_));
        upload_args args = new upload_args();
        args.Path = path;
        args.Parent = parent;
        args.Owner_id = owner_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_upload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upload_result result = new upload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upload failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_login(AsyncCallback callback, object state, int type, string username, string password, string domain)
      {
        return send_login(callback, state, type, username, password, domain);
      }

      public int End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      /// <summary>
      /// login
      /// </summary>
      /// <param name="type"></param>
      /// <param name="username"></param>
      /// <param name="password"></param>
      /// <param name="domain"></param>
      public int login(int type, string username, string password, string domain)
      {
        #if !SILVERLIGHT
        send_login(type, username, password, domain);
        return recv_login();

        #else
        var asyncResult = Begin_login(null, null, type, username, password, domain);
        return End_login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, int type, string username, string password, string domain)
      #else
      public void send_login(int type, string username, string password, string domain)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Type = type;
        args.Username = username;
        args.Password = password;
        args.Domain = domain;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logout(AsyncCallback callback, object state)
      {
        return send_logout(callback, state);
      }

      public int End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_logout();
      }

      #endif

      /// <summary>
      /// logout
      /// </summary>
      public int logout()
      {
        #if !SILVERLIGHT
        send_logout();
        return recv_logout();

        #else
        var asyncResult = Begin_logout(null, null);
        return End_logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state)
      #else
      public void send_logout()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "logout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_encyptString(AsyncCallback callback, object state, string src)
      {
        return send_encyptString(callback, state, src);
      }

      public string End_encyptString(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_encyptString();
      }

      #endif

      /// <summary>
      /// encypt string
      /// </summary>
      /// <param name="src"></param>
      public string encyptString(string src)
      {
        #if !SILVERLIGHT
        send_encyptString(src);
        return recv_encyptString();

        #else
        var asyncResult = Begin_encyptString(null, null, src);
        return End_encyptString(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_encyptString(AsyncCallback callback, object state, string src)
      #else
      public void send_encyptString(string src)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("encyptString", TMessageType.Call, seqid_));
        encyptString_args args = new encyptString_args();
        args.Src = src;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_encyptString()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        encyptString_result result = new encyptString_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "encyptString failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_decyptString(AsyncCallback callback, object state, string src)
      {
        return send_decyptString(callback, state, src);
      }

      public string End_decyptString(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_decyptString();
      }

      #endif

      /// <summary>
      /// decypt string
      /// </summary>
      /// <param name="src"></param>
      public string decyptString(string src)
      {
        #if !SILVERLIGHT
        send_decyptString(src);
        return recv_decyptString();

        #else
        var asyncResult = Begin_decyptString(null, null, src);
        return End_decyptString(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_decyptString(AsyncCallback callback, object state, string src)
      #else
      public void send_decyptString(string src)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("decyptString", TMessageType.Call, seqid_));
        decyptString_args args = new decyptString_args();
        args.Src = src;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_decyptString()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        decyptString_result result = new decyptString_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "decyptString failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateConfigure(AsyncCallback callback, object state)
      {
        return send_updateConfigure(callback, state);
      }

      public int End_updateConfigure(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateConfigure();
      }

      #endif

      /// <summary>
      /// update configure
      /// </summary>
      public int updateConfigure()
      {
        #if !SILVERLIGHT
        send_updateConfigure();
        return recv_updateConfigure();

        #else
        var asyncResult = Begin_updateConfigure(null, null);
        return End_updateConfigure(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateConfigure(AsyncCallback callback, object state)
      #else
      public void send_updateConfigure()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateConfigure", TMessageType.Call, seqid_));
        updateConfigure_args args = new updateConfigure_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_updateConfigure()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateConfigure_result result = new updateConfigure_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateConfigure failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTransSpeed(AsyncCallback callback, object state)
      {
        return send_getTransSpeed(callback, state);
      }

      public Trans_Speed_Info End_getTransSpeed(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTransSpeed();
      }

      #endif

      /// <summary>
      /// get trans speed information
      /// </summary>
      public Trans_Speed_Info getTransSpeed()
      {
        #if !SILVERLIGHT
        send_getTransSpeed();
        return recv_getTransSpeed();

        #else
        var asyncResult = Begin_getTransSpeed(null, null);
        return End_getTransSpeed(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTransSpeed(AsyncCallback callback, object state)
      #else
      public void send_getTransSpeed()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTransSpeed", TMessageType.Call, seqid_));
        getTransSpeed_args args = new getTransSpeed_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Trans_Speed_Info recv_getTransSpeed()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTransSpeed_result result = new getTransSpeed_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTransSpeed failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserId(AsyncCallback callback, object state)
      {
        return send_getUserId(callback, state);
      }

      public long End_getUserId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserId();
      }

      #endif

      /// <summary>
      /// get user id
      /// </summary>
      public long getUserId()
      {
        #if !SILVERLIGHT
        send_getUserId();
        return recv_getUserId();

        #else
        var asyncResult = Begin_getUserId(null, null);
        return End_getUserId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserId(AsyncCallback callback, object state)
      #else
      public void send_getUserId()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserId", TMessageType.Call, seqid_));
        getUserId_args args = new getUserId_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getUserId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserId_result result = new getUserId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUpdateInfo(AsyncCallback callback, object state)
      {
        return send_getUpdateInfo(callback, state);
      }

      public Update_Info End_getUpdateInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUpdateInfo();
      }

      #endif

      /// <summary>
      /// get update information
      /// </summary>
      public Update_Info getUpdateInfo()
      {
        #if !SILVERLIGHT
        send_getUpdateInfo();
        return recv_getUpdateInfo();

        #else
        var asyncResult = Begin_getUpdateInfo(null, null);
        return End_getUpdateInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUpdateInfo(AsyncCallback callback, object state)
      #else
      public void send_getUpdateInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUpdateInfo", TMessageType.Call, seqid_));
        getUpdateInfo_args args = new getUpdateInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Update_Info recv_getUpdateInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUpdateInfo_result result = new getUpdateInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUpdateInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_downloadClient(AsyncCallback callback, object state, string downloadUrl, string location)
      {
        return send_downloadClient(callback, state, downloadUrl, location);
      }

      public int End_downloadClient(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_downloadClient();
      }

      #endif

      /// <summary>
      /// download client
      /// </summary>
      /// <param name="downloadUrl"></param>
      /// <param name="location"></param>
      public int downloadClient(string downloadUrl, string location)
      {
        #if !SILVERLIGHT
        send_downloadClient(downloadUrl, location);
        return recv_downloadClient();

        #else
        var asyncResult = Begin_downloadClient(null, null, downloadUrl, location);
        return End_downloadClient(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_downloadClient(AsyncCallback callback, object state, string downloadUrl, string location)
      #else
      public void send_downloadClient(string downloadUrl, string location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("downloadClient", TMessageType.Call, seqid_));
        downloadClient_args args = new downloadClient_args();
        args.DownloadUrl = downloadUrl;
        args.Location = location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_downloadClient()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        downloadClient_result result = new downloadClient_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadClient failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNodeInfo(AsyncCallback callback, object state, string path)
      {
        return send_getNodeInfo(callback, state, path);
      }

      public Node_Info End_getNodeInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNodeInfo();
      }

      #endif

      /// <summary>
      /// get local node
      /// </summary>
      /// <param name="path"></param>
      public Node_Info getNodeInfo(string path)
      {
        #if !SILVERLIGHT
        send_getNodeInfo(path);
        return recv_getNodeInfo();

        #else
        var asyncResult = Begin_getNodeInfo(null, null, path);
        return End_getNodeInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNodeInfo(AsyncCallback callback, object state, string path)
      #else
      public void send_getNodeInfo(string path)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNodeInfo", TMessageType.Call, seqid_));
        getNodeInfo_args args = new getNodeInfo_args();
        args.Path = path;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Node_Info recv_getNodeInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNodeInfo_result result = new getNodeInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNodeInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getOverlayIconStatus(AsyncCallback callback, object state, string path)
      {
        return send_getOverlayIconStatus(callback, state, path);
      }

      public int End_getOverlayIconStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getOverlayIconStatus();
      }

      #endif

      /// <summary>
      /// get overlay icon status
      /// </summary>
      /// <param name="path"></param>
      public int getOverlayIconStatus(string path)
      {
        #if !SILVERLIGHT
        send_getOverlayIconStatus(path);
        return recv_getOverlayIconStatus();

        #else
        var asyncResult = Begin_getOverlayIconStatus(null, null, path);
        return End_getOverlayIconStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getOverlayIconStatus(AsyncCallback callback, object state, string path)
      #else
      public void send_getOverlayIconStatus(string path)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getOverlayIconStatus", TMessageType.Call, seqid_));
        getOverlayIconStatus_args args = new getOverlayIconStatus_args();
        args.Path = path;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getOverlayIconStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getOverlayIconStatus_result result = new getOverlayIconStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOverlayIconStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRemoteId(AsyncCallback callback, object state, string path)
      {
        return send_getRemoteId(callback, state, path);
      }

      public long End_getRemoteId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRemoteId();
      }

      #endif

      /// <summary>
      /// get remote id
      /// </summary>
      /// <param name="path"></param>
      public long getRemoteId(string path)
      {
        #if !SILVERLIGHT
        send_getRemoteId(path);
        return recv_getRemoteId();

        #else
        var asyncResult = Begin_getRemoteId(null, null, path);
        return End_getRemoteId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRemoteId(AsyncCallback callback, object state, string path)
      #else
      public void send_getRemoteId(string path)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRemoteId", TMessageType.Call, seqid_));
        getRemoteId_args args = new getRemoteId_args();
        args.Path = path;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getRemoteId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRemoteId_result result = new getRemoteId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRemoteId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listError(AsyncCallback callback, object state, int offset, int limit)
      {
        return send_listError(callback, state, offset, limit);
      }

      public List<Error_Info> End_listError(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listError();
      }

      #endif

      /// <summary>
      /// list error
      /// </summary>
      /// <param name="offset"></param>
      /// <param name="limit"></param>
      public List<Error_Info> listError(int offset, int limit)
      {
        #if !SILVERLIGHT
        send_listError(offset, limit);
        return recv_listError();

        #else
        var asyncResult = Begin_listError(null, null, offset, limit);
        return End_listError(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listError(AsyncCallback callback, object state, int offset, int limit)
      #else
      public void send_listError(int offset, int limit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listError", TMessageType.Call, seqid_));
        listError_args args = new listError_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Error_Info> recv_listError()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listError_result result = new listError_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listError failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listDomainUsers(AsyncCallback callback, object state, string keyword)
      {
        return send_listDomainUsers(callback, state, keyword);
      }

      public List<Share_User_Info> End_listDomainUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listDomainUsers();
      }

      #endif

      /// <summary>
      /// list domain users
      /// </summary>
      /// <param name="keyword"></param>
      public List<Share_User_Info> listDomainUsers(string keyword)
      {
        #if !SILVERLIGHT
        send_listDomainUsers(keyword);
        return recv_listDomainUsers();

        #else
        var asyncResult = Begin_listDomainUsers(null, null, keyword);
        return End_listDomainUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listDomainUsers(AsyncCallback callback, object state, string keyword)
      #else
      public void send_listDomainUsers(string keyword)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listDomainUsers", TMessageType.Call, seqid_));
        listDomainUsers_args args = new listDomainUsers_args();
        args.Keyword = keyword;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Share_User_Info> recv_listDomainUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listDomainUsers_result result = new listDomainUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listDomainUsers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listShareUsers(AsyncCallback callback, object state, string path)
      {
        return send_listShareUsers(callback, state, path);
      }

      public List<Share_User_Info> End_listShareUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listShareUsers();
      }

      #endif

      /// <summary>
      /// list share users
      /// </summary>
      /// <param name="path"></param>
      public List<Share_User_Info> listShareUsers(string path)
      {
        #if !SILVERLIGHT
        send_listShareUsers(path);
        return recv_listShareUsers();

        #else
        var asyncResult = Begin_listShareUsers(null, null, path);
        return End_listShareUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listShareUsers(AsyncCallback callback, object state, string path)
      #else
      public void send_listShareUsers(string path)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listShareUsers", TMessageType.Call, seqid_));
        listShareUsers_args args = new listShareUsers_args();
        args.Path = path;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Share_User_Info> recv_listShareUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listShareUsers_result result = new listShareUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listShareUsers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setShareMember(AsyncCallback callback, object state, string path, List<Share_User_Info> shareUserInfos, string emailMsg)
      {
        return send_setShareMember(callback, state, path, shareUserInfos, emailMsg);
      }

      public int End_setShareMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setShareMember();
      }

      #endif

      /// <summary>
      /// set share member
      /// </summary>
      /// <param name="path"></param>
      /// <param name="shareUserInfos"></param>
      /// <param name="emailMsg"></param>
      public int setShareMember(string path, List<Share_User_Info> shareUserInfos, string emailMsg)
      {
        #if !SILVERLIGHT
        send_setShareMember(path, shareUserInfos, emailMsg);
        return recv_setShareMember();

        #else
        var asyncResult = Begin_setShareMember(null, null, path, shareUserInfos, emailMsg);
        return End_setShareMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setShareMember(AsyncCallback callback, object state, string path, List<Share_User_Info> shareUserInfos, string emailMsg)
      #else
      public void send_setShareMember(string path, List<Share_User_Info> shareUserInfos, string emailMsg)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setShareMember", TMessageType.Call, seqid_));
        setShareMember_args args = new setShareMember_args();
        args.Path = path;
        args.ShareUserInfos = shareUserInfos;
        args.EmailMsg = emailMsg;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_setShareMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setShareMember_result result = new setShareMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setShareMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_delShareMember(AsyncCallback callback, object state, string path, Share_User_Info shareUserInfo)
      {
        return send_delShareMember(callback, state, path, shareUserInfo);
      }

      public int End_delShareMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_delShareMember();
      }

      #endif

      /// <summary>
      /// del share member
      /// </summary>
      /// <param name="path"></param>
      /// <param name="shareUserInfo"></param>
      public int delShareMember(string path, Share_User_Info shareUserInfo)
      {
        #if !SILVERLIGHT
        send_delShareMember(path, shareUserInfo);
        return recv_delShareMember();

        #else
        var asyncResult = Begin_delShareMember(null, null, path, shareUserInfo);
        return End_delShareMember(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_delShareMember(AsyncCallback callback, object state, string path, Share_User_Info shareUserInfo)
      #else
      public void send_delShareMember(string path, Share_User_Info shareUserInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("delShareMember", TMessageType.Call, seqid_));
        delShareMember_args args = new delShareMember_args();
        args.Path = path;
        args.ShareUserInfo = shareUserInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_delShareMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        delShareMember_result result = new delShareMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "delShareMember failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancelShare(AsyncCallback callback, object state, string path)
      {
        return send_cancelShare(callback, state, path);
      }

      public int End_cancelShare(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_cancelShare();
      }

      #endif

      /// <summary>
      /// cancel share
      /// </summary>
      /// <param name="path"></param>
      public int cancelShare(string path)
      {
        #if !SILVERLIGHT
        send_cancelShare(path);
        return recv_cancelShare();

        #else
        var asyncResult = Begin_cancelShare(null, null, path);
        return End_cancelShare(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancelShare(AsyncCallback callback, object state, string path)
      #else
      public void send_cancelShare(string path)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancelShare", TMessageType.Call, seqid_));
        cancelShare_args args = new cancelShare_args();
        args.Path = path;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_cancelShare()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancelShare_result result = new cancelShare_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cancelShare failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getShareLink(AsyncCallback callback, object state, string path)
      {
        return send_getShareLink(callback, state, path);
      }

      public Share_Link_Info End_getShareLink(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getShareLink();
      }

      #endif

      /// <summary>
      /// get share link
      /// </summary>
      /// <param name="path"></param>
      public Share_Link_Info getShareLink(string path)
      {
        #if !SILVERLIGHT
        send_getShareLink(path);
        return recv_getShareLink();

        #else
        var asyncResult = Begin_getShareLink(null, null, path);
        return End_getShareLink(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getShareLink(AsyncCallback callback, object state, string path)
      #else
      public void send_getShareLink(string path)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getShareLink", TMessageType.Call, seqid_));
        getShareLink_args args = new getShareLink_args();
        args.Path = path;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Share_Link_Info recv_getShareLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getShareLink_result result = new getShareLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getShareLink failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_modifyShareLink(AsyncCallback callback, object state, string path, Share_Link_Info shareLinkInfo)
      {
        return send_modifyShareLink(callback, state, path, shareLinkInfo);
      }

      public Share_Link_Info End_modifyShareLink(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_modifyShareLink();
      }

      #endif

      /// <summary>
      /// modify share link
      /// </summary>
      /// <param name="path"></param>
      /// <param name="shareLinkInfo"></param>
      public Share_Link_Info modifyShareLink(string path, Share_Link_Info shareLinkInfo)
      {
        #if !SILVERLIGHT
        send_modifyShareLink(path, shareLinkInfo);
        return recv_modifyShareLink();

        #else
        var asyncResult = Begin_modifyShareLink(null, null, path, shareLinkInfo);
        return End_modifyShareLink(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_modifyShareLink(AsyncCallback callback, object state, string path, Share_Link_Info shareLinkInfo)
      #else
      public void send_modifyShareLink(string path, Share_Link_Info shareLinkInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("modifyShareLink", TMessageType.Call, seqid_));
        modifyShareLink_args args = new modifyShareLink_args();
        args.Path = path;
        args.ShareLinkInfo = shareLinkInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Share_Link_Info recv_modifyShareLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        modifyShareLink_result result = new modifyShareLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modifyShareLink failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_delShareLink(AsyncCallback callback, object state, string path)
      {
        return send_delShareLink(callback, state, path);
      }

      public int End_delShareLink(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_delShareLink();
      }

      #endif

      /// <summary>
      /// del share link
      /// </summary>
      /// <param name="path"></param>
      public int delShareLink(string path)
      {
        #if !SILVERLIGHT
        send_delShareLink(path);
        return recv_delShareLink();

        #else
        var asyncResult = Begin_delShareLink(null, null, path);
        return End_delShareLink(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_delShareLink(AsyncCallback callback, object state, string path)
      #else
      public void send_delShareLink(string path)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("delShareLink", TMessageType.Call, seqid_));
        delShareLink_args args = new delShareLink_args();
        args.Path = path;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_delShareLink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        delShareLink_result result = new delShareLink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "delShareLink failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRandomString(AsyncCallback callback, object state)
      {
        return send_getRandomString(callback, state);
      }

      public string End_getRandomString(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRandomString();
      }

      #endif

      /// <summary>
      /// get random string(length:8-20)
      /// </summary>
      public string getRandomString()
      {
        #if !SILVERLIGHT
        send_getRandomString();
        return recv_getRandomString();

        #else
        var asyncResult = Begin_getRandomString(null, null);
        return End_getRandomString(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRandomString(AsyncCallback callback, object state)
      #else
      public void send_getRandomString()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRandomString", TMessageType.Call, seqid_));
        getRandomString_args args = new getRandomString_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getRandomString()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRandomString_result result = new getRandomString_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRandomString failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendEmail(AsyncCallback callback, object state, string type, string path, Share_Link_Info shareLinkInfo, string emailMsg, List<string> mailto)
      {
        return send_sendEmail(callback, state, type, path, shareLinkInfo, emailMsg, mailto);
      }

      public int End_sendEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sendEmail();
      }

      #endif

      /// <summary>
      /// send share link by email
      /// </summary>
      /// <param name="type"></param>
      /// <param name="path"></param>
      /// <param name="shareLinkInfo"></param>
      /// <param name="emailMsg"></param>
      /// <param name="mailto"></param>
      public int sendEmail(string type, string path, Share_Link_Info shareLinkInfo, string emailMsg, List<string> mailto)
      {
        #if !SILVERLIGHT
        send_sendEmail(type, path, shareLinkInfo, emailMsg, mailto);
        return recv_sendEmail();

        #else
        var asyncResult = Begin_sendEmail(null, null, type, path, shareLinkInfo, emailMsg, mailto);
        return End_sendEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendEmail(AsyncCallback callback, object state, string type, string path, Share_Link_Info shareLinkInfo, string emailMsg, List<string> mailto)
      #else
      public void send_sendEmail(string type, string path, Share_Link_Info shareLinkInfo, string emailMsg, List<string> mailto)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendEmail", TMessageType.Call, seqid_));
        sendEmail_args args = new sendEmail_args();
        args.Type = type;
        args.Path = path;
        args.ShareLinkInfo = shareLinkInfo;
        args.EmailMsg = emailMsg;
        args.Mailto = mailto;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_sendEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendEmail_result result = new sendEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listBatchDomainUsers(AsyncCallback callback, object state, List<string> keyword)
      {
        return send_listBatchDomainUsers(callback, state, keyword);
      }

      public Dictionary<string, Share_User_Info> End_listBatchDomainUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listBatchDomainUsers();
      }

      #endif

      /// <summary>
      /// list batch of domain users
      /// </summary>
      /// <param name="keyword"></param>
      public Dictionary<string, Share_User_Info> listBatchDomainUsers(List<string> keyword)
      {
        #if !SILVERLIGHT
        send_listBatchDomainUsers(keyword);
        return recv_listBatchDomainUsers();

        #else
        var asyncResult = Begin_listBatchDomainUsers(null, null, keyword);
        return End_listBatchDomainUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listBatchDomainUsers(AsyncCallback callback, object state, List<string> keyword)
      #else
      public void send_listBatchDomainUsers(List<string> keyword)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listBatchDomainUsers", TMessageType.Call, seqid_));
        listBatchDomainUsers_args args = new listBatchDomainUsers_args();
        args.Keyword = keyword;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Share_User_Info> recv_listBatchDomainUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listBatchDomainUsers_result result = new listBatchDomainUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listBatchDomainUsers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_uploadAttachements(AsyncCallback callback, object state, List<string> attachements, string parent, string taskGroupId)
      {
        return send_uploadAttachements(callback, state, attachements, parent, taskGroupId);
      }

      public int End_uploadAttachements(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_uploadAttachements();
      }

      #endif

      /// <summary>
      /// upload outlook attachements
      /// </summary>
      /// <param name="attachements"></param>
      /// <param name="parent"></param>
      /// <param name="taskGroupId"></param>
      public int uploadAttachements(List<string> attachements, string parent, string taskGroupId)
      {
        #if !SILVERLIGHT
        send_uploadAttachements(attachements, parent, taskGroupId);
        return recv_uploadAttachements();

        #else
        var asyncResult = Begin_uploadAttachements(null, null, attachements, parent, taskGroupId);
        return End_uploadAttachements(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_uploadAttachements(AsyncCallback callback, object state, List<string> attachements, string parent, string taskGroupId)
      #else
      public void send_uploadAttachements(List<string> attachements, string parent, string taskGroupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("uploadAttachements", TMessageType.Call, seqid_));
        uploadAttachements_args args = new uploadAttachements_args();
        args.Attachements = attachements;
        args.Parent = parent;
        args.TaskGroupId = taskGroupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_uploadAttachements()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        uploadAttachements_result result = new uploadAttachements_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uploadAttachements failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_isAttachementsTransComplete(AsyncCallback callback, object state, string taskGroupId)
      {
        return send_isAttachementsTransComplete(callback, state, taskGroupId);
      }

      public bool End_isAttachementsTransComplete(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isAttachementsTransComplete();
      }

      #endif

      /// <summary>
      /// is outlook attachements trans complete
      /// </summary>
      /// <param name="taskGroupId"></param>
      public bool isAttachementsTransComplete(string taskGroupId)
      {
        #if !SILVERLIGHT
        send_isAttachementsTransComplete(taskGroupId);
        return recv_isAttachementsTransComplete();

        #else
        var asyncResult = Begin_isAttachementsTransComplete(null, null, taskGroupId);
        return End_isAttachementsTransComplete(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_isAttachementsTransComplete(AsyncCallback callback, object state, string taskGroupId)
      #else
      public void send_isAttachementsTransComplete(string taskGroupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("isAttachementsTransComplete", TMessageType.Call, seqid_));
        isAttachementsTransComplete_args args = new isAttachementsTransComplete_args();
        args.TaskGroupId = taskGroupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_isAttachementsTransComplete()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isAttachementsTransComplete_result result = new isAttachementsTransComplete_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isAttachementsTransComplete failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAttachementsLinks(AsyncCallback callback, object state, string transGroupId)
      {
        return send_getAttachementsLinks(callback, state, transGroupId);
      }

      public Dictionary<string, string> End_getAttachementsLinks(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAttachementsLinks();
      }

      #endif

      /// <summary>
      /// get outlook attachements share links
      /// </summary>
      /// <param name="transGroupId"></param>
      public Dictionary<string, string> getAttachementsLinks(string transGroupId)
      {
        #if !SILVERLIGHT
        send_getAttachementsLinks(transGroupId);
        return recv_getAttachementsLinks();

        #else
        var asyncResult = Begin_getAttachementsLinks(null, null, transGroupId);
        return End_getAttachementsLinks(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAttachementsLinks(AsyncCallback callback, object state, string transGroupId)
      #else
      public void send_getAttachementsLinks(string transGroupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAttachementsLinks", TMessageType.Call, seqid_));
        getAttachementsLinks_args args = new getAttachementsLinks_args();
        args.TransGroupId = transGroupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_getAttachementsLinks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAttachementsLinks_result result = new getAttachementsLinks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAttachementsLinks failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteTransTasksByGroupId(AsyncCallback callback, object state, string transGroupId)
      {
        return send_deleteTransTasksByGroupId(callback, state, transGroupId);
      }

      public int End_deleteTransTasksByGroupId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteTransTasksByGroupId();
      }

      #endif

      /// <summary>
      /// delete trans tasks by task group id
      /// </summary>
      /// <param name="transGroupId"></param>
      public int deleteTransTasksByGroupId(string transGroupId)
      {
        #if !SILVERLIGHT
        send_deleteTransTasksByGroupId(transGroupId);
        return recv_deleteTransTasksByGroupId();

        #else
        var asyncResult = Begin_deleteTransTasksByGroupId(null, null, transGroupId);
        return End_deleteTransTasksByGroupId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteTransTasksByGroupId(AsyncCallback callback, object state, string transGroupId)
      #else
      public void send_deleteTransTasksByGroupId(string transGroupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteTransTasksByGroupId", TMessageType.Call, seqid_));
        deleteTransTasksByGroupId_args args = new deleteTransTasksByGroupId_args();
        args.TransGroupId = transGroupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_deleteTransTasksByGroupId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteTransTasksByGroupId_result result = new deleteTransTasksByGroupId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteTransTasksByGroupId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_showTransTask(AsyncCallback callback, object state, string transGroupId)
      {
        return send_showTransTask(callback, state, transGroupId);
      }

      public int End_showTransTask(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_showTransTask();
      }

      #endif

      /// <summary>
      /// show trans task
      /// </summary>
      /// <param name="transGroupId"></param>
      public int showTransTask(string transGroupId)
      {
        #if !SILVERLIGHT
        send_showTransTask(transGroupId);
        return recv_showTransTask();

        #else
        var asyncResult = Begin_showTransTask(null, null, transGroupId);
        return End_showTransTask(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_showTransTask(AsyncCallback callback, object state, string transGroupId)
      #else
      public void send_showTransTask(string transGroupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("showTransTask", TMessageType.Call, seqid_));
        showTransTask_args args = new showTransTask_args();
        args.TransGroupId = transGroupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_showTransTask()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        showTransTask_result result = new showTransTask_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "showTransTask failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listTeamspacesByUser(AsyncCallback callback, object state, long userId)
      {
        return send_listTeamspacesByUser(callback, state, userId);
      }

      public List<Teamspace_Membership> End_listTeamspacesByUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listTeamspacesByUser();
      }

      #endif

      /// <summary>
      /// list user teamspaces
      /// </summary>
      /// <param name="userId"></param>
      public List<Teamspace_Membership> listTeamspacesByUser(long userId)
      {
        #if !SILVERLIGHT
        send_listTeamspacesByUser(userId);
        return recv_listTeamspacesByUser();

        #else
        var asyncResult = Begin_listTeamspacesByUser(null, null, userId);
        return End_listTeamspacesByUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listTeamspacesByUser(AsyncCallback callback, object state, long userId)
      #else
      public void send_listTeamspacesByUser(long userId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listTeamspacesByUser", TMessageType.Call, seqid_));
        listTeamspacesByUser_args args = new listTeamspacesByUser_args();
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Teamspace_Membership> recv_listTeamspacesByUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listTeamspacesByUser_result result = new listTeamspacesByUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTeamspacesByUser failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["initUserContext"] = initUserContext_Process;
        processMap_["releaseUserContext"] = releaseUserContext_Process;
        processMap_["getServiceStatus"] = getServiceStatus_Process;
        processMap_["changeServiceWorkMode"] = changeServiceWorkMode_Process;
        processMap_["sendMessage"] = sendMessage_Process;
        processMap_["uploadFile"] = uploadFile_Process;
        processMap_["downloadFile"] = downloadFile_Process;
        processMap_["deleteFile"] = deleteFile_Process;
        processMap_["renameFile"] = renameFile_Process;
        processMap_["moveFile"] = moveFile_Process;
        processMap_["copyFile"] = copyFile_Process;
        processMap_["createDir"] = createDir_Process;
        processMap_["listRemoteDir"] = listRemoteDir_Process;
        processMap_["upload"] = upload_Process;
        processMap_["login"] = login_Process;
        processMap_["logout"] = logout_Process;
        processMap_["encyptString"] = encyptString_Process;
        processMap_["decyptString"] = decyptString_Process;
        processMap_["updateConfigure"] = updateConfigure_Process;
        processMap_["getTransSpeed"] = getTransSpeed_Process;
        processMap_["getUserId"] = getUserId_Process;
        processMap_["getUpdateInfo"] = getUpdateInfo_Process;
        processMap_["downloadClient"] = downloadClient_Process;
        processMap_["getNodeInfo"] = getNodeInfo_Process;
        processMap_["getOverlayIconStatus"] = getOverlayIconStatus_Process;
        processMap_["getRemoteId"] = getRemoteId_Process;
        processMap_["listError"] = listError_Process;
        processMap_["listDomainUsers"] = listDomainUsers_Process;
        processMap_["listShareUsers"] = listShareUsers_Process;
        processMap_["setShareMember"] = setShareMember_Process;
        processMap_["delShareMember"] = delShareMember_Process;
        processMap_["cancelShare"] = cancelShare_Process;
        processMap_["getShareLink"] = getShareLink_Process;
        processMap_["modifyShareLink"] = modifyShareLink_Process;
        processMap_["delShareLink"] = delShareLink_Process;
        processMap_["getRandomString"] = getRandomString_Process;
        processMap_["sendEmail"] = sendEmail_Process;
        processMap_["listBatchDomainUsers"] = listBatchDomainUsers_Process;
        processMap_["uploadAttachements"] = uploadAttachements_Process;
        processMap_["isAttachementsTransComplete"] = isAttachementsTransComplete_Process;
        processMap_["getAttachementsLinks"] = getAttachementsLinks_Process;
        processMap_["deleteTransTasksByGroupId"] = deleteTransTasksByGroupId_Process;
        processMap_["showTransTask"] = showTransTask_Process;
        processMap_["listTeamspacesByUser"] = listTeamspacesByUser_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void initUserContext_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        initUserContext_args args = new initUserContext_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        initUserContext_result result = new initUserContext_result();
        result.Success = iface_.initUserContext(args.UiHandle, args.ConfPath);
        oprot.WriteMessageBegin(new TMessage("initUserContext", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void releaseUserContext_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        releaseUserContext_args args = new releaseUserContext_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        releaseUserContext_result result = new releaseUserContext_result();
        result.Success = iface_.releaseUserContext();
        oprot.WriteMessageBegin(new TMessage("releaseUserContext", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getServiceStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getServiceStatus_args args = new getServiceStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getServiceStatus_result result = new getServiceStatus_result();
        result.Success = iface_.getServiceStatus();
        oprot.WriteMessageBegin(new TMessage("getServiceStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changeServiceWorkMode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changeServiceWorkMode_args args = new changeServiceWorkMode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changeServiceWorkMode_result result = new changeServiceWorkMode_result();
        result.Success = iface_.changeServiceWorkMode(args.Status);
        oprot.WriteMessageBegin(new TMessage("changeServiceWorkMode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendMessage_args args = new sendMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendMessage_result result = new sendMessage_result();
        result.Success = iface_.sendMessage(args.Type, args.Msg1, args.Msg2, args.Msg3, args.Msg4, args.Msg5);
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void uploadFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        uploadFile_args args = new uploadFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        uploadFile_result result = new uploadFile_result();
        result.Success = iface_.uploadFile(args.Source, args.Target, args.FileType);
        oprot.WriteMessageBegin(new TMessage("uploadFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void downloadFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        downloadFile_args args = new downloadFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        downloadFile_result result = new downloadFile_result();
        result.Success = iface_.downloadFile(args.Source, args.Target, args.FileType);
        oprot.WriteMessageBegin(new TMessage("downloadFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteFile_args args = new deleteFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteFile_result result = new deleteFile_result();
        result.Success = iface_.deleteFile(args.FilePath, args.FileType);
        oprot.WriteMessageBegin(new TMessage("deleteFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void renameFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        renameFile_args args = new renameFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        renameFile_result result = new renameFile_result();
        result.Success = iface_.renameFile(args.Source, args.Target, args.FileType);
        oprot.WriteMessageBegin(new TMessage("renameFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void moveFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        moveFile_args args = new moveFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        moveFile_result result = new moveFile_result();
        result.Success = iface_.moveFile(args.Source, args.Target, args.FileType);
        oprot.WriteMessageBegin(new TMessage("moveFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void copyFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        copyFile_args args = new copyFile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        copyFile_result result = new copyFile_result();
        result.Success = iface_.copyFile(args.Source, args.Target, args.FileType);
        oprot.WriteMessageBegin(new TMessage("copyFile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createDir_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createDir_args args = new createDir_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createDir_result result = new createDir_result();
        result.Success = iface_.createDir(args.DirPath);
        oprot.WriteMessageBegin(new TMessage("createDir", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listRemoteDir_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listRemoteDir_args args = new listRemoteDir_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listRemoteDir_result result = new listRemoteDir_result();
        result.Success = iface_.listRemoteDir(args.Parent, args.Owner_id);
        oprot.WriteMessageBegin(new TMessage("listRemoteDir", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upload_args args = new upload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upload_result result = new upload_result();
        result.Success = iface_.upload(args.Path, args.Parent, args.Owner_id);
        oprot.WriteMessageBegin(new TMessage("upload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        result.Success = iface_.login(args.Type, args.Username, args.Password, args.Domain);
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        result.Success = iface_.logout();
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void encyptString_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        encyptString_args args = new encyptString_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        encyptString_result result = new encyptString_result();
        result.Success = iface_.encyptString(args.Src);
        oprot.WriteMessageBegin(new TMessage("encyptString", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void decyptString_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        decyptString_args args = new decyptString_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        decyptString_result result = new decyptString_result();
        result.Success = iface_.decyptString(args.Src);
        oprot.WriteMessageBegin(new TMessage("decyptString", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateConfigure_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateConfigure_args args = new updateConfigure_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateConfigure_result result = new updateConfigure_result();
        result.Success = iface_.updateConfigure();
        oprot.WriteMessageBegin(new TMessage("updateConfigure", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTransSpeed_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTransSpeed_args args = new getTransSpeed_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTransSpeed_result result = new getTransSpeed_result();
        result.Success = iface_.getTransSpeed();
        oprot.WriteMessageBegin(new TMessage("getTransSpeed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserId_args args = new getUserId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserId_result result = new getUserId_result();
        result.Success = iface_.getUserId();
        oprot.WriteMessageBegin(new TMessage("getUserId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUpdateInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUpdateInfo_args args = new getUpdateInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUpdateInfo_result result = new getUpdateInfo_result();
        result.Success = iface_.getUpdateInfo();
        oprot.WriteMessageBegin(new TMessage("getUpdateInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void downloadClient_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        downloadClient_args args = new downloadClient_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        downloadClient_result result = new downloadClient_result();
        result.Success = iface_.downloadClient(args.DownloadUrl, args.Location);
        oprot.WriteMessageBegin(new TMessage("downloadClient", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNodeInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNodeInfo_args args = new getNodeInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNodeInfo_result result = new getNodeInfo_result();
        result.Success = iface_.getNodeInfo(args.Path);
        oprot.WriteMessageBegin(new TMessage("getNodeInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getOverlayIconStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getOverlayIconStatus_args args = new getOverlayIconStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getOverlayIconStatus_result result = new getOverlayIconStatus_result();
        result.Success = iface_.getOverlayIconStatus(args.Path);
        oprot.WriteMessageBegin(new TMessage("getOverlayIconStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRemoteId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRemoteId_args args = new getRemoteId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRemoteId_result result = new getRemoteId_result();
        result.Success = iface_.getRemoteId(args.Path);
        oprot.WriteMessageBegin(new TMessage("getRemoteId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listError_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listError_args args = new listError_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listError_result result = new listError_result();
        result.Success = iface_.listError(args.Offset, args.Limit);
        oprot.WriteMessageBegin(new TMessage("listError", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listDomainUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listDomainUsers_args args = new listDomainUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listDomainUsers_result result = new listDomainUsers_result();
        result.Success = iface_.listDomainUsers(args.Keyword);
        oprot.WriteMessageBegin(new TMessage("listDomainUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listShareUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listShareUsers_args args = new listShareUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listShareUsers_result result = new listShareUsers_result();
        result.Success = iface_.listShareUsers(args.Path);
        oprot.WriteMessageBegin(new TMessage("listShareUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setShareMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setShareMember_args args = new setShareMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setShareMember_result result = new setShareMember_result();
        result.Success = iface_.setShareMember(args.Path, args.ShareUserInfos, args.EmailMsg);
        oprot.WriteMessageBegin(new TMessage("setShareMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void delShareMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        delShareMember_args args = new delShareMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        delShareMember_result result = new delShareMember_result();
        result.Success = iface_.delShareMember(args.Path, args.ShareUserInfo);
        oprot.WriteMessageBegin(new TMessage("delShareMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancelShare_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancelShare_args args = new cancelShare_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancelShare_result result = new cancelShare_result();
        result.Success = iface_.cancelShare(args.Path);
        oprot.WriteMessageBegin(new TMessage("cancelShare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getShareLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getShareLink_args args = new getShareLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getShareLink_result result = new getShareLink_result();
        result.Success = iface_.getShareLink(args.Path);
        oprot.WriteMessageBegin(new TMessage("getShareLink", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void modifyShareLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        modifyShareLink_args args = new modifyShareLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        modifyShareLink_result result = new modifyShareLink_result();
        result.Success = iface_.modifyShareLink(args.Path, args.ShareLinkInfo);
        oprot.WriteMessageBegin(new TMessage("modifyShareLink", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void delShareLink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        delShareLink_args args = new delShareLink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        delShareLink_result result = new delShareLink_result();
        result.Success = iface_.delShareLink(args.Path);
        oprot.WriteMessageBegin(new TMessage("delShareLink", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRandomString_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRandomString_args args = new getRandomString_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRandomString_result result = new getRandomString_result();
        result.Success = iface_.getRandomString();
        oprot.WriteMessageBegin(new TMessage("getRandomString", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendEmail_args args = new sendEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendEmail_result result = new sendEmail_result();
        result.Success = iface_.sendEmail(args.Type, args.Path, args.ShareLinkInfo, args.EmailMsg, args.Mailto);
        oprot.WriteMessageBegin(new TMessage("sendEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listBatchDomainUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listBatchDomainUsers_args args = new listBatchDomainUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listBatchDomainUsers_result result = new listBatchDomainUsers_result();
        result.Success = iface_.listBatchDomainUsers(args.Keyword);
        oprot.WriteMessageBegin(new TMessage("listBatchDomainUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void uploadAttachements_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        uploadAttachements_args args = new uploadAttachements_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        uploadAttachements_result result = new uploadAttachements_result();
        result.Success = iface_.uploadAttachements(args.Attachements, args.Parent, args.TaskGroupId);
        oprot.WriteMessageBegin(new TMessage("uploadAttachements", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isAttachementsTransComplete_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isAttachementsTransComplete_args args = new isAttachementsTransComplete_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isAttachementsTransComplete_result result = new isAttachementsTransComplete_result();
        result.Success = iface_.isAttachementsTransComplete(args.TaskGroupId);
        oprot.WriteMessageBegin(new TMessage("isAttachementsTransComplete", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAttachementsLinks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAttachementsLinks_args args = new getAttachementsLinks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAttachementsLinks_result result = new getAttachementsLinks_result();
        result.Success = iface_.getAttachementsLinks(args.TransGroupId);
        oprot.WriteMessageBegin(new TMessage("getAttachementsLinks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteTransTasksByGroupId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteTransTasksByGroupId_args args = new deleteTransTasksByGroupId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteTransTasksByGroupId_result result = new deleteTransTasksByGroupId_result();
        result.Success = iface_.deleteTransTasksByGroupId(args.TransGroupId);
        oprot.WriteMessageBegin(new TMessage("deleteTransTasksByGroupId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void showTransTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        showTransTask_args args = new showTransTask_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        showTransTask_result result = new showTransTask_result();
        result.Success = iface_.showTransTask(args.TransGroupId);
        oprot.WriteMessageBegin(new TMessage("showTransTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listTeamspacesByUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listTeamspacesByUser_args args = new listTeamspacesByUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listTeamspacesByUser_result result = new listTeamspacesByUser_result();
        result.Success = iface_.listTeamspacesByUser(args.UserId);
        oprot.WriteMessageBegin(new TMessage("listTeamspacesByUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initUserContext_args : TBase
    {
      private long _uiHandle;
      private string _confPath;

      public long UiHandle
      {
        get
        {
          return _uiHandle;
        }
        set
        {
          __isset.uiHandle = true;
          this._uiHandle = value;
        }
      }

      public string ConfPath
      {
        get
        {
          return _confPath;
        }
        set
        {
          __isset.confPath = true;
          this._confPath = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uiHandle;
        public bool confPath;
      }

      public initUserContext_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                UiHandle = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ConfPath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("initUserContext_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uiHandle) {
          field.Name = "uiHandle";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UiHandle);
          oprot.WriteFieldEnd();
        }
        if (ConfPath != null && __isset.confPath) {
          field.Name = "confPath";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ConfPath);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("initUserContext_args(");
        sb.Append("UiHandle: ");
        sb.Append(UiHandle);
        sb.Append(",ConfPath: ");
        sb.Append(ConfPath);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initUserContext_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public initUserContext_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("initUserContext_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("initUserContext_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseUserContext_args : TBase
    {

      public releaseUserContext_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseUserContext_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseUserContext_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseUserContext_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public releaseUserContext_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseUserContext_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseUserContext_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getServiceStatus_args : TBase
    {

      public getServiceStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getServiceStatus_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getServiceStatus_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getServiceStatus_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getServiceStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getServiceStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getServiceStatus_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeServiceWorkMode_args : TBase
    {
      private Service_Status _status;

      /// <summary>
      /// 
      /// <seealso cref="Service_Status"/>
      /// </summary>
      public Service_Status Status
      {
        get
        {
          return _status;
        }
        set
        {
          __isset.status = true;
          this._status = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool status;
      }

      public changeServiceWorkMode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Status = (Service_Status)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeServiceWorkMode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Status);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeServiceWorkMode_args(");
        sb.Append("Status: ");
        sb.Append(Status);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeServiceWorkMode_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public changeServiceWorkMode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeServiceWorkMode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeServiceWorkMode_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessage_args : TBase
    {
      private int _type;
      private string _msg1;
      private string _msg2;
      private string _msg3;
      private string _msg4;
      private string _msg5;

      public int Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }

      public string Msg1
      {
        get
        {
          return _msg1;
        }
        set
        {
          __isset.msg1 = true;
          this._msg1 = value;
        }
      }

      public string Msg2
      {
        get
        {
          return _msg2;
        }
        set
        {
          __isset.msg2 = true;
          this._msg2 = value;
        }
      }

      public string Msg3
      {
        get
        {
          return _msg3;
        }
        set
        {
          __isset.msg3 = true;
          this._msg3 = value;
        }
      }

      public string Msg4
      {
        get
        {
          return _msg4;
        }
        set
        {
          __isset.msg4 = true;
          this._msg4 = value;
        }
      }

      public string Msg5
      {
        get
        {
          return _msg5;
        }
        set
        {
          __isset.msg5 = true;
          this._msg5 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool type;
        public bool msg1;
        public bool msg2;
        public bool msg3;
        public bool msg4;
        public bool msg5;
      }

      public sendMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Msg1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Msg2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Msg3 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Msg4 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Msg5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (Msg1 != null && __isset.msg1) {
          field.Name = "msg1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Msg1);
          oprot.WriteFieldEnd();
        }
        if (Msg2 != null && __isset.msg2) {
          field.Name = "msg2";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Msg2);
          oprot.WriteFieldEnd();
        }
        if (Msg3 != null && __isset.msg3) {
          field.Name = "msg3";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Msg3);
          oprot.WriteFieldEnd();
        }
        if (Msg4 != null && __isset.msg4) {
          field.Name = "msg4";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Msg4);
          oprot.WriteFieldEnd();
        }
        if (Msg5 != null && __isset.msg5) {
          field.Name = "msg5";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Msg5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessage_args(");
        sb.Append("Type: ");
        sb.Append(Type);
        sb.Append(",Msg1: ");
        sb.Append(Msg1);
        sb.Append(",Msg2: ");
        sb.Append(Msg2);
        sb.Append(",Msg3: ");
        sb.Append(Msg3);
        sb.Append(",Msg4: ");
        sb.Append(Msg4);
        sb.Append(",Msg5: ");
        sb.Append(Msg5);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessage_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public sendMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessage_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadFile_args : TBase
    {
      private string _source;
      private string _target;
      private File_Type _fileType;

      public string Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public string Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="File_Type"/>
      /// </summary>
      public File_Type FileType
      {
        get
        {
          return _fileType;
        }
        set
        {
          __isset.fileType = true;
          this._fileType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool source;
        public bool target;
        public bool fileType;
      }

      public uploadFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Source = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                FileType = (File_Type)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Source);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Target);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileType) {
          field.Name = "fileType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FileType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadFile_args(");
        sb.Append("Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(",FileType: ");
        sb.Append(FileType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadFile_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public uploadFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadFile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadFile_args : TBase
    {
      private string _source;
      private string _target;
      private File_Type _fileType;

      public string Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public string Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="File_Type"/>
      /// </summary>
      public File_Type FileType
      {
        get
        {
          return _fileType;
        }
        set
        {
          __isset.fileType = true;
          this._fileType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool source;
        public bool target;
        public bool fileType;
      }

      public downloadFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Source = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                FileType = (File_Type)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Source);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Target);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileType) {
          field.Name = "fileType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FileType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadFile_args(");
        sb.Append("Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(",FileType: ");
        sb.Append(FileType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadFile_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public downloadFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadFile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteFile_args : TBase
    {
      private string _filePath;
      private File_Type _fileType;

      public string FilePath
      {
        get
        {
          return _filePath;
        }
        set
        {
          __isset.filePath = true;
          this._filePath = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="File_Type"/>
      /// </summary>
      public File_Type FileType
      {
        get
        {
          return _fileType;
        }
        set
        {
          __isset.fileType = true;
          this._fileType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool filePath;
        public bool fileType;
      }

      public deleteFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FilePath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                FileType = (File_Type)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FilePath != null && __isset.filePath) {
          field.Name = "filePath";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FilePath);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileType) {
          field.Name = "fileType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FileType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteFile_args(");
        sb.Append("FilePath: ");
        sb.Append(FilePath);
        sb.Append(",FileType: ");
        sb.Append(FileType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteFile_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deleteFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteFile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameFile_args : TBase
    {
      private string _source;
      private string _target;
      private File_Type _fileType;

      public string Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public string Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="File_Type"/>
      /// </summary>
      public File_Type FileType
      {
        get
        {
          return _fileType;
        }
        set
        {
          __isset.fileType = true;
          this._fileType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool source;
        public bool target;
        public bool fileType;
      }

      public renameFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Source = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                FileType = (File_Type)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Source);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Target);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileType) {
          field.Name = "fileType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FileType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameFile_args(");
        sb.Append("Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(",FileType: ");
        sb.Append(FileType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameFile_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public renameFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameFile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveFile_args : TBase
    {
      private string _source;
      private string _target;
      private File_Type _fileType;

      public string Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public string Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="File_Type"/>
      /// </summary>
      public File_Type FileType
      {
        get
        {
          return _fileType;
        }
        set
        {
          __isset.fileType = true;
          this._fileType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool source;
        public bool target;
        public bool fileType;
      }

      public moveFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Source = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                FileType = (File_Type)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Source);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Target);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileType) {
          field.Name = "fileType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FileType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("moveFile_args(");
        sb.Append("Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(",FileType: ");
        sb.Append(FileType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveFile_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public moveFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("moveFile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class copyFile_args : TBase
    {
      private string _source;
      private string _target;
      private File_Type _fileType;

      public string Source
      {
        get
        {
          return _source;
        }
        set
        {
          __isset.source = true;
          this._source = value;
        }
      }

      public string Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="File_Type"/>
      /// </summary>
      public File_Type FileType
      {
        get
        {
          return _fileType;
        }
        set
        {
          __isset.fileType = true;
          this._fileType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool source;
        public bool target;
        public bool fileType;
      }

      public copyFile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Source = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                FileType = (File_Type)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("copyFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Source);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Target);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileType) {
          field.Name = "fileType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FileType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("copyFile_args(");
        sb.Append("Source: ");
        sb.Append(Source);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(",FileType: ");
        sb.Append(FileType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class copyFile_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public copyFile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("copyFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("copyFile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createDir_args : TBase
    {
      private string _dirPath;

      public string DirPath
      {
        get
        {
          return _dirPath;
        }
        set
        {
          __isset.dirPath = true;
          this._dirPath = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dirPath;
      }

      public createDir_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DirPath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createDir_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DirPath != null && __isset.dirPath) {
          field.Name = "dirPath";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DirPath);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createDir_args(");
        sb.Append("DirPath: ");
        sb.Append(DirPath);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createDir_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createDir_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createDir_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createDir_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listRemoteDir_args : TBase
    {
      private long _parent;
      private long _owner_id;

      public long Parent
      {
        get
        {
          return _parent;
        }
        set
        {
          __isset.parent = true;
          this._parent = value;
        }
      }

      public long Owner_id
      {
        get
        {
          return _owner_id;
        }
        set
        {
          __isset.owner_id = true;
          this._owner_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool parent;
        public bool owner_id;
      }

      public listRemoteDir_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Parent = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Owner_id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listRemoteDir_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.parent) {
          field.Name = "parent";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Parent);
          oprot.WriteFieldEnd();
        }
        if (__isset.owner_id) {
          field.Name = "owner_id";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Owner_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listRemoteDir_args(");
        sb.Append("Parent: ");
        sb.Append(Parent);
        sb.Append(",Owner_id: ");
        sb.Append(Owner_id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listRemoteDir_result : TBase
    {
      private List<List_Info> _success;

      public List<List_Info> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listRemoteDir_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<List_Info>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    List_Info _elem2 = new List_Info();
                    _elem2 = new List_Info();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listRemoteDir_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (List_Info _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listRemoteDir_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upload_args : TBase
    {
      private string _path;
      private long _parent;
      private long _owner_id;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }

      public long Parent
      {
        get
        {
          return _parent;
        }
        set
        {
          __isset.parent = true;
          this._parent = value;
        }
      }

      public long Owner_id
      {
        get
        {
          return _owner_id;
        }
        set
        {
          __isset.owner_id = true;
          this._owner_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
        public bool parent;
        public bool owner_id;
      }

      public upload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Parent = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Owner_id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        if (__isset.parent) {
          field.Name = "parent";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Parent);
          oprot.WriteFieldEnd();
        }
        if (__isset.owner_id) {
          field.Name = "owner_id";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Owner_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("upload_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(",Parent: ");
        sb.Append(Parent);
        sb.Append(",Owner_id: ");
        sb.Append(Owner_id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class upload_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public upload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("upload_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase
    {
      private int _type;
      private string _username;
      private string _password;
      private string _domain;

      public int Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public string Domain
      {
        get
        {
          return _domain;
        }
        set
        {
          __isset.domain = true;
          this._domain = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool type;
        public bool username;
        public bool password;
        public bool domain;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Domain = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (Domain != null && __isset.domain) {
          field.Name = "domain";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Domain);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_args(");
        sb.Append("Type: ");
        sb.Append(Type);
        sb.Append(",Username: ");
        sb.Append(Username);
        sb.Append(",Password: ");
        sb.Append(Password);
        sb.Append(",Domain: ");
        sb.Append(Domain);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase
    {

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class encyptString_args : TBase
    {
      private string _src;

      public string Src
      {
        get
        {
          return _src;
        }
        set
        {
          __isset.src = true;
          this._src = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool src;
      }

      public encyptString_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Src = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("encyptString_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Src != null && __isset.src) {
          field.Name = "src";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Src);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("encyptString_args(");
        sb.Append("Src: ");
        sb.Append(Src);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class encyptString_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public encyptString_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("encyptString_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("encyptString_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class decyptString_args : TBase
    {
      private string _src;

      public string Src
      {
        get
        {
          return _src;
        }
        set
        {
          __isset.src = true;
          this._src = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool src;
      }

      public decyptString_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Src = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("decyptString_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Src != null && __isset.src) {
          field.Name = "src";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Src);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("decyptString_args(");
        sb.Append("Src: ");
        sb.Append(Src);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class decyptString_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public decyptString_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("decyptString_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("decyptString_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateConfigure_args : TBase
    {

      public updateConfigure_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateConfigure_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateConfigure_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateConfigure_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public updateConfigure_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateConfigure_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateConfigure_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTransSpeed_args : TBase
    {

      public getTransSpeed_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTransSpeed_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTransSpeed_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTransSpeed_result : TBase
    {
      private Trans_Speed_Info _success;

      public Trans_Speed_Info Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getTransSpeed_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Trans_Speed_Info();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTransSpeed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTransSpeed_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserId_args : TBase
    {

      public getUserId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserId_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserId_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserId_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getUserId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUpdateInfo_args : TBase
    {

      public getUpdateInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUpdateInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUpdateInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUpdateInfo_result : TBase
    {
      private Update_Info _success;

      public Update_Info Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getUpdateInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Update_Info();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUpdateInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUpdateInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadClient_args : TBase
    {
      private string _downloadUrl;
      private string _location;

      public string DownloadUrl
      {
        get
        {
          return _downloadUrl;
        }
        set
        {
          __isset.downloadUrl = true;
          this._downloadUrl = value;
        }
      }

      public string Location
      {
        get
        {
          return _location;
        }
        set
        {
          __isset.location = true;
          this._location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool downloadUrl;
        public bool location;
      }

      public downloadClient_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DownloadUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadClient_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DownloadUrl != null && __isset.downloadUrl) {
          field.Name = "downloadUrl";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DownloadUrl);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadClient_args(");
        sb.Append("DownloadUrl: ");
        sb.Append(DownloadUrl);
        sb.Append(",Location: ");
        sb.Append(Location);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadClient_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public downloadClient_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadClient_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadClient_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNodeInfo_args : TBase
    {
      private string _path;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
      }

      public getNodeInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNodeInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNodeInfo_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNodeInfo_result : TBase
    {
      private Node_Info _success;

      public Node_Info Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getNodeInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Node_Info();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNodeInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNodeInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOverlayIconStatus_args : TBase
    {
      private string _path;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
      }

      public getOverlayIconStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOverlayIconStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOverlayIconStatus_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOverlayIconStatus_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getOverlayIconStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOverlayIconStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOverlayIconStatus_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRemoteId_args : TBase
    {
      private string _path;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
      }

      public getRemoteId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRemoteId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRemoteId_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRemoteId_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getRemoteId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRemoteId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRemoteId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listError_args : TBase
    {
      private int _offset;
      private int _limit;

      public int Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public int Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
      }

      public listError_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Offset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Limit = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listError_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.offset) {
          field.Name = "offset";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Offset);
          oprot.WriteFieldEnd();
        }
        if (__isset.limit) {
          field.Name = "limit";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Limit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listError_args(");
        sb.Append("Offset: ");
        sb.Append(Offset);
        sb.Append(",Limit: ");
        sb.Append(Limit);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listError_result : TBase
    {
      private List<Error_Info> _success;

      public List<Error_Info> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listError_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Error_Info>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Error_Info _elem6 = new Error_Info();
                    _elem6 = new Error_Info();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listError_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Error_Info _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listError_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listDomainUsers_args : TBase
    {
      private string _keyword;

      public string Keyword
      {
        get
        {
          return _keyword;
        }
        set
        {
          __isset.keyword = true;
          this._keyword = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool keyword;
      }

      public listDomainUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Keyword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listDomainUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Keyword != null && __isset.keyword) {
          field.Name = "keyword";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Keyword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listDomainUsers_args(");
        sb.Append("Keyword: ");
        sb.Append(Keyword);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listDomainUsers_result : TBase
    {
      private List<Share_User_Info> _success;

      public List<Share_User_Info> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listDomainUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Share_User_Info>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    Share_User_Info _elem10 = new Share_User_Info();
                    _elem10 = new Share_User_Info();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listDomainUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Share_User_Info _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listDomainUsers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listShareUsers_args : TBase
    {
      private string _path;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
      }

      public listShareUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listShareUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listShareUsers_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listShareUsers_result : TBase
    {
      private List<Share_User_Info> _success;

      public List<Share_User_Info> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listShareUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Share_User_Info>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    Share_User_Info _elem14 = new Share_User_Info();
                    _elem14 = new Share_User_Info();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listShareUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Share_User_Info _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listShareUsers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setShareMember_args : TBase
    {
      private string _path;
      private List<Share_User_Info> _shareUserInfos;
      private string _emailMsg;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }

      public List<Share_User_Info> ShareUserInfos
      {
        get
        {
          return _shareUserInfos;
        }
        set
        {
          __isset.shareUserInfos = true;
          this._shareUserInfos = value;
        }
      }

      public string EmailMsg
      {
        get
        {
          return _emailMsg;
        }
        set
        {
          __isset.emailMsg = true;
          this._emailMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
        public bool shareUserInfos;
        public bool emailMsg;
      }

      public setShareMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ShareUserInfos = new List<Share_User_Info>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    Share_User_Info _elem18 = new Share_User_Info();
                    _elem18 = new Share_User_Info();
                    _elem18.Read(iprot);
                    ShareUserInfos.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                EmailMsg = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setShareMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        if (ShareUserInfos != null && __isset.shareUserInfos) {
          field.Name = "shareUserInfos";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ShareUserInfos.Count));
            foreach (Share_User_Info _iter19 in ShareUserInfos)
            {
              _iter19.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (EmailMsg != null && __isset.emailMsg) {
          field.Name = "emailMsg";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EmailMsg);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setShareMember_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(",ShareUserInfos: ");
        sb.Append(ShareUserInfos);
        sb.Append(",EmailMsg: ");
        sb.Append(EmailMsg);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setShareMember_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public setShareMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setShareMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setShareMember_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delShareMember_args : TBase
    {
      private string _path;
      private Share_User_Info _shareUserInfo;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }

      public Share_User_Info ShareUserInfo
      {
        get
        {
          return _shareUserInfo;
        }
        set
        {
          __isset.shareUserInfo = true;
          this._shareUserInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
        public bool shareUserInfo;
      }

      public delShareMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                ShareUserInfo = new Share_User_Info();
                ShareUserInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delShareMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        if (ShareUserInfo != null && __isset.shareUserInfo) {
          field.Name = "shareUserInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          ShareUserInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delShareMember_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(",ShareUserInfo: ");
        sb.Append(ShareUserInfo== null ? "<null>" : ShareUserInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delShareMember_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public delShareMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delShareMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delShareMember_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelShare_args : TBase
    {
      private string _path;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
      }

      public cancelShare_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelShare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelShare_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelShare_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public cancelShare_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelShare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelShare_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getShareLink_args : TBase
    {
      private string _path;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
      }

      public getShareLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getShareLink_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getShareLink_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getShareLink_result : TBase
    {
      private Share_Link_Info _success;

      public Share_Link_Info Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getShareLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Share_Link_Info();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getShareLink_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getShareLink_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modifyShareLink_args : TBase
    {
      private string _path;
      private Share_Link_Info _shareLinkInfo;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }

      public Share_Link_Info ShareLinkInfo
      {
        get
        {
          return _shareLinkInfo;
        }
        set
        {
          __isset.shareLinkInfo = true;
          this._shareLinkInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
        public bool shareLinkInfo;
      }

      public modifyShareLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                ShareLinkInfo = new Share_Link_Info();
                ShareLinkInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("modifyShareLink_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        if (ShareLinkInfo != null && __isset.shareLinkInfo) {
          field.Name = "shareLinkInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          ShareLinkInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("modifyShareLink_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(",ShareLinkInfo: ");
        sb.Append(ShareLinkInfo== null ? "<null>" : ShareLinkInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modifyShareLink_result : TBase
    {
      private Share_Link_Info _success;

      public Share_Link_Info Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public modifyShareLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Share_Link_Info();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("modifyShareLink_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("modifyShareLink_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delShareLink_args : TBase
    {
      private string _path;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
      }

      public delShareLink_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delShareLink_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delShareLink_args(");
        sb.Append("Path: ");
        sb.Append(Path);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delShareLink_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public delShareLink_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delShareLink_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delShareLink_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRandomString_args : TBase
    {

      public getRandomString_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRandomString_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRandomString_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRandomString_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getRandomString_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRandomString_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRandomString_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendEmail_args : TBase
    {
      private string _type;
      private string _path;
      private Share_Link_Info _shareLinkInfo;
      private string _emailMsg;
      private List<string> _mailto;

      public string Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }

      public Share_Link_Info ShareLinkInfo
      {
        get
        {
          return _shareLinkInfo;
        }
        set
        {
          __isset.shareLinkInfo = true;
          this._shareLinkInfo = value;
        }
      }

      public string EmailMsg
      {
        get
        {
          return _emailMsg;
        }
        set
        {
          __isset.emailMsg = true;
          this._emailMsg = value;
        }
      }

      public List<string> Mailto
      {
        get
        {
          return _mailto;
        }
        set
        {
          __isset.mailto = true;
          this._mailto = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool type;
        public bool path;
        public bool shareLinkInfo;
        public bool emailMsg;
        public bool mailto;
      }

      public sendEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                ShareLinkInfo = new Share_Link_Info();
                ShareLinkInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                EmailMsg = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Mailto = new List<string>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    string _elem22 = null;
                    _elem22 = iprot.ReadString();
                    Mailto.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Type != null && __isset.type) {
          field.Name = "type";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Type);
          oprot.WriteFieldEnd();
        }
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        if (ShareLinkInfo != null && __isset.shareLinkInfo) {
          field.Name = "shareLinkInfo";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          ShareLinkInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (EmailMsg != null && __isset.emailMsg) {
          field.Name = "emailMsg";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EmailMsg);
          oprot.WriteFieldEnd();
        }
        if (Mailto != null && __isset.mailto) {
          field.Name = "mailto";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Mailto.Count));
            foreach (string _iter23 in Mailto)
            {
              oprot.WriteString(_iter23);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendEmail_args(");
        sb.Append("Type: ");
        sb.Append(Type);
        sb.Append(",Path: ");
        sb.Append(Path);
        sb.Append(",ShareLinkInfo: ");
        sb.Append(ShareLinkInfo== null ? "<null>" : ShareLinkInfo.ToString());
        sb.Append(",EmailMsg: ");
        sb.Append(EmailMsg);
        sb.Append(",Mailto: ");
        sb.Append(Mailto);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendEmail_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public sendEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendEmail_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listBatchDomainUsers_args : TBase
    {
      private List<string> _keyword;

      public List<string> Keyword
      {
        get
        {
          return _keyword;
        }
        set
        {
          __isset.keyword = true;
          this._keyword = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool keyword;
      }

      public listBatchDomainUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Keyword = new List<string>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    string _elem26 = null;
                    _elem26 = iprot.ReadString();
                    Keyword.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listBatchDomainUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Keyword != null && __isset.keyword) {
          field.Name = "keyword";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Keyword.Count));
            foreach (string _iter27 in Keyword)
            {
              oprot.WriteString(_iter27);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listBatchDomainUsers_args(");
        sb.Append("Keyword: ");
        sb.Append(Keyword);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listBatchDomainUsers_result : TBase
    {
      private Dictionary<string, Share_User_Info> _success;

      public Dictionary<string, Share_User_Info> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listBatchDomainUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Share_User_Info>();
                  TMap _map28 = iprot.ReadMapBegin();
                  for( int _i29 = 0; _i29 < _map28.Count; ++_i29)
                  {
                    string _key30;
                    Share_User_Info _val31;
                    _key30 = iprot.ReadString();
                    _val31 = new Share_User_Info();
                    _val31.Read(iprot);
                    Success[_key30] = _val31;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listBatchDomainUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter32 in Success.Keys)
              {
                oprot.WriteString(_iter32);
                Success[_iter32].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listBatchDomainUsers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadAttachements_args : TBase
    {
      private List<string> _attachements;
      private string _parent;
      private string _taskGroupId;

      public List<string> Attachements
      {
        get
        {
          return _attachements;
        }
        set
        {
          __isset.attachements = true;
          this._attachements = value;
        }
      }

      public string Parent
      {
        get
        {
          return _parent;
        }
        set
        {
          __isset.parent = true;
          this._parent = value;
        }
      }

      public string TaskGroupId
      {
        get
        {
          return _taskGroupId;
        }
        set
        {
          __isset.taskGroupId = true;
          this._taskGroupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool attachements;
        public bool parent;
        public bool taskGroupId;
      }

      public uploadAttachements_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Attachements = new List<string>();
                  TList _list33 = iprot.ReadListBegin();
                  for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                  {
                    string _elem35 = null;
                    _elem35 = iprot.ReadString();
                    Attachements.Add(_elem35);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Parent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TaskGroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadAttachements_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Attachements != null && __isset.attachements) {
          field.Name = "attachements";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Attachements.Count));
            foreach (string _iter36 in Attachements)
            {
              oprot.WriteString(_iter36);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Parent != null && __isset.parent) {
          field.Name = "parent";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Parent);
          oprot.WriteFieldEnd();
        }
        if (TaskGroupId != null && __isset.taskGroupId) {
          field.Name = "taskGroupId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TaskGroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadAttachements_args(");
        sb.Append("Attachements: ");
        sb.Append(Attachements);
        sb.Append(",Parent: ");
        sb.Append(Parent);
        sb.Append(",TaskGroupId: ");
        sb.Append(TaskGroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadAttachements_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public uploadAttachements_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadAttachements_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadAttachements_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isAttachementsTransComplete_args : TBase
    {
      private string _taskGroupId;

      public string TaskGroupId
      {
        get
        {
          return _taskGroupId;
        }
        set
        {
          __isset.taskGroupId = true;
          this._taskGroupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool taskGroupId;
      }

      public isAttachementsTransComplete_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TaskGroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isAttachementsTransComplete_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TaskGroupId != null && __isset.taskGroupId) {
          field.Name = "taskGroupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TaskGroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isAttachementsTransComplete_args(");
        sb.Append("TaskGroupId: ");
        sb.Append(TaskGroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isAttachementsTransComplete_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public isAttachementsTransComplete_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isAttachementsTransComplete_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isAttachementsTransComplete_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAttachementsLinks_args : TBase
    {
      private string _transGroupId;

      public string TransGroupId
      {
        get
        {
          return _transGroupId;
        }
        set
        {
          __isset.transGroupId = true;
          this._transGroupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transGroupId;
      }

      public getAttachementsLinks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TransGroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAttachementsLinks_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransGroupId != null && __isset.transGroupId) {
          field.Name = "transGroupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransGroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAttachementsLinks_args(");
        sb.Append("TransGroupId: ");
        sb.Append(TransGroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAttachementsLinks_result : TBase
    {
      private Dictionary<string, string> _success;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAttachementsLinks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map37 = iprot.ReadMapBegin();
                  for( int _i38 = 0; _i38 < _map37.Count; ++_i38)
                  {
                    string _key39;
                    string _val40;
                    _key39 = iprot.ReadString();
                    _val40 = iprot.ReadString();
                    Success[_key39] = _val40;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAttachementsLinks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter41 in Success.Keys)
              {
                oprot.WriteString(_iter41);
                oprot.WriteString(Success[_iter41]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAttachementsLinks_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTransTasksByGroupId_args : TBase
    {
      private string _transGroupId;

      public string TransGroupId
      {
        get
        {
          return _transGroupId;
        }
        set
        {
          __isset.transGroupId = true;
          this._transGroupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transGroupId;
      }

      public deleteTransTasksByGroupId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TransGroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteTransTasksByGroupId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransGroupId != null && __isset.transGroupId) {
          field.Name = "transGroupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransGroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteTransTasksByGroupId_args(");
        sb.Append("TransGroupId: ");
        sb.Append(TransGroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteTransTasksByGroupId_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deleteTransTasksByGroupId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteTransTasksByGroupId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteTransTasksByGroupId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class showTransTask_args : TBase
    {
      private string _transGroupId;

      public string TransGroupId
      {
        get
        {
          return _transGroupId;
        }
        set
        {
          __isset.transGroupId = true;
          this._transGroupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transGroupId;
      }

      public showTransTask_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TransGroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("showTransTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TransGroupId != null && __isset.transGroupId) {
          field.Name = "transGroupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransGroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("showTransTask_args(");
        sb.Append("TransGroupId: ");
        sb.Append(TransGroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class showTransTask_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public showTransTask_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("showTransTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("showTransTask_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listTeamspacesByUser_args : TBase
    {
      private long _userId;

      public long UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
      }

      public listTeamspacesByUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTeamspacesByUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTeamspacesByUser_args(");
        sb.Append("UserId: ");
        sb.Append(UserId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listTeamspacesByUser_result : TBase
    {
      private List<Teamspace_Membership> _success;

      public List<Teamspace_Membership> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listTeamspacesByUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Teamspace_Membership>();
                  TList _list42 = iprot.ReadListBegin();
                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    Teamspace_Membership _elem44 = new Teamspace_Membership();
                    _elem44 = new Teamspace_Membership();
                    _elem44.Read(iprot);
                    Success.Add(_elem44);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listTeamspacesByUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Teamspace_Membership _iter45 in Success)
              {
                _iter45.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listTeamspacesByUser_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
