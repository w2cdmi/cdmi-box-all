/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Onebox.ThriftClient
{

  /// <summary>
  /// teamspace meta data
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Teamspace_Info : TBase
  {
    private long _id;
    private string _name;
    private string _description;
    private int _curNumbers;
    private long _createdAt;
    private long _createdBy;
    private string _createdByUserName;
    private long _ownedBy;
    private string _ownedByUserName;
    private int _status;
    private long _spaceQuota;
    private long _spaceUsed;
    private int _maxVersions;
    private int _maxMembers;
    private int _regionId;

    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public int CurNumbers
    {
      get
      {
        return _curNumbers;
      }
      set
      {
        __isset.curNumbers = true;
        this._curNumbers = value;
      }
    }

    public long CreatedAt
    {
      get
      {
        return _createdAt;
      }
      set
      {
        __isset.createdAt = true;
        this._createdAt = value;
      }
    }

    public long CreatedBy
    {
      get
      {
        return _createdBy;
      }
      set
      {
        __isset.createdBy = true;
        this._createdBy = value;
      }
    }

    public string CreatedByUserName
    {
      get
      {
        return _createdByUserName;
      }
      set
      {
        __isset.createdByUserName = true;
        this._createdByUserName = value;
      }
    }

    public long OwnedBy
    {
      get
      {
        return _ownedBy;
      }
      set
      {
        __isset.ownedBy = true;
        this._ownedBy = value;
      }
    }

    public string OwnedByUserName
    {
      get
      {
        return _ownedByUserName;
      }
      set
      {
        __isset.ownedByUserName = true;
        this._ownedByUserName = value;
      }
    }

    public int Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public long SpaceQuota
    {
      get
      {
        return _spaceQuota;
      }
      set
      {
        __isset.spaceQuota = true;
        this._spaceQuota = value;
      }
    }

    public long SpaceUsed
    {
      get
      {
        return _spaceUsed;
      }
      set
      {
        __isset.spaceUsed = true;
        this._spaceUsed = value;
      }
    }

    public int MaxVersions
    {
      get
      {
        return _maxVersions;
      }
      set
      {
        __isset.maxVersions = true;
        this._maxVersions = value;
      }
    }

    public int MaxMembers
    {
      get
      {
        return _maxMembers;
      }
      set
      {
        __isset.maxMembers = true;
        this._maxMembers = value;
      }
    }

    public int RegionId
    {
      get
      {
        return _regionId;
      }
      set
      {
        __isset.regionId = true;
        this._regionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool description;
      public bool curNumbers;
      public bool createdAt;
      public bool createdBy;
      public bool createdByUserName;
      public bool ownedBy;
      public bool ownedByUserName;
      public bool status;
      public bool spaceQuota;
      public bool spaceUsed;
      public bool maxVersions;
      public bool maxMembers;
      public bool regionId;
    }

    public Teamspace_Info() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              CurNumbers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              CreatedAt = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              CreatedBy = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              CreatedByUserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              OwnedBy = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              OwnedByUserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Status = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              SpaceQuota = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              SpaceUsed = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              MaxVersions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              MaxMembers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              RegionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Teamspace_Info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.curNumbers) {
        field.Name = "curNumbers";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CurNumbers);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdAt) {
        field.Name = "createdAt";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedAt);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdBy) {
        field.Name = "createdBy";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedBy);
        oprot.WriteFieldEnd();
      }
      if (CreatedByUserName != null && __isset.createdByUserName) {
        field.Name = "createdByUserName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CreatedByUserName);
        oprot.WriteFieldEnd();
      }
      if (__isset.ownedBy) {
        field.Name = "ownedBy";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OwnedBy);
        oprot.WriteFieldEnd();
      }
      if (OwnedByUserName != null && __isset.ownedByUserName) {
        field.Name = "ownedByUserName";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OwnedByUserName);
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.spaceQuota) {
        field.Name = "spaceQuota";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SpaceQuota);
        oprot.WriteFieldEnd();
      }
      if (__isset.spaceUsed) {
        field.Name = "spaceUsed";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SpaceUsed);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxVersions) {
        field.Name = "maxVersions";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxVersions);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxMembers) {
        field.Name = "maxMembers";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxMembers);
        oprot.WriteFieldEnd();
      }
      if (__isset.regionId) {
        field.Name = "regionId";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RegionId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Teamspace_Info(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",CurNumbers: ");
      sb.Append(CurNumbers);
      sb.Append(",CreatedAt: ");
      sb.Append(CreatedAt);
      sb.Append(",CreatedBy: ");
      sb.Append(CreatedBy);
      sb.Append(",CreatedByUserName: ");
      sb.Append(CreatedByUserName);
      sb.Append(",OwnedBy: ");
      sb.Append(OwnedBy);
      sb.Append(",OwnedByUserName: ");
      sb.Append(OwnedByUserName);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",SpaceQuota: ");
      sb.Append(SpaceQuota);
      sb.Append(",SpaceUsed: ");
      sb.Append(SpaceUsed);
      sb.Append(",MaxVersions: ");
      sb.Append(MaxVersions);
      sb.Append(",MaxMembers: ");
      sb.Append(MaxMembers);
      sb.Append(",RegionId: ");
      sb.Append(RegionId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
