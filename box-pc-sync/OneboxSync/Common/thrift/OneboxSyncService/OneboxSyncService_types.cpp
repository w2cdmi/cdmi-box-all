/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "OneboxSyncService_types.h"

#include <algorithm>

namespace Onebox { namespace SyncService {

int _kAuthen_TypeValues[] = {
  Authen_Type::Authen_Type_Normal,
  Authen_Type::Authen_Type_Domain
};
const char* _kAuthen_TypeNames[] = {
  "Authen_Type_Normal",
  "Authen_Type_Domain"
};
const std::map<int, const char*> _Authen_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAuthen_TypeValues, _kAuthen_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kService_StatusValues[] = {
  Service_Status::Service_Status_Online,
  Service_Status::Service_Status_Offline,
  Service_Status::Service_Status_Error,
  Service_Status::Service_Status_Pause,
  Service_Status::Service_Status_Uninitial
};
const char* _kService_StatusNames[] = {
  "Service_Status_Online",
  "Service_Status_Offline",
  "Service_Status_Error",
  "Service_Status_Pause",
  "Service_Status_Uninitial"
};
const std::map<int, const char*> _Service_Status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kService_StatusValues, _kService_StatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFile_TypeValues[] = {
  File_Type::File_Type_Dir,
  File_Type::File_Type_File
};
const char* _kFile_TypeNames[] = {
  "File_Type_Dir",
  "File_Type_File"
};
const std::map<int, const char*> _File_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFile_TypeValues, _kFile_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kShare_RightValues[] = {
  Share_Right::Share_Right_R,
  Share_Right::Share_Right_RW
};
const char* _kShare_RightNames[] = {
  "Share_Right_R",
  "Share_Right_RW"
};
const std::map<int, const char*> _Share_Right_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kShare_RightValues, _kShare_RightNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOverlayIcon_StatusValues[] = {
  OverlayIcon_Status::OverlayIcon_Status_None,
  OverlayIcon_Status::OverlayIcon_Status_Synced,
  OverlayIcon_Status::OverlayIcon_Status_Syncing,
  OverlayIcon_Status::OverlayIcon_Status_NoActionDelete,
  OverlayIcon_Status::OverlayIcon_Status_Invalid
};
const char* _kOverlayIcon_StatusNames[] = {
  "OverlayIcon_Status_None",
  "OverlayIcon_Status_Synced",
  "OverlayIcon_Status_Syncing",
  "OverlayIcon_Status_NoActionDelete",
  "OverlayIcon_Status_Invalid"
};
const std::map<int, const char*> _OverlayIcon_Status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kOverlayIcon_StatusValues, _kOverlayIcon_StatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Trans_Speed_Info::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t Trans_Speed_Info::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t Trans_Speed_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->upload);
          this->__isset.upload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->download);
          this->__isset.download = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Trans_Speed_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Trans_Speed_Info");

  xfer += oprot->writeFieldBegin("upload", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->upload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("download", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->download);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Trans_Speed_Info &a, Trans_Speed_Info &b) {
  using ::std::swap;
  swap(a.upload, b.upload);
  swap(a.download, b.download);
  swap(a.__isset, b.__isset);
}

const char* Update_Info::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t Update_Info::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t Update_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->versionInfo);
          this->__isset.versionInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downloadUrl);
          this->__isset.downloadUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Update_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Update_Info");

  xfer += oprot->writeFieldBegin("versionInfo", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->versionInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downloadUrl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->downloadUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Update_Info &a, Update_Info &b) {
  using ::std::swap;
  swap(a.versionInfo, b.versionInfo);
  swap(a.downloadUrl, b.downloadUrl);
  swap(a.__isset, b.__isset);
}

const char* Node_Info::ascii_fingerprint = "25038F937443AC9A2A06CEE5209E41BF";
const uint8_t Node_Info::binary_fingerprint[16] = {0x25,0x03,0x8F,0x93,0x74,0x43,0xAC,0x9A,0x2A,0x06,0xCE,0xE5,0x20,0x9E,0x41,0xBF};

uint32_t Node_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->remoteId);
          this->__isset.remoteId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasShareLink);
          this->__isset.hasShareLink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Node_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Node_Info");

  xfer += oprot->writeFieldBegin("remoteId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->remoteId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasShareLink", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasShareLink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Node_Info &a, Node_Info &b) {
  using ::std::swap;
  swap(a.remoteId, b.remoteId);
  swap(a.hasShareLink, b.hasShareLink);
  swap(a.__isset, b.__isset);
}

const char* List_Info::ascii_fingerprint = "D7BAF3A18D2E378ACDBBC2C3FAE0DE60";
const uint8_t List_Info::binary_fingerprint[16] = {0xD7,0xBA,0xF3,0xA1,0x8D,0x2E,0x37,0x8A,0xCD,0xBB,0xC2,0xC3,0xFA,0xE0,0xDE,0x60};

uint32_t List_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t List_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("List_Info");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(List_Info &a, List_Info &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.flags, b.flags);
  swap(a.__isset, b.__isset);
}

const char* Error_Info::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t Error_Info::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t Error_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Error_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Error_Info");

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Error_Info &a, Error_Info &b) {
  using ::std::swap;
  swap(a.path, b.path);
  swap(a.errorCode, b.errorCode);
  swap(a.__isset, b.__isset);
}

const char* Share_User_Info::ascii_fingerprint = "6789EAB1B9E9B06E13BFC2442CDFC515";
const uint8_t Share_User_Info::binary_fingerprint[16] = {0x67,0x89,0xEA,0xB1,0xB9,0xE9,0xB0,0x6E,0x13,0xBF,0xC2,0x44,0x2C,0xDF,0xC5,0x15};

uint32_t Share_User_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->loginName);
          this->__isset.loginName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->department);
          this->__isset.department = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->right);
          this->__isset.right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Share_User_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Share_User_Info");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loginName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->loginName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("department", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->department);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->right);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Share_User_Info &a, Share_User_Info &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.userName, b.userName);
  swap(a.loginName, b.loginName);
  swap(a.department, b.department);
  swap(a.email, b.email);
  swap(a.right, b.right);
  swap(a.__isset, b.__isset);
}

const char* Share_Link_Info::ascii_fingerprint = "50272E49E7C02012722B8F62131C940B";
const uint8_t Share_Link_Info::binary_fingerprint[16] = {0x50,0x27,0x2E,0x49,0xE7,0xC0,0x20,0x12,0x72,0x2B,0x8F,0x62,0x13,0x1C,0x94,0x0B};

uint32_t Share_Link_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessCode);
          this->__isset.accessCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->effectAt);
          this->__isset.effectAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expireAt);
          this->__isset.expireAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Share_Link_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Share_Link_Info");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessCode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->accessCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effectAt", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->effectAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expireAt", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->expireAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Share_Link_Info &a, Share_Link_Info &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.accessCode, b.accessCode);
  swap(a.effectAt, b.effectAt);
  swap(a.expireAt, b.expireAt);
  swap(a.__isset, b.__isset);
}

const char* Teamspace_Info::ascii_fingerprint = "C88AB3A6D0BB16CC01F9FD5CA2E89E09";
const uint8_t Teamspace_Info::binary_fingerprint[16] = {0xC8,0x8A,0xB3,0xA6,0xD0,0xBB,0x16,0xCC,0x01,0xF9,0xFD,0x5C,0xA2,0xE8,0x9E,0x09};

uint32_t Teamspace_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->curNumbers);
          this->__isset.curNumbers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdAt);
          this->__isset.createdAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdBy);
          this->__isset.createdBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdByUserName);
          this->__isset.createdByUserName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ownedBy);
          this->__isset.ownedBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownedByUserName);
          this->__isset.ownedByUserName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spaceQuota);
          this->__isset.spaceQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spaceUsed);
          this->__isset.spaceUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxVersions);
          this->__isset.maxVersions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxMembers);
          this->__isset.maxMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->regionId);
          this->__isset.regionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Teamspace_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Teamspace_Info");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("curNumbers", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->curNumbers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdAt", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->createdAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdBy", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->createdBy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdByUserName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->createdByUserName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownedBy", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->ownedBy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownedByUserName", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ownedByUserName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spaceQuota", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->spaceQuota);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spaceUsed", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->spaceUsed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxVersions", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->maxVersions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxMembers", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->maxMembers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regionId", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->regionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Teamspace_Info &a, Teamspace_Info &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.curNumbers, b.curNumbers);
  swap(a.createdAt, b.createdAt);
  swap(a.createdBy, b.createdBy);
  swap(a.createdByUserName, b.createdByUserName);
  swap(a.ownedBy, b.ownedBy);
  swap(a.ownedByUserName, b.ownedByUserName);
  swap(a.status, b.status);
  swap(a.spaceQuota, b.spaceQuota);
  swap(a.spaceUsed, b.spaceUsed);
  swap(a.maxVersions, b.maxVersions);
  swap(a.maxMembers, b.maxMembers);
  swap(a.regionId, b.regionId);
  swap(a.__isset, b.__isset);
}

const char* Teamspace_Member_Info::ascii_fingerprint = "43A8F4F7754DCA77126D1683FBD4A442";
const uint8_t Teamspace_Member_Info::binary_fingerprint[16] = {0x43,0xA8,0xF4,0xF7,0x75,0x4D,0xCA,0x77,0x12,0x6D,0x16,0x83,0xFB,0xD4,0xA4,0x42};

uint32_t Teamspace_Member_Info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->loginName);
          this->__isset.loginName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Teamspace_Member_Info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Teamspace_Member_Info");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loginName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->loginName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Teamspace_Member_Info &a, Teamspace_Member_Info &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.loginName, b.loginName);
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

const char* Teamspace_Membership::ascii_fingerprint = "333ADDE5823568BDA6F2EFCAF6E7FAD0";
const uint8_t Teamspace_Membership::binary_fingerprint[16] = {0x33,0x3A,0xDD,0xE5,0x82,0x35,0x68,0xBD,0xA6,0xF2,0xEF,0xCA,0xF6,0xE7,0xFA,0xD0};

uint32_t Teamspace_Membership::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->teamRole);
          this->__isset.teamRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->role);
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->teamspace.read(iprot);
          this->__isset.teamspace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->member.read(iprot);
          this->__isset.member = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Teamspace_Membership::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Teamspace_Membership");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("teamRole", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->teamRole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->role);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("teamspace", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->teamspace.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("member", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->member.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Teamspace_Membership &a, Teamspace_Membership &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.teamRole, b.teamRole);
  swap(a.role, b.role);
  swap(a.teamspace, b.teamspace);
  swap(a.member, b.member);
  swap(a.__isset, b.__isset);
}

}} // namespace
