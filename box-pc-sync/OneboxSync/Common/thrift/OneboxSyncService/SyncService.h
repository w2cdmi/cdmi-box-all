/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SyncService_H
#define SyncService_H

#include <thrift/TDispatchProcessor.h>
#include "OneboxSyncService_types.h"

namespace Onebox { namespace SyncService {

class SyncServiceIf {
 public:
  virtual ~SyncServiceIf() {}
  virtual int32_t initUserContext(const int64_t uiHandle, const std::string& confPath) = 0;
  virtual int32_t releaseUserContext() = 0;
  virtual int32_t getServiceStatus() = 0;
  virtual int32_t changeServiceWorkMode(const Service_Status::type status) = 0;
  virtual int32_t sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5) = 0;
  virtual int32_t uploadFile(const std::string& source, const std::string& target, const File_Type::type fileType) = 0;
  virtual int32_t downloadFile(const std::string& source, const std::string& target, const File_Type::type fileType) = 0;
  virtual int32_t deleteFile(const std::string& filePath, const File_Type::type fileType) = 0;
  virtual int32_t renameFile(const std::string& source, const std::string& target, const File_Type::type fileType) = 0;
  virtual int32_t moveFile(const std::string& source, const std::string& target, const File_Type::type fileType) = 0;
  virtual int32_t copyFile(const std::string& source, const std::string& target, const File_Type::type fileType) = 0;
  virtual int32_t createDir(const std::string& dirPath) = 0;
  virtual void listRemoteDir(std::vector<List_Info> & _return, const int64_t parent, const int64_t owner_id) = 0;
  virtual int64_t upload(const std::string& path, const int64_t parent, const int64_t owner_id) = 0;
  virtual int32_t login(const int32_t type, const std::string& username, const std::string& password, const std::string& domain) = 0;
  virtual int32_t logout() = 0;
  virtual void encyptString(std::string& _return, const std::string& src) = 0;
  virtual void decyptString(std::string& _return, const std::string& src) = 0;
  virtual int32_t updateConfigure() = 0;
  virtual void getTransSpeed(Trans_Speed_Info& _return) = 0;
  virtual int64_t getUserId() = 0;
  virtual void getUpdateInfo(Update_Info& _return) = 0;
  virtual int32_t downloadClient(const std::string& downloadUrl, const std::string& location) = 0;
  virtual void getNodeInfo(Node_Info& _return, const std::string& path) = 0;
  virtual int32_t getOverlayIconStatus(const std::string& path) = 0;
  virtual int64_t getRemoteId(const std::string& path) = 0;
  virtual void listError(std::vector<Error_Info> & _return, const int32_t offset, const int32_t limit) = 0;
  virtual void listDomainUsers(std::vector<Share_User_Info> & _return, const std::string& keyword) = 0;
  virtual void listShareUsers(std::vector<Share_User_Info> & _return, const std::string& path) = 0;
  virtual int32_t setShareMember(const std::string& path, const std::vector<Share_User_Info> & shareUserInfos, const std::string& emailMsg) = 0;
  virtual int32_t delShareMember(const std::string& path, const Share_User_Info& shareUserInfo) = 0;
  virtual int32_t cancelShare(const std::string& path) = 0;
  virtual void getShareLink(Share_Link_Info& _return, const std::string& path) = 0;
  virtual void modifyShareLink(Share_Link_Info& _return, const std::string& path, const Share_Link_Info& shareLinkInfo) = 0;
  virtual int32_t delShareLink(const std::string& path) = 0;
  virtual void getRandomString(std::string& _return) = 0;
  virtual int32_t sendEmail(const std::string& type, const std::string& path, const Share_Link_Info& shareLinkInfo, const std::string& emailMsg, const std::vector<std::string> & mailto) = 0;
  virtual void listBatchDomainUsers(std::map<std::string, Share_User_Info> & _return, const std::vector<std::string> & keyword) = 0;
  virtual int32_t uploadAttachements(const std::vector<std::string> & attachements, const std::string& parent, const std::string& taskGroupId) = 0;
  virtual bool isAttachementsTransComplete(const std::string& taskGroupId) = 0;
  virtual void getAttachementsLinks(std::map<std::string, std::string> & _return, const std::string& transGroupId) = 0;
  virtual int32_t deleteTransTasksByGroupId(const std::string& transGroupId) = 0;
  virtual int32_t showTransTask(const std::string& transGroupId) = 0;
  virtual void listTeamspacesByUser(std::vector<Teamspace_Membership> & _return, const int64_t userId) = 0;
};

class SyncServiceIfFactory {
 public:
  typedef SyncServiceIf Handler;

  virtual ~SyncServiceIfFactory() {}

  virtual SyncServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SyncServiceIf* /* handler */) = 0;
};

class SyncServiceIfSingletonFactory : virtual public SyncServiceIfFactory {
 public:
  SyncServiceIfSingletonFactory(const boost::shared_ptr<SyncServiceIf>& iface) : iface_(iface) {}
  virtual ~SyncServiceIfSingletonFactory() {}

  virtual SyncServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SyncServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SyncServiceIf> iface_;
};

class SyncServiceNull : virtual public SyncServiceIf {
 public:
  virtual ~SyncServiceNull() {}
  int32_t initUserContext(const int64_t /* uiHandle */, const std::string& /* confPath */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t releaseUserContext() {
    int32_t _return = 0;
    return _return;
  }
  int32_t getServiceStatus() {
    int32_t _return = 0;
    return _return;
  }
  int32_t changeServiceWorkMode(const Service_Status::type /* status */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t sendMessage(const int32_t /* type */, const std::string& /* msg1 */, const std::string& /* msg2 */, const std::string& /* msg3 */, const std::string& /* msg4 */, const std::string& /* msg5 */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadFile(const std::string& /* source */, const std::string& /* target */, const File_Type::type /* fileType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t downloadFile(const std::string& /* source */, const std::string& /* target */, const File_Type::type /* fileType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deleteFile(const std::string& /* filePath */, const File_Type::type /* fileType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t renameFile(const std::string& /* source */, const std::string& /* target */, const File_Type::type /* fileType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t moveFile(const std::string& /* source */, const std::string& /* target */, const File_Type::type /* fileType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t copyFile(const std::string& /* source */, const std::string& /* target */, const File_Type::type /* fileType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t createDir(const std::string& /* dirPath */) {
    int32_t _return = 0;
    return _return;
  }
  void listRemoteDir(std::vector<List_Info> & /* _return */, const int64_t /* parent */, const int64_t /* owner_id */) {
    return;
  }
  int64_t upload(const std::string& /* path */, const int64_t /* parent */, const int64_t /* owner_id */) {
    int64_t _return = 0;
    return _return;
  }
  int32_t login(const int32_t /* type */, const std::string& /* username */, const std::string& /* password */, const std::string& /* domain */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t logout() {
    int32_t _return = 0;
    return _return;
  }
  void encyptString(std::string& /* _return */, const std::string& /* src */) {
    return;
  }
  void decyptString(std::string& /* _return */, const std::string& /* src */) {
    return;
  }
  int32_t updateConfigure() {
    int32_t _return = 0;
    return _return;
  }
  void getTransSpeed(Trans_Speed_Info& /* _return */) {
    return;
  }
  int64_t getUserId() {
    int64_t _return = 0;
    return _return;
  }
  void getUpdateInfo(Update_Info& /* _return */) {
    return;
  }
  int32_t downloadClient(const std::string& /* downloadUrl */, const std::string& /* location */) {
    int32_t _return = 0;
    return _return;
  }
  void getNodeInfo(Node_Info& /* _return */, const std::string& /* path */) {
    return;
  }
  int32_t getOverlayIconStatus(const std::string& /* path */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t getRemoteId(const std::string& /* path */) {
    int64_t _return = 0;
    return _return;
  }
  void listError(std::vector<Error_Info> & /* _return */, const int32_t /* offset */, const int32_t /* limit */) {
    return;
  }
  void listDomainUsers(std::vector<Share_User_Info> & /* _return */, const std::string& /* keyword */) {
    return;
  }
  void listShareUsers(std::vector<Share_User_Info> & /* _return */, const std::string& /* path */) {
    return;
  }
  int32_t setShareMember(const std::string& /* path */, const std::vector<Share_User_Info> & /* shareUserInfos */, const std::string& /* emailMsg */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t delShareMember(const std::string& /* path */, const Share_User_Info& /* shareUserInfo */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t cancelShare(const std::string& /* path */) {
    int32_t _return = 0;
    return _return;
  }
  void getShareLink(Share_Link_Info& /* _return */, const std::string& /* path */) {
    return;
  }
  void modifyShareLink(Share_Link_Info& /* _return */, const std::string& /* path */, const Share_Link_Info& /* shareLinkInfo */) {
    return;
  }
  int32_t delShareLink(const std::string& /* path */) {
    int32_t _return = 0;
    return _return;
  }
  void getRandomString(std::string& /* _return */) {
    return;
  }
  int32_t sendEmail(const std::string& /* type */, const std::string& /* path */, const Share_Link_Info& /* shareLinkInfo */, const std::string& /* emailMsg */, const std::vector<std::string> & /* mailto */) {
    int32_t _return = 0;
    return _return;
  }
  void listBatchDomainUsers(std::map<std::string, Share_User_Info> & /* _return */, const std::vector<std::string> & /* keyword */) {
    return;
  }
  int32_t uploadAttachements(const std::vector<std::string> & /* attachements */, const std::string& /* parent */, const std::string& /* taskGroupId */) {
    int32_t _return = 0;
    return _return;
  }
  bool isAttachementsTransComplete(const std::string& /* taskGroupId */) {
    bool _return = false;
    return _return;
  }
  void getAttachementsLinks(std::map<std::string, std::string> & /* _return */, const std::string& /* transGroupId */) {
    return;
  }
  int32_t deleteTransTasksByGroupId(const std::string& /* transGroupId */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t showTransTask(const std::string& /* transGroupId */) {
    int32_t _return = 0;
    return _return;
  }
  void listTeamspacesByUser(std::vector<Teamspace_Membership> & /* _return */, const int64_t /* userId */) {
    return;
  }
};

typedef struct _SyncService_initUserContext_args__isset {
  _SyncService_initUserContext_args__isset() : uiHandle(false), confPath(false) {}
  bool uiHandle;
  bool confPath;
} _SyncService_initUserContext_args__isset;

class SyncService_initUserContext_args {
 public:

  SyncService_initUserContext_args() : uiHandle(0), confPath() {
  }

  virtual ~SyncService_initUserContext_args() throw() {}

  int64_t uiHandle;
  std::string confPath;

  _SyncService_initUserContext_args__isset __isset;

  void __set_uiHandle(const int64_t val) {
    uiHandle = val;
  }

  void __set_confPath(const std::string& val) {
    confPath = val;
  }

  bool operator == (const SyncService_initUserContext_args & rhs) const
  {
    if (!(uiHandle == rhs.uiHandle))
      return false;
    if (!(confPath == rhs.confPath))
      return false;
    return true;
  }
  bool operator != (const SyncService_initUserContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_initUserContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_initUserContext_pargs {
 public:


  virtual ~SyncService_initUserContext_pargs() throw() {}

  const int64_t* uiHandle;
  const std::string* confPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_initUserContext_result__isset {
  _SyncService_initUserContext_result__isset() : success(false) {}
  bool success;
} _SyncService_initUserContext_result__isset;

class SyncService_initUserContext_result {
 public:

  SyncService_initUserContext_result() : success(0) {
  }

  virtual ~SyncService_initUserContext_result() throw() {}

  int32_t success;

  _SyncService_initUserContext_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_initUserContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_initUserContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_initUserContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_initUserContext_presult__isset {
  _SyncService_initUserContext_presult__isset() : success(false) {}
  bool success;
} _SyncService_initUserContext_presult__isset;

class SyncService_initUserContext_presult {
 public:


  virtual ~SyncService_initUserContext_presult() throw() {}

  int32_t* success;

  _SyncService_initUserContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_releaseUserContext_args {
 public:

  SyncService_releaseUserContext_args() {
  }

  virtual ~SyncService_releaseUserContext_args() throw() {}


  bool operator == (const SyncService_releaseUserContext_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_releaseUserContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_releaseUserContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_releaseUserContext_pargs {
 public:


  virtual ~SyncService_releaseUserContext_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_releaseUserContext_result__isset {
  _SyncService_releaseUserContext_result__isset() : success(false) {}
  bool success;
} _SyncService_releaseUserContext_result__isset;

class SyncService_releaseUserContext_result {
 public:

  SyncService_releaseUserContext_result() : success(0) {
  }

  virtual ~SyncService_releaseUserContext_result() throw() {}

  int32_t success;

  _SyncService_releaseUserContext_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_releaseUserContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_releaseUserContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_releaseUserContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_releaseUserContext_presult__isset {
  _SyncService_releaseUserContext_presult__isset() : success(false) {}
  bool success;
} _SyncService_releaseUserContext_presult__isset;

class SyncService_releaseUserContext_presult {
 public:


  virtual ~SyncService_releaseUserContext_presult() throw() {}

  int32_t* success;

  _SyncService_releaseUserContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_getServiceStatus_args {
 public:

  SyncService_getServiceStatus_args() {
  }

  virtual ~SyncService_getServiceStatus_args() throw() {}


  bool operator == (const SyncService_getServiceStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_getServiceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getServiceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getServiceStatus_pargs {
 public:


  virtual ~SyncService_getServiceStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getServiceStatus_result__isset {
  _SyncService_getServiceStatus_result__isset() : success(false) {}
  bool success;
} _SyncService_getServiceStatus_result__isset;

class SyncService_getServiceStatus_result {
 public:

  SyncService_getServiceStatus_result() : success(0) {
  }

  virtual ~SyncService_getServiceStatus_result() throw() {}

  int32_t success;

  _SyncService_getServiceStatus_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_getServiceStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getServiceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getServiceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getServiceStatus_presult__isset {
  _SyncService_getServiceStatus_presult__isset() : success(false) {}
  bool success;
} _SyncService_getServiceStatus_presult__isset;

class SyncService_getServiceStatus_presult {
 public:


  virtual ~SyncService_getServiceStatus_presult() throw() {}

  int32_t* success;

  _SyncService_getServiceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_changeServiceWorkMode_args__isset {
  _SyncService_changeServiceWorkMode_args__isset() : status(false) {}
  bool status;
} _SyncService_changeServiceWorkMode_args__isset;

class SyncService_changeServiceWorkMode_args {
 public:

  SyncService_changeServiceWorkMode_args() : status((Service_Status::type)0) {
  }

  virtual ~SyncService_changeServiceWorkMode_args() throw() {}

  Service_Status::type status;

  _SyncService_changeServiceWorkMode_args__isset __isset;

  void __set_status(const Service_Status::type val) {
    status = val;
  }

  bool operator == (const SyncService_changeServiceWorkMode_args & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SyncService_changeServiceWorkMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_changeServiceWorkMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_changeServiceWorkMode_pargs {
 public:


  virtual ~SyncService_changeServiceWorkMode_pargs() throw() {}

  const Service_Status::type* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_changeServiceWorkMode_result__isset {
  _SyncService_changeServiceWorkMode_result__isset() : success(false) {}
  bool success;
} _SyncService_changeServiceWorkMode_result__isset;

class SyncService_changeServiceWorkMode_result {
 public:

  SyncService_changeServiceWorkMode_result() : success(0) {
  }

  virtual ~SyncService_changeServiceWorkMode_result() throw() {}

  int32_t success;

  _SyncService_changeServiceWorkMode_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_changeServiceWorkMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_changeServiceWorkMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_changeServiceWorkMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_changeServiceWorkMode_presult__isset {
  _SyncService_changeServiceWorkMode_presult__isset() : success(false) {}
  bool success;
} _SyncService_changeServiceWorkMode_presult__isset;

class SyncService_changeServiceWorkMode_presult {
 public:


  virtual ~SyncService_changeServiceWorkMode_presult() throw() {}

  int32_t* success;

  _SyncService_changeServiceWorkMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_sendMessage_args__isset {
  _SyncService_sendMessage_args__isset() : type(false), msg1(false), msg2(false), msg3(false), msg4(false), msg5(false) {}
  bool type;
  bool msg1;
  bool msg2;
  bool msg3;
  bool msg4;
  bool msg5;
} _SyncService_sendMessage_args__isset;

class SyncService_sendMessage_args {
 public:

  SyncService_sendMessage_args() : type(0), msg1(), msg2(), msg3(), msg4(), msg5() {
  }

  virtual ~SyncService_sendMessage_args() throw() {}

  int32_t type;
  std::string msg1;
  std::string msg2;
  std::string msg3;
  std::string msg4;
  std::string msg5;

  _SyncService_sendMessage_args__isset __isset;

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_msg1(const std::string& val) {
    msg1 = val;
  }

  void __set_msg2(const std::string& val) {
    msg2 = val;
  }

  void __set_msg3(const std::string& val) {
    msg3 = val;
  }

  void __set_msg4(const std::string& val) {
    msg4 = val;
  }

  void __set_msg5(const std::string& val) {
    msg5 = val;
  }

  bool operator == (const SyncService_sendMessage_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(msg1 == rhs.msg1))
      return false;
    if (!(msg2 == rhs.msg2))
      return false;
    if (!(msg3 == rhs.msg3))
      return false;
    if (!(msg4 == rhs.msg4))
      return false;
    if (!(msg5 == rhs.msg5))
      return false;
    return true;
  }
  bool operator != (const SyncService_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_sendMessage_pargs {
 public:


  virtual ~SyncService_sendMessage_pargs() throw() {}

  const int32_t* type;
  const std::string* msg1;
  const std::string* msg2;
  const std::string* msg3;
  const std::string* msg4;
  const std::string* msg5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_sendMessage_result__isset {
  _SyncService_sendMessage_result__isset() : success(false) {}
  bool success;
} _SyncService_sendMessage_result__isset;

class SyncService_sendMessage_result {
 public:

  SyncService_sendMessage_result() : success(0) {
  }

  virtual ~SyncService_sendMessage_result() throw() {}

  int32_t success;

  _SyncService_sendMessage_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_sendMessage_presult__isset {
  _SyncService_sendMessage_presult__isset() : success(false) {}
  bool success;
} _SyncService_sendMessage_presult__isset;

class SyncService_sendMessage_presult {
 public:


  virtual ~SyncService_sendMessage_presult() throw() {}

  int32_t* success;

  _SyncService_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_uploadFile_args__isset {
  _SyncService_uploadFile_args__isset() : source(false), target(false), fileType(false) {}
  bool source;
  bool target;
  bool fileType;
} _SyncService_uploadFile_args__isset;

class SyncService_uploadFile_args {
 public:

  SyncService_uploadFile_args() : source(), target(), fileType((File_Type::type)0) {
  }

  virtual ~SyncService_uploadFile_args() throw() {}

  std::string source;
  std::string target;
  File_Type::type fileType;

  _SyncService_uploadFile_args__isset __isset;

  void __set_source(const std::string& val) {
    source = val;
  }

  void __set_target(const std::string& val) {
    target = val;
  }

  void __set_fileType(const File_Type::type val) {
    fileType = val;
  }

  bool operator == (const SyncService_uploadFile_args & rhs) const
  {
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(fileType == rhs.fileType))
      return false;
    return true;
  }
  bool operator != (const SyncService_uploadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_uploadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_uploadFile_pargs {
 public:


  virtual ~SyncService_uploadFile_pargs() throw() {}

  const std::string* source;
  const std::string* target;
  const File_Type::type* fileType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_uploadFile_result__isset {
  _SyncService_uploadFile_result__isset() : success(false) {}
  bool success;
} _SyncService_uploadFile_result__isset;

class SyncService_uploadFile_result {
 public:

  SyncService_uploadFile_result() : success(0) {
  }

  virtual ~SyncService_uploadFile_result() throw() {}

  int32_t success;

  _SyncService_uploadFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_uploadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_uploadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_uploadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_uploadFile_presult__isset {
  _SyncService_uploadFile_presult__isset() : success(false) {}
  bool success;
} _SyncService_uploadFile_presult__isset;

class SyncService_uploadFile_presult {
 public:


  virtual ~SyncService_uploadFile_presult() throw() {}

  int32_t* success;

  _SyncService_uploadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_downloadFile_args__isset {
  _SyncService_downloadFile_args__isset() : source(false), target(false), fileType(false) {}
  bool source;
  bool target;
  bool fileType;
} _SyncService_downloadFile_args__isset;

class SyncService_downloadFile_args {
 public:

  SyncService_downloadFile_args() : source(), target(), fileType((File_Type::type)0) {
  }

  virtual ~SyncService_downloadFile_args() throw() {}

  std::string source;
  std::string target;
  File_Type::type fileType;

  _SyncService_downloadFile_args__isset __isset;

  void __set_source(const std::string& val) {
    source = val;
  }

  void __set_target(const std::string& val) {
    target = val;
  }

  void __set_fileType(const File_Type::type val) {
    fileType = val;
  }

  bool operator == (const SyncService_downloadFile_args & rhs) const
  {
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(fileType == rhs.fileType))
      return false;
    return true;
  }
  bool operator != (const SyncService_downloadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_downloadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_downloadFile_pargs {
 public:


  virtual ~SyncService_downloadFile_pargs() throw() {}

  const std::string* source;
  const std::string* target;
  const File_Type::type* fileType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_downloadFile_result__isset {
  _SyncService_downloadFile_result__isset() : success(false) {}
  bool success;
} _SyncService_downloadFile_result__isset;

class SyncService_downloadFile_result {
 public:

  SyncService_downloadFile_result() : success(0) {
  }

  virtual ~SyncService_downloadFile_result() throw() {}

  int32_t success;

  _SyncService_downloadFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_downloadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_downloadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_downloadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_downloadFile_presult__isset {
  _SyncService_downloadFile_presult__isset() : success(false) {}
  bool success;
} _SyncService_downloadFile_presult__isset;

class SyncService_downloadFile_presult {
 public:


  virtual ~SyncService_downloadFile_presult() throw() {}

  int32_t* success;

  _SyncService_downloadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_deleteFile_args__isset {
  _SyncService_deleteFile_args__isset() : filePath(false), fileType(false) {}
  bool filePath;
  bool fileType;
} _SyncService_deleteFile_args__isset;

class SyncService_deleteFile_args {
 public:

  SyncService_deleteFile_args() : filePath(), fileType((File_Type::type)0) {
  }

  virtual ~SyncService_deleteFile_args() throw() {}

  std::string filePath;
  File_Type::type fileType;

  _SyncService_deleteFile_args__isset __isset;

  void __set_filePath(const std::string& val) {
    filePath = val;
  }

  void __set_fileType(const File_Type::type val) {
    fileType = val;
  }

  bool operator == (const SyncService_deleteFile_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    if (!(fileType == rhs.fileType))
      return false;
    return true;
  }
  bool operator != (const SyncService_deleteFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_deleteFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_deleteFile_pargs {
 public:


  virtual ~SyncService_deleteFile_pargs() throw() {}

  const std::string* filePath;
  const File_Type::type* fileType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_deleteFile_result__isset {
  _SyncService_deleteFile_result__isset() : success(false) {}
  bool success;
} _SyncService_deleteFile_result__isset;

class SyncService_deleteFile_result {
 public:

  SyncService_deleteFile_result() : success(0) {
  }

  virtual ~SyncService_deleteFile_result() throw() {}

  int32_t success;

  _SyncService_deleteFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_deleteFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_deleteFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_deleteFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_deleteFile_presult__isset {
  _SyncService_deleteFile_presult__isset() : success(false) {}
  bool success;
} _SyncService_deleteFile_presult__isset;

class SyncService_deleteFile_presult {
 public:


  virtual ~SyncService_deleteFile_presult() throw() {}

  int32_t* success;

  _SyncService_deleteFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_renameFile_args__isset {
  _SyncService_renameFile_args__isset() : source(false), target(false), fileType(false) {}
  bool source;
  bool target;
  bool fileType;
} _SyncService_renameFile_args__isset;

class SyncService_renameFile_args {
 public:

  SyncService_renameFile_args() : source(), target(), fileType((File_Type::type)0) {
  }

  virtual ~SyncService_renameFile_args() throw() {}

  std::string source;
  std::string target;
  File_Type::type fileType;

  _SyncService_renameFile_args__isset __isset;

  void __set_source(const std::string& val) {
    source = val;
  }

  void __set_target(const std::string& val) {
    target = val;
  }

  void __set_fileType(const File_Type::type val) {
    fileType = val;
  }

  bool operator == (const SyncService_renameFile_args & rhs) const
  {
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(fileType == rhs.fileType))
      return false;
    return true;
  }
  bool operator != (const SyncService_renameFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_renameFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_renameFile_pargs {
 public:


  virtual ~SyncService_renameFile_pargs() throw() {}

  const std::string* source;
  const std::string* target;
  const File_Type::type* fileType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_renameFile_result__isset {
  _SyncService_renameFile_result__isset() : success(false) {}
  bool success;
} _SyncService_renameFile_result__isset;

class SyncService_renameFile_result {
 public:

  SyncService_renameFile_result() : success(0) {
  }

  virtual ~SyncService_renameFile_result() throw() {}

  int32_t success;

  _SyncService_renameFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_renameFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_renameFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_renameFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_renameFile_presult__isset {
  _SyncService_renameFile_presult__isset() : success(false) {}
  bool success;
} _SyncService_renameFile_presult__isset;

class SyncService_renameFile_presult {
 public:


  virtual ~SyncService_renameFile_presult() throw() {}

  int32_t* success;

  _SyncService_renameFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_moveFile_args__isset {
  _SyncService_moveFile_args__isset() : source(false), target(false), fileType(false) {}
  bool source;
  bool target;
  bool fileType;
} _SyncService_moveFile_args__isset;

class SyncService_moveFile_args {
 public:

  SyncService_moveFile_args() : source(), target(), fileType((File_Type::type)0) {
  }

  virtual ~SyncService_moveFile_args() throw() {}

  std::string source;
  std::string target;
  File_Type::type fileType;

  _SyncService_moveFile_args__isset __isset;

  void __set_source(const std::string& val) {
    source = val;
  }

  void __set_target(const std::string& val) {
    target = val;
  }

  void __set_fileType(const File_Type::type val) {
    fileType = val;
  }

  bool operator == (const SyncService_moveFile_args & rhs) const
  {
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(fileType == rhs.fileType))
      return false;
    return true;
  }
  bool operator != (const SyncService_moveFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_moveFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_moveFile_pargs {
 public:


  virtual ~SyncService_moveFile_pargs() throw() {}

  const std::string* source;
  const std::string* target;
  const File_Type::type* fileType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_moveFile_result__isset {
  _SyncService_moveFile_result__isset() : success(false) {}
  bool success;
} _SyncService_moveFile_result__isset;

class SyncService_moveFile_result {
 public:

  SyncService_moveFile_result() : success(0) {
  }

  virtual ~SyncService_moveFile_result() throw() {}

  int32_t success;

  _SyncService_moveFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_moveFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_moveFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_moveFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_moveFile_presult__isset {
  _SyncService_moveFile_presult__isset() : success(false) {}
  bool success;
} _SyncService_moveFile_presult__isset;

class SyncService_moveFile_presult {
 public:


  virtual ~SyncService_moveFile_presult() throw() {}

  int32_t* success;

  _SyncService_moveFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_copyFile_args__isset {
  _SyncService_copyFile_args__isset() : source(false), target(false), fileType(false) {}
  bool source;
  bool target;
  bool fileType;
} _SyncService_copyFile_args__isset;

class SyncService_copyFile_args {
 public:

  SyncService_copyFile_args() : source(), target(), fileType((File_Type::type)0) {
  }

  virtual ~SyncService_copyFile_args() throw() {}

  std::string source;
  std::string target;
  File_Type::type fileType;

  _SyncService_copyFile_args__isset __isset;

  void __set_source(const std::string& val) {
    source = val;
  }

  void __set_target(const std::string& val) {
    target = val;
  }

  void __set_fileType(const File_Type::type val) {
    fileType = val;
  }

  bool operator == (const SyncService_copyFile_args & rhs) const
  {
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(fileType == rhs.fileType))
      return false;
    return true;
  }
  bool operator != (const SyncService_copyFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_copyFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_copyFile_pargs {
 public:


  virtual ~SyncService_copyFile_pargs() throw() {}

  const std::string* source;
  const std::string* target;
  const File_Type::type* fileType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_copyFile_result__isset {
  _SyncService_copyFile_result__isset() : success(false) {}
  bool success;
} _SyncService_copyFile_result__isset;

class SyncService_copyFile_result {
 public:

  SyncService_copyFile_result() : success(0) {
  }

  virtual ~SyncService_copyFile_result() throw() {}

  int32_t success;

  _SyncService_copyFile_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_copyFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_copyFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_copyFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_copyFile_presult__isset {
  _SyncService_copyFile_presult__isset() : success(false) {}
  bool success;
} _SyncService_copyFile_presult__isset;

class SyncService_copyFile_presult {
 public:


  virtual ~SyncService_copyFile_presult() throw() {}

  int32_t* success;

  _SyncService_copyFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_createDir_args__isset {
  _SyncService_createDir_args__isset() : dirPath(false) {}
  bool dirPath;
} _SyncService_createDir_args__isset;

class SyncService_createDir_args {
 public:

  SyncService_createDir_args() : dirPath() {
  }

  virtual ~SyncService_createDir_args() throw() {}

  std::string dirPath;

  _SyncService_createDir_args__isset __isset;

  void __set_dirPath(const std::string& val) {
    dirPath = val;
  }

  bool operator == (const SyncService_createDir_args & rhs) const
  {
    if (!(dirPath == rhs.dirPath))
      return false;
    return true;
  }
  bool operator != (const SyncService_createDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_createDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_createDir_pargs {
 public:


  virtual ~SyncService_createDir_pargs() throw() {}

  const std::string* dirPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_createDir_result__isset {
  _SyncService_createDir_result__isset() : success(false) {}
  bool success;
} _SyncService_createDir_result__isset;

class SyncService_createDir_result {
 public:

  SyncService_createDir_result() : success(0) {
  }

  virtual ~SyncService_createDir_result() throw() {}

  int32_t success;

  _SyncService_createDir_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_createDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_createDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_createDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_createDir_presult__isset {
  _SyncService_createDir_presult__isset() : success(false) {}
  bool success;
} _SyncService_createDir_presult__isset;

class SyncService_createDir_presult {
 public:


  virtual ~SyncService_createDir_presult() throw() {}

  int32_t* success;

  _SyncService_createDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_listRemoteDir_args__isset {
  _SyncService_listRemoteDir_args__isset() : parent(false), owner_id(false) {}
  bool parent;
  bool owner_id;
} _SyncService_listRemoteDir_args__isset;

class SyncService_listRemoteDir_args {
 public:

  SyncService_listRemoteDir_args() : parent(0), owner_id(0) {
  }

  virtual ~SyncService_listRemoteDir_args() throw() {}

  int64_t parent;
  int64_t owner_id;

  _SyncService_listRemoteDir_args__isset __isset;

  void __set_parent(const int64_t val) {
    parent = val;
  }

  void __set_owner_id(const int64_t val) {
    owner_id = val;
  }

  bool operator == (const SyncService_listRemoteDir_args & rhs) const
  {
    if (!(parent == rhs.parent))
      return false;
    if (!(owner_id == rhs.owner_id))
      return false;
    return true;
  }
  bool operator != (const SyncService_listRemoteDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listRemoteDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_listRemoteDir_pargs {
 public:


  virtual ~SyncService_listRemoteDir_pargs() throw() {}

  const int64_t* parent;
  const int64_t* owner_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listRemoteDir_result__isset {
  _SyncService_listRemoteDir_result__isset() : success(false) {}
  bool success;
} _SyncService_listRemoteDir_result__isset;

class SyncService_listRemoteDir_result {
 public:

  SyncService_listRemoteDir_result() {
  }

  virtual ~SyncService_listRemoteDir_result() throw() {}

  std::vector<List_Info>  success;

  _SyncService_listRemoteDir_result__isset __isset;

  void __set_success(const std::vector<List_Info> & val) {
    success = val;
  }

  bool operator == (const SyncService_listRemoteDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_listRemoteDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listRemoteDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listRemoteDir_presult__isset {
  _SyncService_listRemoteDir_presult__isset() : success(false) {}
  bool success;
} _SyncService_listRemoteDir_presult__isset;

class SyncService_listRemoteDir_presult {
 public:


  virtual ~SyncService_listRemoteDir_presult() throw() {}

  std::vector<List_Info> * success;

  _SyncService_listRemoteDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_upload_args__isset {
  _SyncService_upload_args__isset() : path(false), parent(false), owner_id(false) {}
  bool path;
  bool parent;
  bool owner_id;
} _SyncService_upload_args__isset;

class SyncService_upload_args {
 public:

  SyncService_upload_args() : path(), parent(0), owner_id(0) {
  }

  virtual ~SyncService_upload_args() throw() {}

  std::string path;
  int64_t parent;
  int64_t owner_id;

  _SyncService_upload_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_parent(const int64_t val) {
    parent = val;
  }

  void __set_owner_id(const int64_t val) {
    owner_id = val;
  }

  bool operator == (const SyncService_upload_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(parent == rhs.parent))
      return false;
    if (!(owner_id == rhs.owner_id))
      return false;
    return true;
  }
  bool operator != (const SyncService_upload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_upload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_upload_pargs {
 public:


  virtual ~SyncService_upload_pargs() throw() {}

  const std::string* path;
  const int64_t* parent;
  const int64_t* owner_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_upload_result__isset {
  _SyncService_upload_result__isset() : success(false) {}
  bool success;
} _SyncService_upload_result__isset;

class SyncService_upload_result {
 public:

  SyncService_upload_result() : success(0) {
  }

  virtual ~SyncService_upload_result() throw() {}

  int64_t success;

  _SyncService_upload_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SyncService_upload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_upload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_upload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_upload_presult__isset {
  _SyncService_upload_presult__isset() : success(false) {}
  bool success;
} _SyncService_upload_presult__isset;

class SyncService_upload_presult {
 public:


  virtual ~SyncService_upload_presult() throw() {}

  int64_t* success;

  _SyncService_upload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_login_args__isset {
  _SyncService_login_args__isset() : type(false), username(false), password(false), domain(false) {}
  bool type;
  bool username;
  bool password;
  bool domain;
} _SyncService_login_args__isset;

class SyncService_login_args {
 public:

  SyncService_login_args() : type(0), username(), password(), domain() {
  }

  virtual ~SyncService_login_args() throw() {}

  int32_t type;
  std::string username;
  std::string password;
  std::string domain;

  _SyncService_login_args__isset __isset;

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_domain(const std::string& val) {
    domain = val;
  }

  bool operator == (const SyncService_login_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(domain == rhs.domain))
      return false;
    return true;
  }
  bool operator != (const SyncService_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_login_pargs {
 public:


  virtual ~SyncService_login_pargs() throw() {}

  const int32_t* type;
  const std::string* username;
  const std::string* password;
  const std::string* domain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_login_result__isset {
  _SyncService_login_result__isset() : success(false) {}
  bool success;
} _SyncService_login_result__isset;

class SyncService_login_result {
 public:

  SyncService_login_result() : success(0) {
  }

  virtual ~SyncService_login_result() throw() {}

  int32_t success;

  _SyncService_login_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_login_presult__isset {
  _SyncService_login_presult__isset() : success(false) {}
  bool success;
} _SyncService_login_presult__isset;

class SyncService_login_presult {
 public:


  virtual ~SyncService_login_presult() throw() {}

  int32_t* success;

  _SyncService_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_logout_args {
 public:

  SyncService_logout_args() {
  }

  virtual ~SyncService_logout_args() throw() {}


  bool operator == (const SyncService_logout_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_logout_pargs {
 public:


  virtual ~SyncService_logout_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_logout_result__isset {
  _SyncService_logout_result__isset() : success(false) {}
  bool success;
} _SyncService_logout_result__isset;

class SyncService_logout_result {
 public:

  SyncService_logout_result() : success(0) {
  }

  virtual ~SyncService_logout_result() throw() {}

  int32_t success;

  _SyncService_logout_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_logout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_logout_presult__isset {
  _SyncService_logout_presult__isset() : success(false) {}
  bool success;
} _SyncService_logout_presult__isset;

class SyncService_logout_presult {
 public:


  virtual ~SyncService_logout_presult() throw() {}

  int32_t* success;

  _SyncService_logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_encyptString_args__isset {
  _SyncService_encyptString_args__isset() : src(false) {}
  bool src;
} _SyncService_encyptString_args__isset;

class SyncService_encyptString_args {
 public:

  SyncService_encyptString_args() : src() {
  }

  virtual ~SyncService_encyptString_args() throw() {}

  std::string src;

  _SyncService_encyptString_args__isset __isset;

  void __set_src(const std::string& val) {
    src = val;
  }

  bool operator == (const SyncService_encyptString_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const SyncService_encyptString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_encyptString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_encyptString_pargs {
 public:


  virtual ~SyncService_encyptString_pargs() throw() {}

  const std::string* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_encyptString_result__isset {
  _SyncService_encyptString_result__isset() : success(false) {}
  bool success;
} _SyncService_encyptString_result__isset;

class SyncService_encyptString_result {
 public:

  SyncService_encyptString_result() : success() {
  }

  virtual ~SyncService_encyptString_result() throw() {}

  std::string success;

  _SyncService_encyptString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SyncService_encyptString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_encyptString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_encyptString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_encyptString_presult__isset {
  _SyncService_encyptString_presult__isset() : success(false) {}
  bool success;
} _SyncService_encyptString_presult__isset;

class SyncService_encyptString_presult {
 public:


  virtual ~SyncService_encyptString_presult() throw() {}

  std::string* success;

  _SyncService_encyptString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_decyptString_args__isset {
  _SyncService_decyptString_args__isset() : src(false) {}
  bool src;
} _SyncService_decyptString_args__isset;

class SyncService_decyptString_args {
 public:

  SyncService_decyptString_args() : src() {
  }

  virtual ~SyncService_decyptString_args() throw() {}

  std::string src;

  _SyncService_decyptString_args__isset __isset;

  void __set_src(const std::string& val) {
    src = val;
  }

  bool operator == (const SyncService_decyptString_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const SyncService_decyptString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_decyptString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_decyptString_pargs {
 public:


  virtual ~SyncService_decyptString_pargs() throw() {}

  const std::string* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_decyptString_result__isset {
  _SyncService_decyptString_result__isset() : success(false) {}
  bool success;
} _SyncService_decyptString_result__isset;

class SyncService_decyptString_result {
 public:

  SyncService_decyptString_result() : success() {
  }

  virtual ~SyncService_decyptString_result() throw() {}

  std::string success;

  _SyncService_decyptString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SyncService_decyptString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_decyptString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_decyptString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_decyptString_presult__isset {
  _SyncService_decyptString_presult__isset() : success(false) {}
  bool success;
} _SyncService_decyptString_presult__isset;

class SyncService_decyptString_presult {
 public:


  virtual ~SyncService_decyptString_presult() throw() {}

  std::string* success;

  _SyncService_decyptString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_updateConfigure_args {
 public:

  SyncService_updateConfigure_args() {
  }

  virtual ~SyncService_updateConfigure_args() throw() {}


  bool operator == (const SyncService_updateConfigure_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_updateConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_updateConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_updateConfigure_pargs {
 public:


  virtual ~SyncService_updateConfigure_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_updateConfigure_result__isset {
  _SyncService_updateConfigure_result__isset() : success(false) {}
  bool success;
} _SyncService_updateConfigure_result__isset;

class SyncService_updateConfigure_result {
 public:

  SyncService_updateConfigure_result() : success(0) {
  }

  virtual ~SyncService_updateConfigure_result() throw() {}

  int32_t success;

  _SyncService_updateConfigure_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_updateConfigure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_updateConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_updateConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_updateConfigure_presult__isset {
  _SyncService_updateConfigure_presult__isset() : success(false) {}
  bool success;
} _SyncService_updateConfigure_presult__isset;

class SyncService_updateConfigure_presult {
 public:


  virtual ~SyncService_updateConfigure_presult() throw() {}

  int32_t* success;

  _SyncService_updateConfigure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_getTransSpeed_args {
 public:

  SyncService_getTransSpeed_args() {
  }

  virtual ~SyncService_getTransSpeed_args() throw() {}


  bool operator == (const SyncService_getTransSpeed_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_getTransSpeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getTransSpeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getTransSpeed_pargs {
 public:


  virtual ~SyncService_getTransSpeed_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getTransSpeed_result__isset {
  _SyncService_getTransSpeed_result__isset() : success(false) {}
  bool success;
} _SyncService_getTransSpeed_result__isset;

class SyncService_getTransSpeed_result {
 public:

  SyncService_getTransSpeed_result() {
  }

  virtual ~SyncService_getTransSpeed_result() throw() {}

  Trans_Speed_Info success;

  _SyncService_getTransSpeed_result__isset __isset;

  void __set_success(const Trans_Speed_Info& val) {
    success = val;
  }

  bool operator == (const SyncService_getTransSpeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getTransSpeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getTransSpeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getTransSpeed_presult__isset {
  _SyncService_getTransSpeed_presult__isset() : success(false) {}
  bool success;
} _SyncService_getTransSpeed_presult__isset;

class SyncService_getTransSpeed_presult {
 public:


  virtual ~SyncService_getTransSpeed_presult() throw() {}

  Trans_Speed_Info* success;

  _SyncService_getTransSpeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_getUserId_args {
 public:

  SyncService_getUserId_args() {
  }

  virtual ~SyncService_getUserId_args() throw() {}


  bool operator == (const SyncService_getUserId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_getUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getUserId_pargs {
 public:


  virtual ~SyncService_getUserId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getUserId_result__isset {
  _SyncService_getUserId_result__isset() : success(false) {}
  bool success;
} _SyncService_getUserId_result__isset;

class SyncService_getUserId_result {
 public:

  SyncService_getUserId_result() : success(0) {
  }

  virtual ~SyncService_getUserId_result() throw() {}

  int64_t success;

  _SyncService_getUserId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SyncService_getUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getUserId_presult__isset {
  _SyncService_getUserId_presult__isset() : success(false) {}
  bool success;
} _SyncService_getUserId_presult__isset;

class SyncService_getUserId_presult {
 public:


  virtual ~SyncService_getUserId_presult() throw() {}

  int64_t* success;

  _SyncService_getUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_getUpdateInfo_args {
 public:

  SyncService_getUpdateInfo_args() {
  }

  virtual ~SyncService_getUpdateInfo_args() throw() {}


  bool operator == (const SyncService_getUpdateInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_getUpdateInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getUpdateInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getUpdateInfo_pargs {
 public:


  virtual ~SyncService_getUpdateInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getUpdateInfo_result__isset {
  _SyncService_getUpdateInfo_result__isset() : success(false) {}
  bool success;
} _SyncService_getUpdateInfo_result__isset;

class SyncService_getUpdateInfo_result {
 public:

  SyncService_getUpdateInfo_result() {
  }

  virtual ~SyncService_getUpdateInfo_result() throw() {}

  Update_Info success;

  _SyncService_getUpdateInfo_result__isset __isset;

  void __set_success(const Update_Info& val) {
    success = val;
  }

  bool operator == (const SyncService_getUpdateInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getUpdateInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getUpdateInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getUpdateInfo_presult__isset {
  _SyncService_getUpdateInfo_presult__isset() : success(false) {}
  bool success;
} _SyncService_getUpdateInfo_presult__isset;

class SyncService_getUpdateInfo_presult {
 public:


  virtual ~SyncService_getUpdateInfo_presult() throw() {}

  Update_Info* success;

  _SyncService_getUpdateInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_downloadClient_args__isset {
  _SyncService_downloadClient_args__isset() : downloadUrl(false), location(false) {}
  bool downloadUrl;
  bool location;
} _SyncService_downloadClient_args__isset;

class SyncService_downloadClient_args {
 public:

  SyncService_downloadClient_args() : downloadUrl(), location() {
  }

  virtual ~SyncService_downloadClient_args() throw() {}

  std::string downloadUrl;
  std::string location;

  _SyncService_downloadClient_args__isset __isset;

  void __set_downloadUrl(const std::string& val) {
    downloadUrl = val;
  }

  void __set_location(const std::string& val) {
    location = val;
  }

  bool operator == (const SyncService_downloadClient_args & rhs) const
  {
    if (!(downloadUrl == rhs.downloadUrl))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const SyncService_downloadClient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_downloadClient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_downloadClient_pargs {
 public:


  virtual ~SyncService_downloadClient_pargs() throw() {}

  const std::string* downloadUrl;
  const std::string* location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_downloadClient_result__isset {
  _SyncService_downloadClient_result__isset() : success(false) {}
  bool success;
} _SyncService_downloadClient_result__isset;

class SyncService_downloadClient_result {
 public:

  SyncService_downloadClient_result() : success(0) {
  }

  virtual ~SyncService_downloadClient_result() throw() {}

  int32_t success;

  _SyncService_downloadClient_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_downloadClient_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_downloadClient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_downloadClient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_downloadClient_presult__isset {
  _SyncService_downloadClient_presult__isset() : success(false) {}
  bool success;
} _SyncService_downloadClient_presult__isset;

class SyncService_downloadClient_presult {
 public:


  virtual ~SyncService_downloadClient_presult() throw() {}

  int32_t* success;

  _SyncService_downloadClient_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_getNodeInfo_args__isset {
  _SyncService_getNodeInfo_args__isset() : path(false) {}
  bool path;
} _SyncService_getNodeInfo_args__isset;

class SyncService_getNodeInfo_args {
 public:

  SyncService_getNodeInfo_args() : path() {
  }

  virtual ~SyncService_getNodeInfo_args() throw() {}

  std::string path;

  _SyncService_getNodeInfo_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const SyncService_getNodeInfo_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SyncService_getNodeInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getNodeInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getNodeInfo_pargs {
 public:


  virtual ~SyncService_getNodeInfo_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getNodeInfo_result__isset {
  _SyncService_getNodeInfo_result__isset() : success(false) {}
  bool success;
} _SyncService_getNodeInfo_result__isset;

class SyncService_getNodeInfo_result {
 public:

  SyncService_getNodeInfo_result() {
  }

  virtual ~SyncService_getNodeInfo_result() throw() {}

  Node_Info success;

  _SyncService_getNodeInfo_result__isset __isset;

  void __set_success(const Node_Info& val) {
    success = val;
  }

  bool operator == (const SyncService_getNodeInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getNodeInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getNodeInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getNodeInfo_presult__isset {
  _SyncService_getNodeInfo_presult__isset() : success(false) {}
  bool success;
} _SyncService_getNodeInfo_presult__isset;

class SyncService_getNodeInfo_presult {
 public:


  virtual ~SyncService_getNodeInfo_presult() throw() {}

  Node_Info* success;

  _SyncService_getNodeInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_getOverlayIconStatus_args__isset {
  _SyncService_getOverlayIconStatus_args__isset() : path(false) {}
  bool path;
} _SyncService_getOverlayIconStatus_args__isset;

class SyncService_getOverlayIconStatus_args {
 public:

  SyncService_getOverlayIconStatus_args() : path() {
  }

  virtual ~SyncService_getOverlayIconStatus_args() throw() {}

  std::string path;

  _SyncService_getOverlayIconStatus_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const SyncService_getOverlayIconStatus_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SyncService_getOverlayIconStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getOverlayIconStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getOverlayIconStatus_pargs {
 public:


  virtual ~SyncService_getOverlayIconStatus_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getOverlayIconStatus_result__isset {
  _SyncService_getOverlayIconStatus_result__isset() : success(false) {}
  bool success;
} _SyncService_getOverlayIconStatus_result__isset;

class SyncService_getOverlayIconStatus_result {
 public:

  SyncService_getOverlayIconStatus_result() : success(0) {
  }

  virtual ~SyncService_getOverlayIconStatus_result() throw() {}

  int32_t success;

  _SyncService_getOverlayIconStatus_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_getOverlayIconStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getOverlayIconStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getOverlayIconStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getOverlayIconStatus_presult__isset {
  _SyncService_getOverlayIconStatus_presult__isset() : success(false) {}
  bool success;
} _SyncService_getOverlayIconStatus_presult__isset;

class SyncService_getOverlayIconStatus_presult {
 public:


  virtual ~SyncService_getOverlayIconStatus_presult() throw() {}

  int32_t* success;

  _SyncService_getOverlayIconStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_getRemoteId_args__isset {
  _SyncService_getRemoteId_args__isset() : path(false) {}
  bool path;
} _SyncService_getRemoteId_args__isset;

class SyncService_getRemoteId_args {
 public:

  SyncService_getRemoteId_args() : path() {
  }

  virtual ~SyncService_getRemoteId_args() throw() {}

  std::string path;

  _SyncService_getRemoteId_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const SyncService_getRemoteId_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SyncService_getRemoteId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getRemoteId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getRemoteId_pargs {
 public:


  virtual ~SyncService_getRemoteId_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getRemoteId_result__isset {
  _SyncService_getRemoteId_result__isset() : success(false) {}
  bool success;
} _SyncService_getRemoteId_result__isset;

class SyncService_getRemoteId_result {
 public:

  SyncService_getRemoteId_result() : success(0) {
  }

  virtual ~SyncService_getRemoteId_result() throw() {}

  int64_t success;

  _SyncService_getRemoteId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SyncService_getRemoteId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getRemoteId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getRemoteId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getRemoteId_presult__isset {
  _SyncService_getRemoteId_presult__isset() : success(false) {}
  bool success;
} _SyncService_getRemoteId_presult__isset;

class SyncService_getRemoteId_presult {
 public:


  virtual ~SyncService_getRemoteId_presult() throw() {}

  int64_t* success;

  _SyncService_getRemoteId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_listError_args__isset {
  _SyncService_listError_args__isset() : offset(false), limit(false) {}
  bool offset;
  bool limit;
} _SyncService_listError_args__isset;

class SyncService_listError_args {
 public:

  SyncService_listError_args() : offset(0), limit(0) {
  }

  virtual ~SyncService_listError_args() throw() {}

  int32_t offset;
  int32_t limit;

  _SyncService_listError_args__isset __isset;

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  bool operator == (const SyncService_listError_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const SyncService_listError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_listError_pargs {
 public:


  virtual ~SyncService_listError_pargs() throw() {}

  const int32_t* offset;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listError_result__isset {
  _SyncService_listError_result__isset() : success(false) {}
  bool success;
} _SyncService_listError_result__isset;

class SyncService_listError_result {
 public:

  SyncService_listError_result() {
  }

  virtual ~SyncService_listError_result() throw() {}

  std::vector<Error_Info>  success;

  _SyncService_listError_result__isset __isset;

  void __set_success(const std::vector<Error_Info> & val) {
    success = val;
  }

  bool operator == (const SyncService_listError_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_listError_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listError_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listError_presult__isset {
  _SyncService_listError_presult__isset() : success(false) {}
  bool success;
} _SyncService_listError_presult__isset;

class SyncService_listError_presult {
 public:


  virtual ~SyncService_listError_presult() throw() {}

  std::vector<Error_Info> * success;

  _SyncService_listError_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_listDomainUsers_args__isset {
  _SyncService_listDomainUsers_args__isset() : keyword(false) {}
  bool keyword;
} _SyncService_listDomainUsers_args__isset;

class SyncService_listDomainUsers_args {
 public:

  SyncService_listDomainUsers_args() : keyword() {
  }

  virtual ~SyncService_listDomainUsers_args() throw() {}

  std::string keyword;

  _SyncService_listDomainUsers_args__isset __isset;

  void __set_keyword(const std::string& val) {
    keyword = val;
  }

  bool operator == (const SyncService_listDomainUsers_args & rhs) const
  {
    if (!(keyword == rhs.keyword))
      return false;
    return true;
  }
  bool operator != (const SyncService_listDomainUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listDomainUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_listDomainUsers_pargs {
 public:


  virtual ~SyncService_listDomainUsers_pargs() throw() {}

  const std::string* keyword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listDomainUsers_result__isset {
  _SyncService_listDomainUsers_result__isset() : success(false) {}
  bool success;
} _SyncService_listDomainUsers_result__isset;

class SyncService_listDomainUsers_result {
 public:

  SyncService_listDomainUsers_result() {
  }

  virtual ~SyncService_listDomainUsers_result() throw() {}

  std::vector<Share_User_Info>  success;

  _SyncService_listDomainUsers_result__isset __isset;

  void __set_success(const std::vector<Share_User_Info> & val) {
    success = val;
  }

  bool operator == (const SyncService_listDomainUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_listDomainUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listDomainUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listDomainUsers_presult__isset {
  _SyncService_listDomainUsers_presult__isset() : success(false) {}
  bool success;
} _SyncService_listDomainUsers_presult__isset;

class SyncService_listDomainUsers_presult {
 public:


  virtual ~SyncService_listDomainUsers_presult() throw() {}

  std::vector<Share_User_Info> * success;

  _SyncService_listDomainUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_listShareUsers_args__isset {
  _SyncService_listShareUsers_args__isset() : path(false) {}
  bool path;
} _SyncService_listShareUsers_args__isset;

class SyncService_listShareUsers_args {
 public:

  SyncService_listShareUsers_args() : path() {
  }

  virtual ~SyncService_listShareUsers_args() throw() {}

  std::string path;

  _SyncService_listShareUsers_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const SyncService_listShareUsers_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SyncService_listShareUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listShareUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_listShareUsers_pargs {
 public:


  virtual ~SyncService_listShareUsers_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listShareUsers_result__isset {
  _SyncService_listShareUsers_result__isset() : success(false) {}
  bool success;
} _SyncService_listShareUsers_result__isset;

class SyncService_listShareUsers_result {
 public:

  SyncService_listShareUsers_result() {
  }

  virtual ~SyncService_listShareUsers_result() throw() {}

  std::vector<Share_User_Info>  success;

  _SyncService_listShareUsers_result__isset __isset;

  void __set_success(const std::vector<Share_User_Info> & val) {
    success = val;
  }

  bool operator == (const SyncService_listShareUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_listShareUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listShareUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listShareUsers_presult__isset {
  _SyncService_listShareUsers_presult__isset() : success(false) {}
  bool success;
} _SyncService_listShareUsers_presult__isset;

class SyncService_listShareUsers_presult {
 public:


  virtual ~SyncService_listShareUsers_presult() throw() {}

  std::vector<Share_User_Info> * success;

  _SyncService_listShareUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_setShareMember_args__isset {
  _SyncService_setShareMember_args__isset() : path(false), shareUserInfos(false), emailMsg(false) {}
  bool path;
  bool shareUserInfos;
  bool emailMsg;
} _SyncService_setShareMember_args__isset;

class SyncService_setShareMember_args {
 public:

  SyncService_setShareMember_args() : path(), emailMsg() {
  }

  virtual ~SyncService_setShareMember_args() throw() {}

  std::string path;
  std::vector<Share_User_Info>  shareUserInfos;
  std::string emailMsg;

  _SyncService_setShareMember_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_shareUserInfos(const std::vector<Share_User_Info> & val) {
    shareUserInfos = val;
  }

  void __set_emailMsg(const std::string& val) {
    emailMsg = val;
  }

  bool operator == (const SyncService_setShareMember_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(shareUserInfos == rhs.shareUserInfos))
      return false;
    if (!(emailMsg == rhs.emailMsg))
      return false;
    return true;
  }
  bool operator != (const SyncService_setShareMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_setShareMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_setShareMember_pargs {
 public:


  virtual ~SyncService_setShareMember_pargs() throw() {}

  const std::string* path;
  const std::vector<Share_User_Info> * shareUserInfos;
  const std::string* emailMsg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_setShareMember_result__isset {
  _SyncService_setShareMember_result__isset() : success(false) {}
  bool success;
} _SyncService_setShareMember_result__isset;

class SyncService_setShareMember_result {
 public:

  SyncService_setShareMember_result() : success(0) {
  }

  virtual ~SyncService_setShareMember_result() throw() {}

  int32_t success;

  _SyncService_setShareMember_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_setShareMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_setShareMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_setShareMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_setShareMember_presult__isset {
  _SyncService_setShareMember_presult__isset() : success(false) {}
  bool success;
} _SyncService_setShareMember_presult__isset;

class SyncService_setShareMember_presult {
 public:


  virtual ~SyncService_setShareMember_presult() throw() {}

  int32_t* success;

  _SyncService_setShareMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_delShareMember_args__isset {
  _SyncService_delShareMember_args__isset() : path(false), shareUserInfo(false) {}
  bool path;
  bool shareUserInfo;
} _SyncService_delShareMember_args__isset;

class SyncService_delShareMember_args {
 public:

  SyncService_delShareMember_args() : path() {
  }

  virtual ~SyncService_delShareMember_args() throw() {}

  std::string path;
  Share_User_Info shareUserInfo;

  _SyncService_delShareMember_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_shareUserInfo(const Share_User_Info& val) {
    shareUserInfo = val;
  }

  bool operator == (const SyncService_delShareMember_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(shareUserInfo == rhs.shareUserInfo))
      return false;
    return true;
  }
  bool operator != (const SyncService_delShareMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_delShareMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_delShareMember_pargs {
 public:


  virtual ~SyncService_delShareMember_pargs() throw() {}

  const std::string* path;
  const Share_User_Info* shareUserInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_delShareMember_result__isset {
  _SyncService_delShareMember_result__isset() : success(false) {}
  bool success;
} _SyncService_delShareMember_result__isset;

class SyncService_delShareMember_result {
 public:

  SyncService_delShareMember_result() : success(0) {
  }

  virtual ~SyncService_delShareMember_result() throw() {}

  int32_t success;

  _SyncService_delShareMember_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_delShareMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_delShareMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_delShareMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_delShareMember_presult__isset {
  _SyncService_delShareMember_presult__isset() : success(false) {}
  bool success;
} _SyncService_delShareMember_presult__isset;

class SyncService_delShareMember_presult {
 public:


  virtual ~SyncService_delShareMember_presult() throw() {}

  int32_t* success;

  _SyncService_delShareMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_cancelShare_args__isset {
  _SyncService_cancelShare_args__isset() : path(false) {}
  bool path;
} _SyncService_cancelShare_args__isset;

class SyncService_cancelShare_args {
 public:

  SyncService_cancelShare_args() : path() {
  }

  virtual ~SyncService_cancelShare_args() throw() {}

  std::string path;

  _SyncService_cancelShare_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const SyncService_cancelShare_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SyncService_cancelShare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_cancelShare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_cancelShare_pargs {
 public:


  virtual ~SyncService_cancelShare_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_cancelShare_result__isset {
  _SyncService_cancelShare_result__isset() : success(false) {}
  bool success;
} _SyncService_cancelShare_result__isset;

class SyncService_cancelShare_result {
 public:

  SyncService_cancelShare_result() : success(0) {
  }

  virtual ~SyncService_cancelShare_result() throw() {}

  int32_t success;

  _SyncService_cancelShare_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_cancelShare_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_cancelShare_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_cancelShare_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_cancelShare_presult__isset {
  _SyncService_cancelShare_presult__isset() : success(false) {}
  bool success;
} _SyncService_cancelShare_presult__isset;

class SyncService_cancelShare_presult {
 public:


  virtual ~SyncService_cancelShare_presult() throw() {}

  int32_t* success;

  _SyncService_cancelShare_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_getShareLink_args__isset {
  _SyncService_getShareLink_args__isset() : path(false) {}
  bool path;
} _SyncService_getShareLink_args__isset;

class SyncService_getShareLink_args {
 public:

  SyncService_getShareLink_args() : path() {
  }

  virtual ~SyncService_getShareLink_args() throw() {}

  std::string path;

  _SyncService_getShareLink_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const SyncService_getShareLink_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SyncService_getShareLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getShareLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getShareLink_pargs {
 public:


  virtual ~SyncService_getShareLink_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getShareLink_result__isset {
  _SyncService_getShareLink_result__isset() : success(false) {}
  bool success;
} _SyncService_getShareLink_result__isset;

class SyncService_getShareLink_result {
 public:

  SyncService_getShareLink_result() {
  }

  virtual ~SyncService_getShareLink_result() throw() {}

  Share_Link_Info success;

  _SyncService_getShareLink_result__isset __isset;

  void __set_success(const Share_Link_Info& val) {
    success = val;
  }

  bool operator == (const SyncService_getShareLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getShareLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getShareLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getShareLink_presult__isset {
  _SyncService_getShareLink_presult__isset() : success(false) {}
  bool success;
} _SyncService_getShareLink_presult__isset;

class SyncService_getShareLink_presult {
 public:


  virtual ~SyncService_getShareLink_presult() throw() {}

  Share_Link_Info* success;

  _SyncService_getShareLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_modifyShareLink_args__isset {
  _SyncService_modifyShareLink_args__isset() : path(false), shareLinkInfo(false) {}
  bool path;
  bool shareLinkInfo;
} _SyncService_modifyShareLink_args__isset;

class SyncService_modifyShareLink_args {
 public:

  SyncService_modifyShareLink_args() : path() {
  }

  virtual ~SyncService_modifyShareLink_args() throw() {}

  std::string path;
  Share_Link_Info shareLinkInfo;

  _SyncService_modifyShareLink_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_shareLinkInfo(const Share_Link_Info& val) {
    shareLinkInfo = val;
  }

  bool operator == (const SyncService_modifyShareLink_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(shareLinkInfo == rhs.shareLinkInfo))
      return false;
    return true;
  }
  bool operator != (const SyncService_modifyShareLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_modifyShareLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_modifyShareLink_pargs {
 public:


  virtual ~SyncService_modifyShareLink_pargs() throw() {}

  const std::string* path;
  const Share_Link_Info* shareLinkInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_modifyShareLink_result__isset {
  _SyncService_modifyShareLink_result__isset() : success(false) {}
  bool success;
} _SyncService_modifyShareLink_result__isset;

class SyncService_modifyShareLink_result {
 public:

  SyncService_modifyShareLink_result() {
  }

  virtual ~SyncService_modifyShareLink_result() throw() {}

  Share_Link_Info success;

  _SyncService_modifyShareLink_result__isset __isset;

  void __set_success(const Share_Link_Info& val) {
    success = val;
  }

  bool operator == (const SyncService_modifyShareLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_modifyShareLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_modifyShareLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_modifyShareLink_presult__isset {
  _SyncService_modifyShareLink_presult__isset() : success(false) {}
  bool success;
} _SyncService_modifyShareLink_presult__isset;

class SyncService_modifyShareLink_presult {
 public:


  virtual ~SyncService_modifyShareLink_presult() throw() {}

  Share_Link_Info* success;

  _SyncService_modifyShareLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_delShareLink_args__isset {
  _SyncService_delShareLink_args__isset() : path(false) {}
  bool path;
} _SyncService_delShareLink_args__isset;

class SyncService_delShareLink_args {
 public:

  SyncService_delShareLink_args() : path() {
  }

  virtual ~SyncService_delShareLink_args() throw() {}

  std::string path;

  _SyncService_delShareLink_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const SyncService_delShareLink_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SyncService_delShareLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_delShareLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_delShareLink_pargs {
 public:


  virtual ~SyncService_delShareLink_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_delShareLink_result__isset {
  _SyncService_delShareLink_result__isset() : success(false) {}
  bool success;
} _SyncService_delShareLink_result__isset;

class SyncService_delShareLink_result {
 public:

  SyncService_delShareLink_result() : success(0) {
  }

  virtual ~SyncService_delShareLink_result() throw() {}

  int32_t success;

  _SyncService_delShareLink_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_delShareLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_delShareLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_delShareLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_delShareLink_presult__isset {
  _SyncService_delShareLink_presult__isset() : success(false) {}
  bool success;
} _SyncService_delShareLink_presult__isset;

class SyncService_delShareLink_presult {
 public:


  virtual ~SyncService_delShareLink_presult() throw() {}

  int32_t* success;

  _SyncService_delShareLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_getRandomString_args {
 public:

  SyncService_getRandomString_args() {
  }

  virtual ~SyncService_getRandomString_args() throw() {}


  bool operator == (const SyncService_getRandomString_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_getRandomString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getRandomString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getRandomString_pargs {
 public:


  virtual ~SyncService_getRandomString_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getRandomString_result__isset {
  _SyncService_getRandomString_result__isset() : success(false) {}
  bool success;
} _SyncService_getRandomString_result__isset;

class SyncService_getRandomString_result {
 public:

  SyncService_getRandomString_result() : success() {
  }

  virtual ~SyncService_getRandomString_result() throw() {}

  std::string success;

  _SyncService_getRandomString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const SyncService_getRandomString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getRandomString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getRandomString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getRandomString_presult__isset {
  _SyncService_getRandomString_presult__isset() : success(false) {}
  bool success;
} _SyncService_getRandomString_presult__isset;

class SyncService_getRandomString_presult {
 public:


  virtual ~SyncService_getRandomString_presult() throw() {}

  std::string* success;

  _SyncService_getRandomString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_sendEmail_args__isset {
  _SyncService_sendEmail_args__isset() : type(false), path(false), shareLinkInfo(false), emailMsg(false), mailto(false) {}
  bool type;
  bool path;
  bool shareLinkInfo;
  bool emailMsg;
  bool mailto;
} _SyncService_sendEmail_args__isset;

class SyncService_sendEmail_args {
 public:

  SyncService_sendEmail_args() : type(), path(), emailMsg() {
  }

  virtual ~SyncService_sendEmail_args() throw() {}

  std::string type;
  std::string path;
  Share_Link_Info shareLinkInfo;
  std::string emailMsg;
  std::vector<std::string>  mailto;

  _SyncService_sendEmail_args__isset __isset;

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_shareLinkInfo(const Share_Link_Info& val) {
    shareLinkInfo = val;
  }

  void __set_emailMsg(const std::string& val) {
    emailMsg = val;
  }

  void __set_mailto(const std::vector<std::string> & val) {
    mailto = val;
  }

  bool operator == (const SyncService_sendEmail_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(shareLinkInfo == rhs.shareLinkInfo))
      return false;
    if (!(emailMsg == rhs.emailMsg))
      return false;
    if (!(mailto == rhs.mailto))
      return false;
    return true;
  }
  bool operator != (const SyncService_sendEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_sendEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_sendEmail_pargs {
 public:


  virtual ~SyncService_sendEmail_pargs() throw() {}

  const std::string* type;
  const std::string* path;
  const Share_Link_Info* shareLinkInfo;
  const std::string* emailMsg;
  const std::vector<std::string> * mailto;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_sendEmail_result__isset {
  _SyncService_sendEmail_result__isset() : success(false) {}
  bool success;
} _SyncService_sendEmail_result__isset;

class SyncService_sendEmail_result {
 public:

  SyncService_sendEmail_result() : success(0) {
  }

  virtual ~SyncService_sendEmail_result() throw() {}

  int32_t success;

  _SyncService_sendEmail_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_sendEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_sendEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_sendEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_sendEmail_presult__isset {
  _SyncService_sendEmail_presult__isset() : success(false) {}
  bool success;
} _SyncService_sendEmail_presult__isset;

class SyncService_sendEmail_presult {
 public:


  virtual ~SyncService_sendEmail_presult() throw() {}

  int32_t* success;

  _SyncService_sendEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_listBatchDomainUsers_args__isset {
  _SyncService_listBatchDomainUsers_args__isset() : keyword(false) {}
  bool keyword;
} _SyncService_listBatchDomainUsers_args__isset;

class SyncService_listBatchDomainUsers_args {
 public:

  SyncService_listBatchDomainUsers_args() {
  }

  virtual ~SyncService_listBatchDomainUsers_args() throw() {}

  std::vector<std::string>  keyword;

  _SyncService_listBatchDomainUsers_args__isset __isset;

  void __set_keyword(const std::vector<std::string> & val) {
    keyword = val;
  }

  bool operator == (const SyncService_listBatchDomainUsers_args & rhs) const
  {
    if (!(keyword == rhs.keyword))
      return false;
    return true;
  }
  bool operator != (const SyncService_listBatchDomainUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listBatchDomainUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_listBatchDomainUsers_pargs {
 public:


  virtual ~SyncService_listBatchDomainUsers_pargs() throw() {}

  const std::vector<std::string> * keyword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listBatchDomainUsers_result__isset {
  _SyncService_listBatchDomainUsers_result__isset() : success(false) {}
  bool success;
} _SyncService_listBatchDomainUsers_result__isset;

class SyncService_listBatchDomainUsers_result {
 public:

  SyncService_listBatchDomainUsers_result() {
  }

  virtual ~SyncService_listBatchDomainUsers_result() throw() {}

  std::map<std::string, Share_User_Info>  success;

  _SyncService_listBatchDomainUsers_result__isset __isset;

  void __set_success(const std::map<std::string, Share_User_Info> & val) {
    success = val;
  }

  bool operator == (const SyncService_listBatchDomainUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_listBatchDomainUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listBatchDomainUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listBatchDomainUsers_presult__isset {
  _SyncService_listBatchDomainUsers_presult__isset() : success(false) {}
  bool success;
} _SyncService_listBatchDomainUsers_presult__isset;

class SyncService_listBatchDomainUsers_presult {
 public:


  virtual ~SyncService_listBatchDomainUsers_presult() throw() {}

  std::map<std::string, Share_User_Info> * success;

  _SyncService_listBatchDomainUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_uploadAttachements_args__isset {
  _SyncService_uploadAttachements_args__isset() : attachements(false), parent(false), taskGroupId(false) {}
  bool attachements;
  bool parent;
  bool taskGroupId;
} _SyncService_uploadAttachements_args__isset;

class SyncService_uploadAttachements_args {
 public:

  SyncService_uploadAttachements_args() : parent(), taskGroupId() {
  }

  virtual ~SyncService_uploadAttachements_args() throw() {}

  std::vector<std::string>  attachements;
  std::string parent;
  std::string taskGroupId;

  _SyncService_uploadAttachements_args__isset __isset;

  void __set_attachements(const std::vector<std::string> & val) {
    attachements = val;
  }

  void __set_parent(const std::string& val) {
    parent = val;
  }

  void __set_taskGroupId(const std::string& val) {
    taskGroupId = val;
  }

  bool operator == (const SyncService_uploadAttachements_args & rhs) const
  {
    if (!(attachements == rhs.attachements))
      return false;
    if (!(parent == rhs.parent))
      return false;
    if (!(taskGroupId == rhs.taskGroupId))
      return false;
    return true;
  }
  bool operator != (const SyncService_uploadAttachements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_uploadAttachements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_uploadAttachements_pargs {
 public:


  virtual ~SyncService_uploadAttachements_pargs() throw() {}

  const std::vector<std::string> * attachements;
  const std::string* parent;
  const std::string* taskGroupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_uploadAttachements_result__isset {
  _SyncService_uploadAttachements_result__isset() : success(false) {}
  bool success;
} _SyncService_uploadAttachements_result__isset;

class SyncService_uploadAttachements_result {
 public:

  SyncService_uploadAttachements_result() : success(0) {
  }

  virtual ~SyncService_uploadAttachements_result() throw() {}

  int32_t success;

  _SyncService_uploadAttachements_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_uploadAttachements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_uploadAttachements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_uploadAttachements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_uploadAttachements_presult__isset {
  _SyncService_uploadAttachements_presult__isset() : success(false) {}
  bool success;
} _SyncService_uploadAttachements_presult__isset;

class SyncService_uploadAttachements_presult {
 public:


  virtual ~SyncService_uploadAttachements_presult() throw() {}

  int32_t* success;

  _SyncService_uploadAttachements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_isAttachementsTransComplete_args__isset {
  _SyncService_isAttachementsTransComplete_args__isset() : taskGroupId(false) {}
  bool taskGroupId;
} _SyncService_isAttachementsTransComplete_args__isset;

class SyncService_isAttachementsTransComplete_args {
 public:

  SyncService_isAttachementsTransComplete_args() : taskGroupId() {
  }

  virtual ~SyncService_isAttachementsTransComplete_args() throw() {}

  std::string taskGroupId;

  _SyncService_isAttachementsTransComplete_args__isset __isset;

  void __set_taskGroupId(const std::string& val) {
    taskGroupId = val;
  }

  bool operator == (const SyncService_isAttachementsTransComplete_args & rhs) const
  {
    if (!(taskGroupId == rhs.taskGroupId))
      return false;
    return true;
  }
  bool operator != (const SyncService_isAttachementsTransComplete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_isAttachementsTransComplete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_isAttachementsTransComplete_pargs {
 public:


  virtual ~SyncService_isAttachementsTransComplete_pargs() throw() {}

  const std::string* taskGroupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_isAttachementsTransComplete_result__isset {
  _SyncService_isAttachementsTransComplete_result__isset() : success(false) {}
  bool success;
} _SyncService_isAttachementsTransComplete_result__isset;

class SyncService_isAttachementsTransComplete_result {
 public:

  SyncService_isAttachementsTransComplete_result() : success(0) {
  }

  virtual ~SyncService_isAttachementsTransComplete_result() throw() {}

  bool success;

  _SyncService_isAttachementsTransComplete_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SyncService_isAttachementsTransComplete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_isAttachementsTransComplete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_isAttachementsTransComplete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_isAttachementsTransComplete_presult__isset {
  _SyncService_isAttachementsTransComplete_presult__isset() : success(false) {}
  bool success;
} _SyncService_isAttachementsTransComplete_presult__isset;

class SyncService_isAttachementsTransComplete_presult {
 public:


  virtual ~SyncService_isAttachementsTransComplete_presult() throw() {}

  bool* success;

  _SyncService_isAttachementsTransComplete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_getAttachementsLinks_args__isset {
  _SyncService_getAttachementsLinks_args__isset() : transGroupId(false) {}
  bool transGroupId;
} _SyncService_getAttachementsLinks_args__isset;

class SyncService_getAttachementsLinks_args {
 public:

  SyncService_getAttachementsLinks_args() : transGroupId() {
  }

  virtual ~SyncService_getAttachementsLinks_args() throw() {}

  std::string transGroupId;

  _SyncService_getAttachementsLinks_args__isset __isset;

  void __set_transGroupId(const std::string& val) {
    transGroupId = val;
  }

  bool operator == (const SyncService_getAttachementsLinks_args & rhs) const
  {
    if (!(transGroupId == rhs.transGroupId))
      return false;
    return true;
  }
  bool operator != (const SyncService_getAttachementsLinks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getAttachementsLinks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_getAttachementsLinks_pargs {
 public:


  virtual ~SyncService_getAttachementsLinks_pargs() throw() {}

  const std::string* transGroupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getAttachementsLinks_result__isset {
  _SyncService_getAttachementsLinks_result__isset() : success(false) {}
  bool success;
} _SyncService_getAttachementsLinks_result__isset;

class SyncService_getAttachementsLinks_result {
 public:

  SyncService_getAttachementsLinks_result() {
  }

  virtual ~SyncService_getAttachementsLinks_result() throw() {}

  std::map<std::string, std::string>  success;

  _SyncService_getAttachementsLinks_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const SyncService_getAttachementsLinks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_getAttachementsLinks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_getAttachementsLinks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_getAttachementsLinks_presult__isset {
  _SyncService_getAttachementsLinks_presult__isset() : success(false) {}
  bool success;
} _SyncService_getAttachementsLinks_presult__isset;

class SyncService_getAttachementsLinks_presult {
 public:


  virtual ~SyncService_getAttachementsLinks_presult() throw() {}

  std::map<std::string, std::string> * success;

  _SyncService_getAttachementsLinks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_deleteTransTasksByGroupId_args__isset {
  _SyncService_deleteTransTasksByGroupId_args__isset() : transGroupId(false) {}
  bool transGroupId;
} _SyncService_deleteTransTasksByGroupId_args__isset;

class SyncService_deleteTransTasksByGroupId_args {
 public:

  SyncService_deleteTransTasksByGroupId_args() : transGroupId() {
  }

  virtual ~SyncService_deleteTransTasksByGroupId_args() throw() {}

  std::string transGroupId;

  _SyncService_deleteTransTasksByGroupId_args__isset __isset;

  void __set_transGroupId(const std::string& val) {
    transGroupId = val;
  }

  bool operator == (const SyncService_deleteTransTasksByGroupId_args & rhs) const
  {
    if (!(transGroupId == rhs.transGroupId))
      return false;
    return true;
  }
  bool operator != (const SyncService_deleteTransTasksByGroupId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_deleteTransTasksByGroupId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_deleteTransTasksByGroupId_pargs {
 public:


  virtual ~SyncService_deleteTransTasksByGroupId_pargs() throw() {}

  const std::string* transGroupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_deleteTransTasksByGroupId_result__isset {
  _SyncService_deleteTransTasksByGroupId_result__isset() : success(false) {}
  bool success;
} _SyncService_deleteTransTasksByGroupId_result__isset;

class SyncService_deleteTransTasksByGroupId_result {
 public:

  SyncService_deleteTransTasksByGroupId_result() : success(0) {
  }

  virtual ~SyncService_deleteTransTasksByGroupId_result() throw() {}

  int32_t success;

  _SyncService_deleteTransTasksByGroupId_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_deleteTransTasksByGroupId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_deleteTransTasksByGroupId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_deleteTransTasksByGroupId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_deleteTransTasksByGroupId_presult__isset {
  _SyncService_deleteTransTasksByGroupId_presult__isset() : success(false) {}
  bool success;
} _SyncService_deleteTransTasksByGroupId_presult__isset;

class SyncService_deleteTransTasksByGroupId_presult {
 public:


  virtual ~SyncService_deleteTransTasksByGroupId_presult() throw() {}

  int32_t* success;

  _SyncService_deleteTransTasksByGroupId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_showTransTask_args__isset {
  _SyncService_showTransTask_args__isset() : transGroupId(false) {}
  bool transGroupId;
} _SyncService_showTransTask_args__isset;

class SyncService_showTransTask_args {
 public:

  SyncService_showTransTask_args() : transGroupId() {
  }

  virtual ~SyncService_showTransTask_args() throw() {}

  std::string transGroupId;

  _SyncService_showTransTask_args__isset __isset;

  void __set_transGroupId(const std::string& val) {
    transGroupId = val;
  }

  bool operator == (const SyncService_showTransTask_args & rhs) const
  {
    if (!(transGroupId == rhs.transGroupId))
      return false;
    return true;
  }
  bool operator != (const SyncService_showTransTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_showTransTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_showTransTask_pargs {
 public:


  virtual ~SyncService_showTransTask_pargs() throw() {}

  const std::string* transGroupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_showTransTask_result__isset {
  _SyncService_showTransTask_result__isset() : success(false) {}
  bool success;
} _SyncService_showTransTask_result__isset;

class SyncService_showTransTask_result {
 public:

  SyncService_showTransTask_result() : success(0) {
  }

  virtual ~SyncService_showTransTask_result() throw() {}

  int32_t success;

  _SyncService_showTransTask_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SyncService_showTransTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_showTransTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_showTransTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_showTransTask_presult__isset {
  _SyncService_showTransTask_presult__isset() : success(false) {}
  bool success;
} _SyncService_showTransTask_presult__isset;

class SyncService_showTransTask_presult {
 public:


  virtual ~SyncService_showTransTask_presult() throw() {}

  int32_t* success;

  _SyncService_showTransTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_listTeamspacesByUser_args__isset {
  _SyncService_listTeamspacesByUser_args__isset() : userId(false) {}
  bool userId;
} _SyncService_listTeamspacesByUser_args__isset;

class SyncService_listTeamspacesByUser_args {
 public:

  SyncService_listTeamspacesByUser_args() : userId(0) {
  }

  virtual ~SyncService_listTeamspacesByUser_args() throw() {}

  int64_t userId;

  _SyncService_listTeamspacesByUser_args__isset __isset;

  void __set_userId(const int64_t val) {
    userId = val;
  }

  bool operator == (const SyncService_listTeamspacesByUser_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const SyncService_listTeamspacesByUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listTeamspacesByUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_listTeamspacesByUser_pargs {
 public:


  virtual ~SyncService_listTeamspacesByUser_pargs() throw() {}

  const int64_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listTeamspacesByUser_result__isset {
  _SyncService_listTeamspacesByUser_result__isset() : success(false) {}
  bool success;
} _SyncService_listTeamspacesByUser_result__isset;

class SyncService_listTeamspacesByUser_result {
 public:

  SyncService_listTeamspacesByUser_result() {
  }

  virtual ~SyncService_listTeamspacesByUser_result() throw() {}

  std::vector<Teamspace_Membership>  success;

  _SyncService_listTeamspacesByUser_result__isset __isset;

  void __set_success(const std::vector<Teamspace_Membership> & val) {
    success = val;
  }

  bool operator == (const SyncService_listTeamspacesByUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_listTeamspacesByUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_listTeamspacesByUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_listTeamspacesByUser_presult__isset {
  _SyncService_listTeamspacesByUser_presult__isset() : success(false) {}
  bool success;
} _SyncService_listTeamspacesByUser_presult__isset;

class SyncService_listTeamspacesByUser_presult {
 public:


  virtual ~SyncService_listTeamspacesByUser_presult() throw() {}

  std::vector<Teamspace_Membership> * success;

  _SyncService_listTeamspacesByUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SyncServiceClient : virtual public SyncServiceIf {
 public:
  SyncServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SyncServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t initUserContext(const int64_t uiHandle, const std::string& confPath);
  void send_initUserContext(const int64_t uiHandle, const std::string& confPath);
  int32_t recv_initUserContext();
  int32_t releaseUserContext();
  void send_releaseUserContext();
  int32_t recv_releaseUserContext();
  int32_t getServiceStatus();
  void send_getServiceStatus();
  int32_t recv_getServiceStatus();
  int32_t changeServiceWorkMode(const Service_Status::type status);
  void send_changeServiceWorkMode(const Service_Status::type status);
  int32_t recv_changeServiceWorkMode();
  int32_t sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5);
  void send_sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5);
  int32_t recv_sendMessage();
  int32_t uploadFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  void send_uploadFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  int32_t recv_uploadFile();
  int32_t downloadFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  void send_downloadFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  int32_t recv_downloadFile();
  int32_t deleteFile(const std::string& filePath, const File_Type::type fileType);
  void send_deleteFile(const std::string& filePath, const File_Type::type fileType);
  int32_t recv_deleteFile();
  int32_t renameFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  void send_renameFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  int32_t recv_renameFile();
  int32_t moveFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  void send_moveFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  int32_t recv_moveFile();
  int32_t copyFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  void send_copyFile(const std::string& source, const std::string& target, const File_Type::type fileType);
  int32_t recv_copyFile();
  int32_t createDir(const std::string& dirPath);
  void send_createDir(const std::string& dirPath);
  int32_t recv_createDir();
  void listRemoteDir(std::vector<List_Info> & _return, const int64_t parent, const int64_t owner_id);
  void send_listRemoteDir(const int64_t parent, const int64_t owner_id);
  void recv_listRemoteDir(std::vector<List_Info> & _return);
  int64_t upload(const std::string& path, const int64_t parent, const int64_t owner_id);
  void send_upload(const std::string& path, const int64_t parent, const int64_t owner_id);
  int64_t recv_upload();
  int32_t login(const int32_t type, const std::string& username, const std::string& password, const std::string& domain);
  void send_login(const int32_t type, const std::string& username, const std::string& password, const std::string& domain);
  int32_t recv_login();
  int32_t logout();
  void send_logout();
  int32_t recv_logout();
  void encyptString(std::string& _return, const std::string& src);
  void send_encyptString(const std::string& src);
  void recv_encyptString(std::string& _return);
  void decyptString(std::string& _return, const std::string& src);
  void send_decyptString(const std::string& src);
  void recv_decyptString(std::string& _return);
  int32_t updateConfigure();
  void send_updateConfigure();
  int32_t recv_updateConfigure();
  void getTransSpeed(Trans_Speed_Info& _return);
  void send_getTransSpeed();
  void recv_getTransSpeed(Trans_Speed_Info& _return);
  int64_t getUserId();
  void send_getUserId();
  int64_t recv_getUserId();
  void getUpdateInfo(Update_Info& _return);
  void send_getUpdateInfo();
  void recv_getUpdateInfo(Update_Info& _return);
  int32_t downloadClient(const std::string& downloadUrl, const std::string& location);
  void send_downloadClient(const std::string& downloadUrl, const std::string& location);
  int32_t recv_downloadClient();
  void getNodeInfo(Node_Info& _return, const std::string& path);
  void send_getNodeInfo(const std::string& path);
  void recv_getNodeInfo(Node_Info& _return);
  int32_t getOverlayIconStatus(const std::string& path);
  void send_getOverlayIconStatus(const std::string& path);
  int32_t recv_getOverlayIconStatus();
  int64_t getRemoteId(const std::string& path);
  void send_getRemoteId(const std::string& path);
  int64_t recv_getRemoteId();
  void listError(std::vector<Error_Info> & _return, const int32_t offset, const int32_t limit);
  void send_listError(const int32_t offset, const int32_t limit);
  void recv_listError(std::vector<Error_Info> & _return);
  void listDomainUsers(std::vector<Share_User_Info> & _return, const std::string& keyword);
  void send_listDomainUsers(const std::string& keyword);
  void recv_listDomainUsers(std::vector<Share_User_Info> & _return);
  void listShareUsers(std::vector<Share_User_Info> & _return, const std::string& path);
  void send_listShareUsers(const std::string& path);
  void recv_listShareUsers(std::vector<Share_User_Info> & _return);
  int32_t setShareMember(const std::string& path, const std::vector<Share_User_Info> & shareUserInfos, const std::string& emailMsg);
  void send_setShareMember(const std::string& path, const std::vector<Share_User_Info> & shareUserInfos, const std::string& emailMsg);
  int32_t recv_setShareMember();
  int32_t delShareMember(const std::string& path, const Share_User_Info& shareUserInfo);
  void send_delShareMember(const std::string& path, const Share_User_Info& shareUserInfo);
  int32_t recv_delShareMember();
  int32_t cancelShare(const std::string& path);
  void send_cancelShare(const std::string& path);
  int32_t recv_cancelShare();
  void getShareLink(Share_Link_Info& _return, const std::string& path);
  void send_getShareLink(const std::string& path);
  void recv_getShareLink(Share_Link_Info& _return);
  void modifyShareLink(Share_Link_Info& _return, const std::string& path, const Share_Link_Info& shareLinkInfo);
  void send_modifyShareLink(const std::string& path, const Share_Link_Info& shareLinkInfo);
  void recv_modifyShareLink(Share_Link_Info& _return);
  int32_t delShareLink(const std::string& path);
  void send_delShareLink(const std::string& path);
  int32_t recv_delShareLink();
  void getRandomString(std::string& _return);
  void send_getRandomString();
  void recv_getRandomString(std::string& _return);
  int32_t sendEmail(const std::string& type, const std::string& path, const Share_Link_Info& shareLinkInfo, const std::string& emailMsg, const std::vector<std::string> & mailto);
  void send_sendEmail(const std::string& type, const std::string& path, const Share_Link_Info& shareLinkInfo, const std::string& emailMsg, const std::vector<std::string> & mailto);
  int32_t recv_sendEmail();
  void listBatchDomainUsers(std::map<std::string, Share_User_Info> & _return, const std::vector<std::string> & keyword);
  void send_listBatchDomainUsers(const std::vector<std::string> & keyword);
  void recv_listBatchDomainUsers(std::map<std::string, Share_User_Info> & _return);
  int32_t uploadAttachements(const std::vector<std::string> & attachements, const std::string& parent, const std::string& taskGroupId);
  void send_uploadAttachements(const std::vector<std::string> & attachements, const std::string& parent, const std::string& taskGroupId);
  int32_t recv_uploadAttachements();
  bool isAttachementsTransComplete(const std::string& taskGroupId);
  void send_isAttachementsTransComplete(const std::string& taskGroupId);
  bool recv_isAttachementsTransComplete();
  void getAttachementsLinks(std::map<std::string, std::string> & _return, const std::string& transGroupId);
  void send_getAttachementsLinks(const std::string& transGroupId);
  void recv_getAttachementsLinks(std::map<std::string, std::string> & _return);
  int32_t deleteTransTasksByGroupId(const std::string& transGroupId);
  void send_deleteTransTasksByGroupId(const std::string& transGroupId);
  int32_t recv_deleteTransTasksByGroupId();
  int32_t showTransTask(const std::string& transGroupId);
  void send_showTransTask(const std::string& transGroupId);
  int32_t recv_showTransTask();
  void listTeamspacesByUser(std::vector<Teamspace_Membership> & _return, const int64_t userId);
  void send_listTeamspacesByUser(const int64_t userId);
  void recv_listTeamspacesByUser(std::vector<Teamspace_Membership> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SyncServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SyncServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SyncServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initUserContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_releaseUserContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeServiceWorkMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_downloadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_renameFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_moveFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_copyFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listRemoteDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_encyptString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_decyptString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTransSpeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUpdateInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_downloadClient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNodeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOverlayIconStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRemoteId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listDomainUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listShareUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setShareMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delShareMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelShare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getShareLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modifyShareLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delShareLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRandomString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listBatchDomainUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadAttachements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isAttachementsTransComplete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAttachementsLinks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTransTasksByGroupId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_showTransTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listTeamspacesByUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SyncServiceProcessor(boost::shared_ptr<SyncServiceIf> iface) :
    iface_(iface) {
    processMap_["initUserContext"] = &SyncServiceProcessor::process_initUserContext;
    processMap_["releaseUserContext"] = &SyncServiceProcessor::process_releaseUserContext;
    processMap_["getServiceStatus"] = &SyncServiceProcessor::process_getServiceStatus;
    processMap_["changeServiceWorkMode"] = &SyncServiceProcessor::process_changeServiceWorkMode;
    processMap_["sendMessage"] = &SyncServiceProcessor::process_sendMessage;
    processMap_["uploadFile"] = &SyncServiceProcessor::process_uploadFile;
    processMap_["downloadFile"] = &SyncServiceProcessor::process_downloadFile;
    processMap_["deleteFile"] = &SyncServiceProcessor::process_deleteFile;
    processMap_["renameFile"] = &SyncServiceProcessor::process_renameFile;
    processMap_["moveFile"] = &SyncServiceProcessor::process_moveFile;
    processMap_["copyFile"] = &SyncServiceProcessor::process_copyFile;
    processMap_["createDir"] = &SyncServiceProcessor::process_createDir;
    processMap_["listRemoteDir"] = &SyncServiceProcessor::process_listRemoteDir;
    processMap_["upload"] = &SyncServiceProcessor::process_upload;
    processMap_["login"] = &SyncServiceProcessor::process_login;
    processMap_["logout"] = &SyncServiceProcessor::process_logout;
    processMap_["encyptString"] = &SyncServiceProcessor::process_encyptString;
    processMap_["decyptString"] = &SyncServiceProcessor::process_decyptString;
    processMap_["updateConfigure"] = &SyncServiceProcessor::process_updateConfigure;
    processMap_["getTransSpeed"] = &SyncServiceProcessor::process_getTransSpeed;
    processMap_["getUserId"] = &SyncServiceProcessor::process_getUserId;
    processMap_["getUpdateInfo"] = &SyncServiceProcessor::process_getUpdateInfo;
    processMap_["downloadClient"] = &SyncServiceProcessor::process_downloadClient;
    processMap_["getNodeInfo"] = &SyncServiceProcessor::process_getNodeInfo;
    processMap_["getOverlayIconStatus"] = &SyncServiceProcessor::process_getOverlayIconStatus;
    processMap_["getRemoteId"] = &SyncServiceProcessor::process_getRemoteId;
    processMap_["listError"] = &SyncServiceProcessor::process_listError;
    processMap_["listDomainUsers"] = &SyncServiceProcessor::process_listDomainUsers;
    processMap_["listShareUsers"] = &SyncServiceProcessor::process_listShareUsers;
    processMap_["setShareMember"] = &SyncServiceProcessor::process_setShareMember;
    processMap_["delShareMember"] = &SyncServiceProcessor::process_delShareMember;
    processMap_["cancelShare"] = &SyncServiceProcessor::process_cancelShare;
    processMap_["getShareLink"] = &SyncServiceProcessor::process_getShareLink;
    processMap_["modifyShareLink"] = &SyncServiceProcessor::process_modifyShareLink;
    processMap_["delShareLink"] = &SyncServiceProcessor::process_delShareLink;
    processMap_["getRandomString"] = &SyncServiceProcessor::process_getRandomString;
    processMap_["sendEmail"] = &SyncServiceProcessor::process_sendEmail;
    processMap_["listBatchDomainUsers"] = &SyncServiceProcessor::process_listBatchDomainUsers;
    processMap_["uploadAttachements"] = &SyncServiceProcessor::process_uploadAttachements;
    processMap_["isAttachementsTransComplete"] = &SyncServiceProcessor::process_isAttachementsTransComplete;
    processMap_["getAttachementsLinks"] = &SyncServiceProcessor::process_getAttachementsLinks;
    processMap_["deleteTransTasksByGroupId"] = &SyncServiceProcessor::process_deleteTransTasksByGroupId;
    processMap_["showTransTask"] = &SyncServiceProcessor::process_showTransTask;
    processMap_["listTeamspacesByUser"] = &SyncServiceProcessor::process_listTeamspacesByUser;
  }

  virtual ~SyncServiceProcessor() {}
};

class SyncServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SyncServiceProcessorFactory(const ::boost::shared_ptr< SyncServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SyncServiceIfFactory > handlerFactory_;
};

class SyncServiceMultiface : virtual public SyncServiceIf {
 public:
  SyncServiceMultiface(std::vector<boost::shared_ptr<SyncServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SyncServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SyncServiceIf> > ifaces_;
  SyncServiceMultiface() {}
  void add(boost::shared_ptr<SyncServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t initUserContext(const int64_t uiHandle, const std::string& confPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initUserContext(uiHandle, confPath);
    }
    return ifaces_[i]->initUserContext(uiHandle, confPath);
  }

  int32_t releaseUserContext() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->releaseUserContext();
    }
    return ifaces_[i]->releaseUserContext();
  }

  int32_t getServiceStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceStatus();
    }
    return ifaces_[i]->getServiceStatus();
  }

  int32_t changeServiceWorkMode(const Service_Status::type status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeServiceWorkMode(status);
    }
    return ifaces_[i]->changeServiceWorkMode(status);
  }

  int32_t sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(type, msg1, msg2, msg3, msg4, msg5);
    }
    return ifaces_[i]->sendMessage(type, msg1, msg2, msg3, msg4, msg5);
  }

  int32_t uploadFile(const std::string& source, const std::string& target, const File_Type::type fileType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadFile(source, target, fileType);
    }
    return ifaces_[i]->uploadFile(source, target, fileType);
  }

  int32_t downloadFile(const std::string& source, const std::string& target, const File_Type::type fileType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->downloadFile(source, target, fileType);
    }
    return ifaces_[i]->downloadFile(source, target, fileType);
  }

  int32_t deleteFile(const std::string& filePath, const File_Type::type fileType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteFile(filePath, fileType);
    }
    return ifaces_[i]->deleteFile(filePath, fileType);
  }

  int32_t renameFile(const std::string& source, const std::string& target, const File_Type::type fileType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->renameFile(source, target, fileType);
    }
    return ifaces_[i]->renameFile(source, target, fileType);
  }

  int32_t moveFile(const std::string& source, const std::string& target, const File_Type::type fileType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->moveFile(source, target, fileType);
    }
    return ifaces_[i]->moveFile(source, target, fileType);
  }

  int32_t copyFile(const std::string& source, const std::string& target, const File_Type::type fileType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->copyFile(source, target, fileType);
    }
    return ifaces_[i]->copyFile(source, target, fileType);
  }

  int32_t createDir(const std::string& dirPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createDir(dirPath);
    }
    return ifaces_[i]->createDir(dirPath);
  }

  void listRemoteDir(std::vector<List_Info> & _return, const int64_t parent, const int64_t owner_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listRemoteDir(_return, parent, owner_id);
    }
    ifaces_[i]->listRemoteDir(_return, parent, owner_id);
    return;
  }

  int64_t upload(const std::string& path, const int64_t parent, const int64_t owner_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload(path, parent, owner_id);
    }
    return ifaces_[i]->upload(path, parent, owner_id);
  }

  int32_t login(const int32_t type, const std::string& username, const std::string& password, const std::string& domain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(type, username, password, domain);
    }
    return ifaces_[i]->login(type, username, password, domain);
  }

  int32_t logout() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout();
    }
    return ifaces_[i]->logout();
  }

  void encyptString(std::string& _return, const std::string& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->encyptString(_return, src);
    }
    ifaces_[i]->encyptString(_return, src);
    return;
  }

  void decyptString(std::string& _return, const std::string& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->decyptString(_return, src);
    }
    ifaces_[i]->decyptString(_return, src);
    return;
  }

  int32_t updateConfigure() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateConfigure();
    }
    return ifaces_[i]->updateConfigure();
  }

  void getTransSpeed(Trans_Speed_Info& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTransSpeed(_return);
    }
    ifaces_[i]->getTransSpeed(_return);
    return;
  }

  int64_t getUserId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserId();
    }
    return ifaces_[i]->getUserId();
  }

  void getUpdateInfo(Update_Info& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUpdateInfo(_return);
    }
    ifaces_[i]->getUpdateInfo(_return);
    return;
  }

  int32_t downloadClient(const std::string& downloadUrl, const std::string& location) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->downloadClient(downloadUrl, location);
    }
    return ifaces_[i]->downloadClient(downloadUrl, location);
  }

  void getNodeInfo(Node_Info& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNodeInfo(_return, path);
    }
    ifaces_[i]->getNodeInfo(_return, path);
    return;
  }

  int32_t getOverlayIconStatus(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOverlayIconStatus(path);
    }
    return ifaces_[i]->getOverlayIconStatus(path);
  }

  int64_t getRemoteId(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRemoteId(path);
    }
    return ifaces_[i]->getRemoteId(path);
  }

  void listError(std::vector<Error_Info> & _return, const int32_t offset, const int32_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listError(_return, offset, limit);
    }
    ifaces_[i]->listError(_return, offset, limit);
    return;
  }

  void listDomainUsers(std::vector<Share_User_Info> & _return, const std::string& keyword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listDomainUsers(_return, keyword);
    }
    ifaces_[i]->listDomainUsers(_return, keyword);
    return;
  }

  void listShareUsers(std::vector<Share_User_Info> & _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listShareUsers(_return, path);
    }
    ifaces_[i]->listShareUsers(_return, path);
    return;
  }

  int32_t setShareMember(const std::string& path, const std::vector<Share_User_Info> & shareUserInfos, const std::string& emailMsg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setShareMember(path, shareUserInfos, emailMsg);
    }
    return ifaces_[i]->setShareMember(path, shareUserInfos, emailMsg);
  }

  int32_t delShareMember(const std::string& path, const Share_User_Info& shareUserInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delShareMember(path, shareUserInfo);
    }
    return ifaces_[i]->delShareMember(path, shareUserInfo);
  }

  int32_t cancelShare(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelShare(path);
    }
    return ifaces_[i]->cancelShare(path);
  }

  void getShareLink(Share_Link_Info& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getShareLink(_return, path);
    }
    ifaces_[i]->getShareLink(_return, path);
    return;
  }

  void modifyShareLink(Share_Link_Info& _return, const std::string& path, const Share_Link_Info& shareLinkInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modifyShareLink(_return, path, shareLinkInfo);
    }
    ifaces_[i]->modifyShareLink(_return, path, shareLinkInfo);
    return;
  }

  int32_t delShareLink(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delShareLink(path);
    }
    return ifaces_[i]->delShareLink(path);
  }

  void getRandomString(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRandomString(_return);
    }
    ifaces_[i]->getRandomString(_return);
    return;
  }

  int32_t sendEmail(const std::string& type, const std::string& path, const Share_Link_Info& shareLinkInfo, const std::string& emailMsg, const std::vector<std::string> & mailto) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendEmail(type, path, shareLinkInfo, emailMsg, mailto);
    }
    return ifaces_[i]->sendEmail(type, path, shareLinkInfo, emailMsg, mailto);
  }

  void listBatchDomainUsers(std::map<std::string, Share_User_Info> & _return, const std::vector<std::string> & keyword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listBatchDomainUsers(_return, keyword);
    }
    ifaces_[i]->listBatchDomainUsers(_return, keyword);
    return;
  }

  int32_t uploadAttachements(const std::vector<std::string> & attachements, const std::string& parent, const std::string& taskGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadAttachements(attachements, parent, taskGroupId);
    }
    return ifaces_[i]->uploadAttachements(attachements, parent, taskGroupId);
  }

  bool isAttachementsTransComplete(const std::string& taskGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isAttachementsTransComplete(taskGroupId);
    }
    return ifaces_[i]->isAttachementsTransComplete(taskGroupId);
  }

  void getAttachementsLinks(std::map<std::string, std::string> & _return, const std::string& transGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAttachementsLinks(_return, transGroupId);
    }
    ifaces_[i]->getAttachementsLinks(_return, transGroupId);
    return;
  }

  int32_t deleteTransTasksByGroupId(const std::string& transGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteTransTasksByGroupId(transGroupId);
    }
    return ifaces_[i]->deleteTransTasksByGroupId(transGroupId);
  }

  int32_t showTransTask(const std::string& transGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->showTransTask(transGroupId);
    }
    return ifaces_[i]->showTransTask(transGroupId);
  }

  void listTeamspacesByUser(std::vector<Teamspace_Membership> & _return, const int64_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listTeamspacesByUser(_return, userId);
    }
    ifaces_[i]->listTeamspacesByUser(_return, userId);
    return;
  }

};

}} // namespace

#endif
