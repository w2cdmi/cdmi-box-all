/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pw.cdmi.box.app.convertservice.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ImgObject implements org.apache.thrift.TBase<ImgObject, ImgObject._Fields>, java.io.Serializable, Cloneable, Comparable<ImgObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImgObject");

  private static final org.apache.thrift.protocol.TField SOURCE_OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceObjectId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OWNE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("owneId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGE_OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageObjectId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPages", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PAGE_IDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIdex", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceGroupId", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImgObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImgObjectTupleSchemeFactory());
  }

  public String sourceObjectId; // required
  public String owneId; // required
  public String imageObjectId; // required
  public int totalPages; // required
  public String pageIdex; // required
  public int resourceGroupId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE_OBJECT_ID((short)1, "sourceObjectId"),
    OWNE_ID((short)2, "owneId"),
    IMAGE_OBJECT_ID((short)3, "imageObjectId"),
    TOTAL_PAGES((short)4, "totalPages"),
    PAGE_IDEX((short)5, "pageIdex"),
    RESOURCE_GROUP_ID((short)6, "resourceGroupId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_OBJECT_ID
          return SOURCE_OBJECT_ID;
        case 2: // OWNE_ID
          return OWNE_ID;
        case 3: // IMAGE_OBJECT_ID
          return IMAGE_OBJECT_ID;
        case 4: // TOTAL_PAGES
          return TOTAL_PAGES;
        case 5: // PAGE_IDEX
          return PAGE_IDEX;
        case 6: // RESOURCE_GROUP_ID
          return RESOURCE_GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPAGES_ISSET_ID = 0;
  private static final int __RESOURCEGROUPID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceObjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNE_ID, new org.apache.thrift.meta_data.FieldMetaData("owneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("imageObjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PAGES, new org.apache.thrift.meta_data.FieldMetaData("totalPages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_IDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIdex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImgObject.class, metaDataMap);
  }

  public ImgObject() {
  }

  public ImgObject(
    String sourceObjectId,
    String owneId,
    String imageObjectId,
    int totalPages,
    String pageIdex,
    int resourceGroupId)
  {
    this();
    this.sourceObjectId = sourceObjectId;
    this.owneId = owneId;
    this.imageObjectId = imageObjectId;
    this.totalPages = totalPages;
    setTotalPagesIsSet(true);
    this.pageIdex = pageIdex;
    this.resourceGroupId = resourceGroupId;
    setResourceGroupIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImgObject(ImgObject other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSourceObjectId()) {
      this.sourceObjectId = other.sourceObjectId;
    }
    if (other.isSetOwneId()) {
      this.owneId = other.owneId;
    }
    if (other.isSetImageObjectId()) {
      this.imageObjectId = other.imageObjectId;
    }
    this.totalPages = other.totalPages;
    if (other.isSetPageIdex()) {
      this.pageIdex = other.pageIdex;
    }
    this.resourceGroupId = other.resourceGroupId;
  }

  public ImgObject deepCopy() {
    return new ImgObject(this);
  }

  @Override
  public void clear() {
    this.sourceObjectId = null;
    this.owneId = null;
    this.imageObjectId = null;
    setTotalPagesIsSet(false);
    this.totalPages = 0;
    this.pageIdex = null;
    setResourceGroupIdIsSet(false);
    this.resourceGroupId = 0;
  }

  public String getSourceObjectId() {
    return this.sourceObjectId;
  }

  public ImgObject setSourceObjectId(String sourceObjectId) {
    this.sourceObjectId = sourceObjectId;
    return this;
  }

  public void unsetSourceObjectId() {
    this.sourceObjectId = null;
  }

  /** Returns true if field sourceObjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceObjectId() {
    return this.sourceObjectId != null;
  }

  public void setSourceObjectIdIsSet(boolean value) {
    if (!value) {
      this.sourceObjectId = null;
    }
  }

  public String getOwneId() {
    return this.owneId;
  }

  public ImgObject setOwneId(String owneId) {
    this.owneId = owneId;
    return this;
  }

  public void unsetOwneId() {
    this.owneId = null;
  }

  /** Returns true if field owneId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwneId() {
    return this.owneId != null;
  }

  public void setOwneIdIsSet(boolean value) {
    if (!value) {
      this.owneId = null;
    }
  }

  public String getImageObjectId() {
    return this.imageObjectId;
  }

  public ImgObject setImageObjectId(String imageObjectId) {
    this.imageObjectId = imageObjectId;
    return this;
  }

  public void unsetImageObjectId() {
    this.imageObjectId = null;
  }

  /** Returns true if field imageObjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetImageObjectId() {
    return this.imageObjectId != null;
  }

  public void setImageObjectIdIsSet(boolean value) {
    if (!value) {
      this.imageObjectId = null;
    }
  }

  public int getTotalPages() {
    return this.totalPages;
  }

  public ImgObject setTotalPages(int totalPages) {
    this.totalPages = totalPages;
    setTotalPagesIsSet(true);
    return this;
  }

  public void unsetTotalPages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPAGES_ISSET_ID);
  }

  /** Returns true if field totalPages is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPages() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPAGES_ISSET_ID);
  }

  public void setTotalPagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPAGES_ISSET_ID, value);
  }

  public String getPageIdex() {
    return this.pageIdex;
  }

  public ImgObject setPageIdex(String pageIdex) {
    this.pageIdex = pageIdex;
    return this;
  }

  public void unsetPageIdex() {
    this.pageIdex = null;
  }

  /** Returns true if field pageIdex is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIdex() {
    return this.pageIdex != null;
  }

  public void setPageIdexIsSet(boolean value) {
    if (!value) {
      this.pageIdex = null;
    }
  }

  public int getResourceGroupId() {
    return this.resourceGroupId;
  }

  public ImgObject setResourceGroupId(int resourceGroupId) {
    this.resourceGroupId = resourceGroupId;
    setResourceGroupIdIsSet(true);
    return this;
  }

  public void unsetResourceGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEGROUPID_ISSET_ID);
  }

  /** Returns true if field resourceGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEGROUPID_ISSET_ID);
  }

  public void setResourceGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEGROUPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE_OBJECT_ID:
      if (value == null) {
        unsetSourceObjectId();
      } else {
        setSourceObjectId((String)value);
      }
      break;

    case OWNE_ID:
      if (value == null) {
        unsetOwneId();
      } else {
        setOwneId((String)value);
      }
      break;

    case IMAGE_OBJECT_ID:
      if (value == null) {
        unsetImageObjectId();
      } else {
        setImageObjectId((String)value);
      }
      break;

    case TOTAL_PAGES:
      if (value == null) {
        unsetTotalPages();
      } else {
        setTotalPages((Integer)value);
      }
      break;

    case PAGE_IDEX:
      if (value == null) {
        unsetPageIdex();
      } else {
        setPageIdex((String)value);
      }
      break;

    case RESOURCE_GROUP_ID:
      if (value == null) {
        unsetResourceGroupId();
      } else {
        setResourceGroupId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_OBJECT_ID:
      return getSourceObjectId();

    case OWNE_ID:
      return getOwneId();

    case IMAGE_OBJECT_ID:
      return getImageObjectId();

    case TOTAL_PAGES:
      return Integer.valueOf(getTotalPages());

    case PAGE_IDEX:
      return getPageIdex();

    case RESOURCE_GROUP_ID:
      return Integer.valueOf(getResourceGroupId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_OBJECT_ID:
      return isSetSourceObjectId();
    case OWNE_ID:
      return isSetOwneId();
    case IMAGE_OBJECT_ID:
      return isSetImageObjectId();
    case TOTAL_PAGES:
      return isSetTotalPages();
    case PAGE_IDEX:
      return isSetPageIdex();
    case RESOURCE_GROUP_ID:
      return isSetResourceGroupId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImgObject)
      return this.equals((ImgObject)that);
    return false;
  }

  public boolean equals(ImgObject that) {
    if (that == null)
      return false;

    boolean this_present_sourceObjectId = true && this.isSetSourceObjectId();
    boolean that_present_sourceObjectId = true && that.isSetSourceObjectId();
    if (this_present_sourceObjectId || that_present_sourceObjectId) {
      if (!(this_present_sourceObjectId && that_present_sourceObjectId))
        return false;
      if (!this.sourceObjectId.equals(that.sourceObjectId))
        return false;
    }

    boolean this_present_owneId = true && this.isSetOwneId();
    boolean that_present_owneId = true && that.isSetOwneId();
    if (this_present_owneId || that_present_owneId) {
      if (!(this_present_owneId && that_present_owneId))
        return false;
      if (!this.owneId.equals(that.owneId))
        return false;
    }

    boolean this_present_imageObjectId = true && this.isSetImageObjectId();
    boolean that_present_imageObjectId = true && that.isSetImageObjectId();
    if (this_present_imageObjectId || that_present_imageObjectId) {
      if (!(this_present_imageObjectId && that_present_imageObjectId))
        return false;
      if (!this.imageObjectId.equals(that.imageObjectId))
        return false;
    }

    boolean this_present_totalPages = true;
    boolean that_present_totalPages = true;
    if (this_present_totalPages || that_present_totalPages) {
      if (!(this_present_totalPages && that_present_totalPages))
        return false;
      if (this.totalPages != that.totalPages)
        return false;
    }

    boolean this_present_pageIdex = true && this.isSetPageIdex();
    boolean that_present_pageIdex = true && that.isSetPageIdex();
    if (this_present_pageIdex || that_present_pageIdex) {
      if (!(this_present_pageIdex && that_present_pageIdex))
        return false;
      if (!this.pageIdex.equals(that.pageIdex))
        return false;
    }

    boolean this_present_resourceGroupId = true;
    boolean that_present_resourceGroupId = true;
    if (this_present_resourceGroupId || that_present_resourceGroupId) {
      if (!(this_present_resourceGroupId && that_present_resourceGroupId))
        return false;
      if (this.resourceGroupId != that.resourceGroupId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ImgObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSourceObjectId()).compareTo(other.isSetSourceObjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceObjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceObjectId, other.sourceObjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwneId()).compareTo(other.isSetOwneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owneId, other.owneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageObjectId()).compareTo(other.isSetImageObjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageObjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageObjectId, other.imageObjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPages()).compareTo(other.isSetTotalPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPages, other.totalPages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageIdex()).compareTo(other.isSetPageIdex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIdex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIdex, other.pageIdex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceGroupId()).compareTo(other.isSetResourceGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceGroupId, other.resourceGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImgObject(");
    boolean first = true;

    sb.append("sourceObjectId:");
    if (this.sourceObjectId == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceObjectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owneId:");
    if (this.owneId == null) {
      sb.append("null");
    } else {
      sb.append(this.owneId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageObjectId:");
    if (this.imageObjectId == null) {
      sb.append("null");
    } else {
      sb.append(this.imageObjectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPages:");
    sb.append(this.totalPages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageIdex:");
    if (this.pageIdex == null) {
      sb.append("null");
    } else {
      sb.append(this.pageIdex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceGroupId:");
    sb.append(this.resourceGroupId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImgObjectStandardSchemeFactory implements SchemeFactory {
    public ImgObjectStandardScheme getScheme() {
      return new ImgObjectStandardScheme();
    }
  }

  private static class ImgObjectStandardScheme extends StandardScheme<ImgObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImgObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceObjectId = iprot.readString();
              struct.setSourceObjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWNE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owneId = iprot.readString();
              struct.setOwneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGE_OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageObjectId = iprot.readString();
              struct.setImageObjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPages = iprot.readI32();
              struct.setTotalPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAGE_IDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageIdex = iprot.readString();
              struct.setPageIdexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resourceGroupId = iprot.readI32();
              struct.setResourceGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImgObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sourceObjectId != null) {
        oprot.writeFieldBegin(SOURCE_OBJECT_ID_FIELD_DESC);
        oprot.writeString(struct.sourceObjectId);
        oprot.writeFieldEnd();
      }
      if (struct.owneId != null) {
        oprot.writeFieldBegin(OWNE_ID_FIELD_DESC);
        oprot.writeString(struct.owneId);
        oprot.writeFieldEnd();
      }
      if (struct.imageObjectId != null) {
        oprot.writeFieldBegin(IMAGE_OBJECT_ID_FIELD_DESC);
        oprot.writeString(struct.imageObjectId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PAGES_FIELD_DESC);
      oprot.writeI32(struct.totalPages);
      oprot.writeFieldEnd();
      if (struct.pageIdex != null) {
        oprot.writeFieldBegin(PAGE_IDEX_FIELD_DESC);
        oprot.writeString(struct.pageIdex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESOURCE_GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.resourceGroupId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImgObjectTupleSchemeFactory implements SchemeFactory {
    public ImgObjectTupleScheme getScheme() {
      return new ImgObjectTupleScheme();
    }
  }

  private static class ImgObjectTupleScheme extends TupleScheme<ImgObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImgObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSourceObjectId()) {
        optionals.set(0);
      }
      if (struct.isSetOwneId()) {
        optionals.set(1);
      }
      if (struct.isSetImageObjectId()) {
        optionals.set(2);
      }
      if (struct.isSetTotalPages()) {
        optionals.set(3);
      }
      if (struct.isSetPageIdex()) {
        optionals.set(4);
      }
      if (struct.isSetResourceGroupId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSourceObjectId()) {
        oprot.writeString(struct.sourceObjectId);
      }
      if (struct.isSetOwneId()) {
        oprot.writeString(struct.owneId);
      }
      if (struct.isSetImageObjectId()) {
        oprot.writeString(struct.imageObjectId);
      }
      if (struct.isSetTotalPages()) {
        oprot.writeI32(struct.totalPages);
      }
      if (struct.isSetPageIdex()) {
        oprot.writeString(struct.pageIdex);
      }
      if (struct.isSetResourceGroupId()) {
        oprot.writeI32(struct.resourceGroupId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImgObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.sourceObjectId = iprot.readString();
        struct.setSourceObjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.owneId = iprot.readString();
        struct.setOwneIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imageObjectId = iprot.readString();
        struct.setImageObjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalPages = iprot.readI32();
        struct.setTotalPagesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pageIdex = iprot.readString();
        struct.setPageIdexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.resourceGroupId = iprot.readI32();
        struct.setResourceGroupIdIsSet(true);
      }
    }
  }

}

