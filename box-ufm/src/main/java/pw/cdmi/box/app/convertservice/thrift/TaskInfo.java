/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pw.cdmi.box.app.convertservice.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskInfo implements org.apache.thrift.TBase<TaskInfo, TaskInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TaskInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskInfo");

  private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OWNE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("owneId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("percent", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IMAGE_OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageObjectId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESOURCE_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceGroupId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RETRY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("retryCount", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskInfoTupleSchemeFactory());
  }

  public String objectId; // required
  public String taskId; // required
  public String owneId; // required
  public int level; // required
  public int status; // required
  public int percent; // required
  public String imageObjectId; // required
  public String fileName; // required
  public String resourceGroupId; // required
  public int retryCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OBJECT_ID((short)1, "objectId"),
    TASK_ID((short)2, "taskId"),
    OWNE_ID((short)3, "owneId"),
    LEVEL((short)4, "level"),
    STATUS((short)5, "status"),
    PERCENT((short)6, "percent"),
    IMAGE_OBJECT_ID((short)7, "imageObjectId"),
    FILE_NAME((short)8, "fileName"),
    RESOURCE_GROUP_ID((short)9, "resourceGroupId"),
    RETRY_COUNT((short)10, "retryCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OBJECT_ID
          return OBJECT_ID;
        case 2: // TASK_ID
          return TASK_ID;
        case 3: // OWNE_ID
          return OWNE_ID;
        case 4: // LEVEL
          return LEVEL;
        case 5: // STATUS
          return STATUS;
        case 6: // PERCENT
          return PERCENT;
        case 7: // IMAGE_OBJECT_ID
          return IMAGE_OBJECT_ID;
        case 8: // FILE_NAME
          return FILE_NAME;
        case 9: // RESOURCE_GROUP_ID
          return RESOURCE_GROUP_ID;
        case 10: // RETRY_COUNT
          return RETRY_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEVEL_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __PERCENT_ISSET_ID = 2;
  private static final int __RETRYCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNE_ID, new org.apache.thrift.meta_data.FieldMetaData("owneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERCENT, new org.apache.thrift.meta_data.FieldMetaData("percent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGE_OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("imageObjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETRY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("retryCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskInfo.class, metaDataMap);
  }

  public TaskInfo() {
  }

  public TaskInfo(
    String objectId,
    String taskId,
    String owneId,
    int level,
    int status,
    int percent,
    String imageObjectId,
    String fileName,
    String resourceGroupId,
    int retryCount)
  {
    this();
    this.objectId = objectId;
    this.taskId = taskId;
    this.owneId = owneId;
    this.level = level;
    setLevelIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.percent = percent;
    setPercentIsSet(true);
    this.imageObjectId = imageObjectId;
    this.fileName = fileName;
    this.resourceGroupId = resourceGroupId;
    this.retryCount = retryCount;
    setRetryCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskInfo(TaskInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetObjectId()) {
      this.objectId = other.objectId;
    }
    if (other.isSetTaskId()) {
      this.taskId = other.taskId;
    }
    if (other.isSetOwneId()) {
      this.owneId = other.owneId;
    }
    this.level = other.level;
    this.status = other.status;
    this.percent = other.percent;
    if (other.isSetImageObjectId()) {
      this.imageObjectId = other.imageObjectId;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetResourceGroupId()) {
      this.resourceGroupId = other.resourceGroupId;
    }
    this.retryCount = other.retryCount;
  }

  public TaskInfo deepCopy() {
    return new TaskInfo(this);
  }

  @Override
  public void clear() {
    this.objectId = null;
    this.taskId = null;
    this.owneId = null;
    setLevelIsSet(false);
    this.level = 0;
    setStatusIsSet(false);
    this.status = 0;
    setPercentIsSet(false);
    this.percent = 0;
    this.imageObjectId = null;
    this.fileName = null;
    this.resourceGroupId = null;
    setRetryCountIsSet(false);
    this.retryCount = 0;
  }

  public String getObjectId() {
    return this.objectId;
  }

  public TaskInfo setObjectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  public void unsetObjectId() {
    this.objectId = null;
  }

  /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectId() {
    return this.objectId != null;
  }

  public void setObjectIdIsSet(boolean value) {
    if (!value) {
      this.objectId = null;
    }
  }

  public String getTaskId() {
    return this.taskId;
  }

  public TaskInfo setTaskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  public void unsetTaskId() {
    this.taskId = null;
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return this.taskId != null;
  }

  public void setTaskIdIsSet(boolean value) {
    if (!value) {
      this.taskId = null;
    }
  }

  public String getOwneId() {
    return this.owneId;
  }

  public TaskInfo setOwneId(String owneId) {
    this.owneId = owneId;
    return this;
  }

  public void unsetOwneId() {
    this.owneId = null;
  }

  /** Returns true if field owneId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwneId() {
    return this.owneId != null;
  }

  public void setOwneIdIsSet(boolean value) {
    if (!value) {
      this.owneId = null;
    }
  }

  public int getLevel() {
    return this.level;
  }

  public TaskInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TaskInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPercent() {
    return this.percent;
  }

  public TaskInfo setPercent(int percent) {
    this.percent = percent;
    setPercentIsSet(true);
    return this;
  }

  public void unsetPercent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCENT_ISSET_ID);
  }

  /** Returns true if field percent is set (has been assigned a value) and false otherwise */
  public boolean isSetPercent() {
    return EncodingUtils.testBit(__isset_bitfield, __PERCENT_ISSET_ID);
  }

  public void setPercentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCENT_ISSET_ID, value);
  }

  public String getImageObjectId() {
    return this.imageObjectId;
  }

  public TaskInfo setImageObjectId(String imageObjectId) {
    this.imageObjectId = imageObjectId;
    return this;
  }

  public void unsetImageObjectId() {
    this.imageObjectId = null;
  }

  /** Returns true if field imageObjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetImageObjectId() {
    return this.imageObjectId != null;
  }

  public void setImageObjectIdIsSet(boolean value) {
    if (!value) {
      this.imageObjectId = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public TaskInfo setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getResourceGroupId() {
    return this.resourceGroupId;
  }

  public TaskInfo setResourceGroupId(String resourceGroupId) {
    this.resourceGroupId = resourceGroupId;
    return this;
  }

  public void unsetResourceGroupId() {
    this.resourceGroupId = null;
  }

  /** Returns true if field resourceGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceGroupId() {
    return this.resourceGroupId != null;
  }

  public void setResourceGroupIdIsSet(boolean value) {
    if (!value) {
      this.resourceGroupId = null;
    }
  }

  public int getRetryCount() {
    return this.retryCount;
  }

  public TaskInfo setRetryCount(int retryCount) {
    this.retryCount = retryCount;
    setRetryCountIsSet(true);
    return this;
  }

  public void unsetRetryCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID);
  }

  /** Returns true if field retryCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryCount() {
    return EncodingUtils.testBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID);
  }

  public void setRetryCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OBJECT_ID:
      if (value == null) {
        unsetObjectId();
      } else {
        setObjectId((String)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((String)value);
      }
      break;

    case OWNE_ID:
      if (value == null) {
        unsetOwneId();
      } else {
        setOwneId((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PERCENT:
      if (value == null) {
        unsetPercent();
      } else {
        setPercent((Integer)value);
      }
      break;

    case IMAGE_OBJECT_ID:
      if (value == null) {
        unsetImageObjectId();
      } else {
        setImageObjectId((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case RESOURCE_GROUP_ID:
      if (value == null) {
        unsetResourceGroupId();
      } else {
        setResourceGroupId((String)value);
      }
      break;

    case RETRY_COUNT:
      if (value == null) {
        unsetRetryCount();
      } else {
        setRetryCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OBJECT_ID:
      return getObjectId();

    case TASK_ID:
      return getTaskId();

    case OWNE_ID:
      return getOwneId();

    case LEVEL:
      return Integer.valueOf(getLevel());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PERCENT:
      return Integer.valueOf(getPercent());

    case IMAGE_OBJECT_ID:
      return getImageObjectId();

    case FILE_NAME:
      return getFileName();

    case RESOURCE_GROUP_ID:
      return getResourceGroupId();

    case RETRY_COUNT:
      return Integer.valueOf(getRetryCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OBJECT_ID:
      return isSetObjectId();
    case TASK_ID:
      return isSetTaskId();
    case OWNE_ID:
      return isSetOwneId();
    case LEVEL:
      return isSetLevel();
    case STATUS:
      return isSetStatus();
    case PERCENT:
      return isSetPercent();
    case IMAGE_OBJECT_ID:
      return isSetImageObjectId();
    case FILE_NAME:
      return isSetFileName();
    case RESOURCE_GROUP_ID:
      return isSetResourceGroupId();
    case RETRY_COUNT:
      return isSetRetryCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskInfo)
      return this.equals((TaskInfo)that);
    return false;
  }

  public boolean equals(TaskInfo that) {
    if (that == null)
      return false;

    boolean this_present_objectId = true && this.isSetObjectId();
    boolean that_present_objectId = true && that.isSetObjectId();
    if (this_present_objectId || that_present_objectId) {
      if (!(this_present_objectId && that_present_objectId))
        return false;
      if (!this.objectId.equals(that.objectId))
        return false;
    }

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (!this.taskId.equals(that.taskId))
        return false;
    }

    boolean this_present_owneId = true && this.isSetOwneId();
    boolean that_present_owneId = true && that.isSetOwneId();
    if (this_present_owneId || that_present_owneId) {
      if (!(this_present_owneId && that_present_owneId))
        return false;
      if (!this.owneId.equals(that.owneId))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_percent = true;
    boolean that_present_percent = true;
    if (this_present_percent || that_present_percent) {
      if (!(this_present_percent && that_present_percent))
        return false;
      if (this.percent != that.percent)
        return false;
    }

    boolean this_present_imageObjectId = true && this.isSetImageObjectId();
    boolean that_present_imageObjectId = true && that.isSetImageObjectId();
    if (this_present_imageObjectId || that_present_imageObjectId) {
      if (!(this_present_imageObjectId && that_present_imageObjectId))
        return false;
      if (!this.imageObjectId.equals(that.imageObjectId))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_resourceGroupId = true && this.isSetResourceGroupId();
    boolean that_present_resourceGroupId = true && that.isSetResourceGroupId();
    if (this_present_resourceGroupId || that_present_resourceGroupId) {
      if (!(this_present_resourceGroupId && that_present_resourceGroupId))
        return false;
      if (!this.resourceGroupId.equals(that.resourceGroupId))
        return false;
    }

    boolean this_present_retryCount = true;
    boolean that_present_retryCount = true;
    if (this_present_retryCount || that_present_retryCount) {
      if (!(this_present_retryCount && that_present_retryCount))
        return false;
      if (this.retryCount != that.retryCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TaskInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwneId()).compareTo(other.isSetOwneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owneId, other.owneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercent()).compareTo(other.isSetPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percent, other.percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageObjectId()).compareTo(other.isSetImageObjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageObjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageObjectId, other.imageObjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceGroupId()).compareTo(other.isSetResourceGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceGroupId, other.resourceGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryCount()).compareTo(other.isSetRetryCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryCount, other.retryCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskInfo(");
    boolean first = true;

    sb.append("objectId:");
    if (this.objectId == null) {
      sb.append("null");
    } else {
      sb.append(this.objectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    if (this.taskId == null) {
      sb.append("null");
    } else {
      sb.append(this.taskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owneId:");
    if (this.owneId == null) {
      sb.append("null");
    } else {
      sb.append(this.owneId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("percent:");
    sb.append(this.percent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageObjectId:");
    if (this.imageObjectId == null) {
      sb.append("null");
    } else {
      sb.append(this.imageObjectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceGroupId:");
    if (this.resourceGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retryCount:");
    sb.append(this.retryCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskInfoStandardSchemeFactory implements SchemeFactory {
    public TaskInfoStandardScheme getScheme() {
      return new TaskInfoStandardScheme();
    }
  }

  private static class TaskInfoStandardScheme extends StandardScheme<TaskInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectId = iprot.readString();
              struct.setObjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskId = iprot.readString();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWNE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owneId = iprot.readString();
              struct.setOwneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.percent = iprot.readI32();
              struct.setPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMAGE_OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageObjectId = iprot.readString();
              struct.setImageObjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESOURCE_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceGroupId = iprot.readString();
              struct.setResourceGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RETRY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retryCount = iprot.readI32();
              struct.setRetryCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.objectId != null) {
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeString(struct.objectId);
        oprot.writeFieldEnd();
      }
      if (struct.taskId != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(struct.taskId);
        oprot.writeFieldEnd();
      }
      if (struct.owneId != null) {
        oprot.writeFieldBegin(OWNE_ID_FIELD_DESC);
        oprot.writeString(struct.owneId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERCENT_FIELD_DESC);
      oprot.writeI32(struct.percent);
      oprot.writeFieldEnd();
      if (struct.imageObjectId != null) {
        oprot.writeFieldBegin(IMAGE_OBJECT_ID_FIELD_DESC);
        oprot.writeString(struct.imageObjectId);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.resourceGroupId != null) {
        oprot.writeFieldBegin(RESOURCE_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.resourceGroupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETRY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.retryCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskInfoTupleSchemeFactory implements SchemeFactory {
    public TaskInfoTupleScheme getScheme() {
      return new TaskInfoTupleScheme();
    }
  }

  private static class TaskInfoTupleScheme extends TupleScheme<TaskInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetObjectId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskId()) {
        optionals.set(1);
      }
      if (struct.isSetOwneId()) {
        optionals.set(2);
      }
      if (struct.isSetLevel()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetPercent()) {
        optionals.set(5);
      }
      if (struct.isSetImageObjectId()) {
        optionals.set(6);
      }
      if (struct.isSetFileName()) {
        optionals.set(7);
      }
      if (struct.isSetResourceGroupId()) {
        optionals.set(8);
      }
      if (struct.isSetRetryCount()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetObjectId()) {
        oprot.writeString(struct.objectId);
      }
      if (struct.isSetTaskId()) {
        oprot.writeString(struct.taskId);
      }
      if (struct.isSetOwneId()) {
        oprot.writeString(struct.owneId);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPercent()) {
        oprot.writeI32(struct.percent);
      }
      if (struct.isSetImageObjectId()) {
        oprot.writeString(struct.imageObjectId);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetResourceGroupId()) {
        oprot.writeString(struct.resourceGroupId);
      }
      if (struct.isSetRetryCount()) {
        oprot.writeI32(struct.retryCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.objectId = iprot.readString();
        struct.setObjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskId = iprot.readString();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.owneId = iprot.readString();
        struct.setOwneIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.percent = iprot.readI32();
        struct.setPercentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.imageObjectId = iprot.readString();
        struct.setImageObjectIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resourceGroupId = iprot.readString();
        struct.setResourceGroupIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.retryCount = iprot.readI32();
        struct.setRetryCountIsSet(true);
      }
    }
  }

}

