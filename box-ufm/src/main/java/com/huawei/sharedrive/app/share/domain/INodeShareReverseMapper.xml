<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap
        PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="INodeShareReverse">

    <!-- Use type aliases to avoid typing the full classname every time. -->
    <typeAlias alias="INodeShare" type="com.huawei.sharedrive.app.share.domain.INodeShare" />
    <typeAlias alias="List" type="java.util.List" />
    <resultMap id="mapToShare" class="INodeShare">
        <result column="createdAt" property="createdAt"/>
        <result column="createdBy" property="createdBy"/>
        <result column="iNodeId" property="iNodeId"/>
        <result column="modifiedAt" property="modifiedAt"/>
        <result column="modifiedBy" property="modifiedBy"/>
        <result column="ownerId" property="ownerId"/>
        <result column="roleName" property="roleName"/>
        <result column="sharedUserId" property="sharedUserId"/>
        <result column="sharedUserType" property="sharedUserType"/>
    </resultMap>

    <insert id="insert" parameterClass="INodeShare">
        insert into inode_share_r_$tableSuffix$(iNodeId,type,name,ownerId,ownerName,sharedUserId,sharedUserName,
        sharedUserType,createdAt,modifiedAt,createdBy,modifiedBy,roleName,status,size,shareType,linkCode,forwardId) values
        (#iNodeId#,#type#,#name#,#ownerId#,#ownerName#,#sharedUserId#,#sharedUserName#,#sharedUserType#,
        #createdAt#,#modifiedAt#,#createdBy#,#modifiedBy#,#roleName#,#status#,#size#,#shareType#,#linkCode#,#forwardId#)
    </insert>

    <update id="renameNode" parameterClass="INodeShare">
        <![CDATA[
        update inode_share_r_$tableSuffix$ set `name`=#name# where iNodeId=#iNodeId# and ownerId=#ownerId#
        ]]>
    </update>

    <update id="updateSharedUserName" parameterClass="INodeShare">
        <![CDATA[
        update inode_share_r_$tableSuffix$
		set `sharedUserName`=#sharedUserName#
		where sharedUserId=#sharedUserId#
        ]]>
    </update>

    <update id="updateSize" parameterClass="INodeShare">
        <![CDATA[
        update inode_share_r_$tableSuffix$
		set `size`=#size#
		where iNodeId=#iNodeId# and ownerId=#ownerId# and sharedUserId=#sharedUserId#
        ]]>
    </update>

    <update id="updateNameAndSize" parameterClass="INodeShare">
        <![CDATA[
        update inode_share_r_$tableSuffix$
		set `name`=#name#, `size`=#size#
		where iNodeId=#iNodeId# and ownerId=#ownerId# and sharedUserId=#sharedUserId#
        ]]>
    </update>

    <update id="updateStatus" parameterClass="INodeShare">
        <![CDATA[
        update inode_share_r_$tableSuffix$
		set `status`=#status#
		where iNodeId=#iNodeId# and ownerId=#ownerId# and sharedUserId=#sharedUserId#
        ]]>
    </update>

    <update id="updateRole" parameterClass="INodeShare">
        <![CDATA[
	update inode_share_r_$tableSuffix$ set `roleName`=#roleName# where iNodeId=#iNodeId# and ownerId=#ownerId# and sharedUserId=#sharedUserId# and sharedUserType=#sharedUserType#
	]]>
    </update>

    <select id="getShareToMeCount" parameterClass="INodeShare" resultClass="int">
        <![CDATA[
        select count(*) from inode_share_r_$tableSuffix$ where sharedUserId=#sharedUserId# and sharedUserType=#sharedUserType# and status=0
        ]]>
    </select>

    <select id="listShareToMe" parameterClass="INodeShare" resultClass="INodeShare">
        <![CDATA[
        select * from inode_share_r_$tableSuffix$ where sharedUserId=#sharedUserId# and sharedUserType=#sharedUserType#
        ]]>
    </select>

    <select id="getINodeShare" parameterClass="INodeShare" resultClass="INodeShare">
        select * from inode_share_r_$tableSuffix$ where sharedUserId=#sharedUserId# and sharedUserType=#sharedUserType#
		and iNodeId=#iNodeId# and ownerId=#ownerId# and status=0 
		<dynamic>
		  <isNotNull property="linkCode" prepend="and">
		     linkCode=#linkCode#
		  </isNotNull>
		</dynamic>
		
		
		limit 0,1
    </select>

    <select id="listShareToMeIgnoreStatus" parameterClass="INodeShare" resultClass="INodeShare">
        <![CDATA[
        select * from inode_share_r_$tableSuffix$ where sharedUserId=#sharedUserId#
        ]]>
    </select>



    <select id="listShareToMeIdListByOwner" parameterClass="INodeShare" resultClass="Long">
        <![CDATA[
        select iNodeId from inode_share_r_$tableSuffix$ where ownerId=#ownerId# and sharedUserId=#sharedUserId#
        and sharedUserType=#sharedUserType# and status=0
        ]]>
    </select>

    <select id="getShareToMeCountBySearchName" parameterClass="map" resultClass="int">
        select count(*) from inode_share_r_$filter.tableSuffix$
        <dynamic prepend="where">
            <isNotNull property="filter">
                <isNotEmpty prepend="and" property="filter.sharedUserId">
                    sharedUserId = #filter.sharedUserId# and status=0 and sharedUserType=#filter.sharedUserType#
                </isNotEmpty>
            </isNotNull>
        </dynamic>
        <dynamic prepend="and" open="(" close=")">
            <isNotEmpty property="searchName" >
                <![CDATA[
                    name like concat('%',#searchName#,'%') or ownerName like concat('%',#searchName#,'%')
                  ]]>
            </isNotEmpty>
        </dynamic>
    </select>

    <select id="listShareToMeByPage" parameterClass="map" resultClass="INodeShare">
        select * from inode_share_r_$filter.tableSuffix$
        <dynamic prepend="where">
            <isNotNull property="filter">
                <isNotEmpty prepend="and" property="filter.sharedUserId">
                    sharedUserId = #filter.sharedUserId# and status=0 and sharedUserType=#filter.sharedUserType#
                </isNotEmpty>
            </isNotNull>
        </dynamic>
        <dynamic prepend="and" open="(" close=")">
            <isNotEmpty property="searchName" >
                <![CDATA[
                    name like concat('%',#searchName#,'%') or ownerName like concat('%',#searchName#,'%')
                  ]]>
            </isNotEmpty>
        </dynamic>
        <dynamic prepend="order by">
            <isNotNull property="order">
                <isNotEmpty property="order.field">
                    $order.field$
                </isNotEmpty>
            </isNotNull>
        </dynamic>
        <dynamic prepend="limit">
            <isNotNull property="limit">
                $limit.offset$,$limit.length$
            </isNotNull>
        </dynamic>
    </select>
    
    
    <!-- 添加V2查询共享资源 -->
    <select id="listShareToMeByPageV2" parameterClass="map" resultClass="INodeShare">
        select * from inode_share_r_$filter.tableSuffix$
        <dynamic prepend="where">
            <isNotNull property="filter">
                <isNotEmpty prepend="and" property="filter.sharedUserId">
                    sharedUserId = #filter.sharedUserId# and status=0 and sharedUserType=#filter.sharedUserType# 
                </isNotEmpty>
            </isNotNull>
        </dynamic>
        <dynamic prepend="and" open="(" close=")">
            <isNotEmpty property="searchName" >
                <![CDATA[
                    name like concat('%',#searchName#,'%') or ownerName like concat('%',#searchName#,'%')
                  ]]>
            </isNotEmpty>
        </dynamic>
        <dynamic prepend="order by">
            <isNotNull property="order">
                $order$
            </isNotNull>
        </dynamic>
        <dynamic prepend="limit">
            <isNotNull property="limit">
                $limit.offset$,$limit.length$
            </isNotNull>
        </dynamic> 
    </select>
    
    
    
    
      <!-- 添加V2查询共享资源 -->
    <select id="getListWithDelete" parameterClass="map" resultClass="INodeShare">

        
        select t1.* from inode_share_r_$filter.tableSuffix$ t1 LEFT JOIN inode_share_delete t2 on (t1.sharedUserId=t2.sharedUserId and t1.ownerId=t2.ownerId 
        
        and (t1.iNodeId=t2.iNodeId or t1.linkCode=t2.linkCode ) and t2.deleteUserId=#deleteUserId#)

        <dynamic prepend="where">
            <isNotNull property="filter">
                <isNotEmpty prepend="and" property="filter.sharedUserId">
                    t1.sharedUserId = #filter.sharedUserId# and t1.status=0 and t1.sharedUserType=#filter.sharedUserType# and t2.ownerId is null
                </isNotEmpty>
            </isNotNull>
        </dynamic>
        <dynamic prepend="and" open="(" close=")">
            <isNotEmpty property="searchName" >
                <![CDATA[
                    t1.name like concat('%',#searchName#,'%') or t1.ownerName like concat('%',#searchName#,'%')
                  ]]>
            </isNotEmpty>
        </dynamic>
        <dynamic prepend="order by">
            <isNotNull property="order">
                $order$
            </isNotNull>
        </dynamic>
        <dynamic prepend="limit">
            <isNotNull property="limit">
                $limit.offset$,$limit.length$
            </isNotNull>
        </dynamic> 
    </select>
    
    
    
    
    <select id="getListWithDeleteTotal" parameterClass="map" resultClass="int">
          
        select count(*) from inode_share_r_$filter.tableSuffix$ t1 LEFT JOIN inode_share_delete t2 on (t1.sharedUserId=t2.sharedUserId and t1.ownerId=t2.ownerId 
        
        and (t1.iNodeId=t2.iNodeId or t1.linkCode=t2.linkCode ) and t2.deleteUserId=#deleteUserId#)

        <dynamic prepend="where">
            <isNotNull property="filter">
                <isNotEmpty prepend="and" property="filter.sharedUserId">
                    t1.sharedUserId = #filter.sharedUserId# and t1.status=0 and t1.sharedUserType=#filter.sharedUserType# and t2.ownerId is null
                </isNotEmpty>
            </isNotNull>
        </dynamic>
        <dynamic prepend="and" open="(" close=")">
            <isNotEmpty property="searchName" >
                <![CDATA[
                    t1.name like concat('%',#searchName#,'%') or t1.ownerName like concat('%',#searchName#,'%')
                  ]]>
            </isNotEmpty>
        </dynamic>
        
    </select>
    

    <delete id="deleteByInode" parameterClass="INodeShare">
        delete from inode_share_r_$tableSuffix$  
        <dynamic prepend="where">
            <isNull property="shareType" prepend="and">
               iNodeId=#iNodeId# and ownerId=#ownerId# and sharedUserId=#sharedUserId# and sharedUserType=#sharedUserType#
            </isNull>
            <isNotNull  property="shareType" prepend="and">
               ownerId=#ownerId#  and linkCode=#linkCode# and shareType=#shareType# and iNodeId=#iNodeId#
            </isNotNull>
        </dynamic>
    </delete>

    <delete id="deleteAll" parameterClass="INodeShare">
        <![CDATA[
        delete from inode_share_r_$tableSuffix$ where iNodeId=#iNodeId# and sharedUserId=#sharedUserId#
        ]]>
    </delete>

     <select id="getForwardRecord" parameterClass="INodeShare" resultClass="INodeShare">
        select * from inode_share_r_$tableSuffix$ where ownerId=#ownerId# and linkCode=#linkCode# 
         <dynamic>
             <isNotNull property="sharedUserId" prepend="and">
                sharedUserId=#sharedUserId#
             </isNotNull>
         </dynamic>
    </select> 
</sqlMap>

