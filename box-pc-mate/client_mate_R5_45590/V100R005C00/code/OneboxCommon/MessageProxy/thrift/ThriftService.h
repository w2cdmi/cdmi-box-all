/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftService_H
#define ThriftService_H

#include <thrift/TDispatchProcessor.h>
#include "OneboxThriftService_types.h"

namespace OneboxThriftService {

class ThriftServiceIf {
 public:
  virtual ~ThriftServiceIf() {}
  virtual int32_t getServiceStatus() = 0;
  virtual int64_t getCurrentUserId() = 0;
  virtual void listRemoteDir(std::vector<File_Node> & _return, const int64_t fileId, const int64_t userId, const int32_t userType) = 0;
  virtual void listLocalDir(std::vector<File_Node> & _return, const std::string& localPath) = 0;
  virtual void GetPathName(std::string& _return, const int64_t fileId) = 0;
  virtual int32_t upload(const std::string& localPath, const int64_t remoteParentId, const int64_t userId, const int32_t userType, const std::string& group) = 0;
  virtual void getTask(TransTask_RootNode& _return, const std::string& group) = 0;
  virtual int32_t pauseTask(const std::string& group) = 0;
  virtual int32_t delTask(const std::string& group) = 0;
  virtual int32_t resumeTask(const std::string& group) = 0;
  virtual int32_t isTaskExist(const std::string& group) = 0;
  virtual void createShareLink(std::string& _return, const int64_t fileId) = 0;
  virtual int32_t addNotify(const int64_t handle) = 0;
  virtual int32_t removeNotify(const int64_t handle) = 0;
  virtual void listTeamspace(std::vector<TeamSpace_Node> & _return) = 0;
  virtual int32_t sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5) = 0;
  virtual void getNewName(std::string& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& defaultName) = 0;
  virtual void createFolder(File_Node& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name) = 0;
  virtual void createFolderNoSync(File_Node& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name, const int32_t extraType) = 0;
  virtual int32_t renameFolder(const int64_t userId, const int32_t userType, const int64_t fileId, const std::string& name) = 0;
  virtual int32_t uploadOutlook(const std::string& localPath, const int64_t remoteParentId, const std::string& group) = 0;
  virtual int32_t uploadOffice(const std::string& localPath, const int64_t remoteParentId, const std::string& group) = 0;
  virtual bool needAddFullBackup(const std::string& strPath) = 0;
  virtual int32_t addFullBackup(const std::string& strPath) = 0;
};

class ThriftServiceIfFactory {
 public:
  typedef ThriftServiceIf Handler;

  virtual ~ThriftServiceIfFactory() {}

  virtual ThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThriftServiceIf* /* handler */) = 0;
};

class ThriftServiceIfSingletonFactory : virtual public ThriftServiceIfFactory {
 public:
  ThriftServiceIfSingletonFactory(const boost::shared_ptr<ThriftServiceIf>& iface) : iface_(iface) {}
  virtual ~ThriftServiceIfSingletonFactory() {}

  virtual ThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThriftServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ThriftServiceIf> iface_;
};

class ThriftServiceNull : virtual public ThriftServiceIf {
 public:
  virtual ~ThriftServiceNull() {}
  int32_t getServiceStatus() {
    int32_t _return = 0;
    return _return;
  }
  int64_t getCurrentUserId() {
    int64_t _return = 0;
    return _return;
  }
  void listRemoteDir(std::vector<File_Node> & /* _return */, const int64_t /* fileId */, const int64_t /* userId */, const int32_t /* userType */) {
    return;
  }
  void listLocalDir(std::vector<File_Node> & /* _return */, const std::string& /* localPath */) {
    return;
  }
  void GetPathName(std::string& /* _return */, const int64_t /* fileId */) {
    return;
  }
  int32_t upload(const std::string& /* localPath */, const int64_t /* remoteParentId */, const int64_t /* userId */, const int32_t /* userType */, const std::string& /* group */) {
    int32_t _return = 0;
    return _return;
  }
  void getTask(TransTask_RootNode& /* _return */, const std::string& /* group */) {
    return;
  }
  int32_t pauseTask(const std::string& /* group */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t delTask(const std::string& /* group */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t resumeTask(const std::string& /* group */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t isTaskExist(const std::string& /* group */) {
    int32_t _return = 0;
    return _return;
  }
  void createShareLink(std::string& /* _return */, const int64_t /* fileId */) {
    return;
  }
  int32_t addNotify(const int64_t /* handle */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t removeNotify(const int64_t /* handle */) {
    int32_t _return = 0;
    return _return;
  }
  void listTeamspace(std::vector<TeamSpace_Node> & /* _return */) {
    return;
  }
  int32_t sendMessage(const int32_t /* type */, const std::string& /* msg1 */, const std::string& /* msg2 */, const std::string& /* msg3 */, const std::string& /* msg4 */, const std::string& /* msg5 */) {
    int32_t _return = 0;
    return _return;
  }
  void getNewName(std::string& /* _return */, const int64_t /* userId */, const int32_t /* userType */, const int64_t /* parentId */, const std::string& /* defaultName */) {
    return;
  }
  void createFolder(File_Node& /* _return */, const int64_t /* userId */, const int32_t /* userType */, const int64_t /* parentId */, const std::string& /* name */) {
    return;
  }
  void createFolderNoSync(File_Node& /* _return */, const int64_t /* userId */, const int32_t /* userType */, const int64_t /* parentId */, const std::string& /* name */, const int32_t /* extraType */) {
    return;
  }
  int32_t renameFolder(const int64_t /* userId */, const int32_t /* userType */, const int64_t /* fileId */, const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadOutlook(const std::string& /* localPath */, const int64_t /* remoteParentId */, const std::string& /* group */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t uploadOffice(const std::string& /* localPath */, const int64_t /* remoteParentId */, const std::string& /* group */) {
    int32_t _return = 0;
    return _return;
  }
  bool needAddFullBackup(const std::string& /* strPath */) {
    bool _return = false;
    return _return;
  }
  int32_t addFullBackup(const std::string& /* strPath */) {
    int32_t _return = 0;
    return _return;
  }
};


class ThriftService_getServiceStatus_args {
 public:

  ThriftService_getServiceStatus_args() {
  }

  virtual ~ThriftService_getServiceStatus_args() throw() {}


  bool operator == (const ThriftService_getServiceStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_getServiceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getServiceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_getServiceStatus_pargs {
 public:


  virtual ~ThriftService_getServiceStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getServiceStatus_result__isset {
  _ThriftService_getServiceStatus_result__isset() : success(false) {}
  bool success;
} _ThriftService_getServiceStatus_result__isset;

class ThriftService_getServiceStatus_result {
 public:

  ThriftService_getServiceStatus_result() : success(0) {
  }

  virtual ~ThriftService_getServiceStatus_result() throw() {}

  int32_t success;

  _ThriftService_getServiceStatus_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_getServiceStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_getServiceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getServiceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getServiceStatus_presult__isset {
  _ThriftService_getServiceStatus_presult__isset() : success(false) {}
  bool success;
} _ThriftService_getServiceStatus_presult__isset;

class ThriftService_getServiceStatus_presult {
 public:


  virtual ~ThriftService_getServiceStatus_presult() throw() {}

  int32_t* success;

  _ThriftService_getServiceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ThriftService_getCurrentUserId_args {
 public:

  ThriftService_getCurrentUserId_args() {
  }

  virtual ~ThriftService_getCurrentUserId_args() throw() {}


  bool operator == (const ThriftService_getCurrentUserId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_getCurrentUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getCurrentUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_getCurrentUserId_pargs {
 public:


  virtual ~ThriftService_getCurrentUserId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getCurrentUserId_result__isset {
  _ThriftService_getCurrentUserId_result__isset() : success(false) {}
  bool success;
} _ThriftService_getCurrentUserId_result__isset;

class ThriftService_getCurrentUserId_result {
 public:

  ThriftService_getCurrentUserId_result() : success(0) {
  }

  virtual ~ThriftService_getCurrentUserId_result() throw() {}

  int64_t success;

  _ThriftService_getCurrentUserId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const ThriftService_getCurrentUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_getCurrentUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getCurrentUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getCurrentUserId_presult__isset {
  _ThriftService_getCurrentUserId_presult__isset() : success(false) {}
  bool success;
} _ThriftService_getCurrentUserId_presult__isset;

class ThriftService_getCurrentUserId_presult {
 public:


  virtual ~ThriftService_getCurrentUserId_presult() throw() {}

  int64_t* success;

  _ThriftService_getCurrentUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_listRemoteDir_args__isset {
  _ThriftService_listRemoteDir_args__isset() : fileId(false), userId(false), userType(false) {}
  bool fileId;
  bool userId;
  bool userType;
} _ThriftService_listRemoteDir_args__isset;

class ThriftService_listRemoteDir_args {
 public:

  ThriftService_listRemoteDir_args() : fileId(0), userId(0), userType(0) {
  }

  virtual ~ThriftService_listRemoteDir_args() throw() {}

  int64_t fileId;
  int64_t userId;
  int32_t userType;

  _ThriftService_listRemoteDir_args__isset __isset;

  void __set_fileId(const int64_t val) {
    fileId = val;
  }

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_userType(const int32_t val) {
    userType = val;
  }

  bool operator == (const ThriftService_listRemoteDir_args & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(userType == rhs.userType))
      return false;
    return true;
  }
  bool operator != (const ThriftService_listRemoteDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_listRemoteDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_listRemoteDir_pargs {
 public:


  virtual ~ThriftService_listRemoteDir_pargs() throw() {}

  const int64_t* fileId;
  const int64_t* userId;
  const int32_t* userType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_listRemoteDir_result__isset {
  _ThriftService_listRemoteDir_result__isset() : success(false) {}
  bool success;
} _ThriftService_listRemoteDir_result__isset;

class ThriftService_listRemoteDir_result {
 public:

  ThriftService_listRemoteDir_result() {
  }

  virtual ~ThriftService_listRemoteDir_result() throw() {}

  std::vector<File_Node>  success;

  _ThriftService_listRemoteDir_result__isset __isset;

  void __set_success(const std::vector<File_Node> & val) {
    success = val;
  }

  bool operator == (const ThriftService_listRemoteDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_listRemoteDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_listRemoteDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_listRemoteDir_presult__isset {
  _ThriftService_listRemoteDir_presult__isset() : success(false) {}
  bool success;
} _ThriftService_listRemoteDir_presult__isset;

class ThriftService_listRemoteDir_presult {
 public:


  virtual ~ThriftService_listRemoteDir_presult() throw() {}

  std::vector<File_Node> * success;

  _ThriftService_listRemoteDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_listLocalDir_args__isset {
  _ThriftService_listLocalDir_args__isset() : localPath(false) {}
  bool localPath;
} _ThriftService_listLocalDir_args__isset;

class ThriftService_listLocalDir_args {
 public:

  ThriftService_listLocalDir_args() : localPath() {
  }

  virtual ~ThriftService_listLocalDir_args() throw() {}

  std::string localPath;

  _ThriftService_listLocalDir_args__isset __isset;

  void __set_localPath(const std::string& val) {
    localPath = val;
  }

  bool operator == (const ThriftService_listLocalDir_args & rhs) const
  {
    if (!(localPath == rhs.localPath))
      return false;
    return true;
  }
  bool operator != (const ThriftService_listLocalDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_listLocalDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_listLocalDir_pargs {
 public:


  virtual ~ThriftService_listLocalDir_pargs() throw() {}

  const std::string* localPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_listLocalDir_result__isset {
  _ThriftService_listLocalDir_result__isset() : success(false) {}
  bool success;
} _ThriftService_listLocalDir_result__isset;

class ThriftService_listLocalDir_result {
 public:

  ThriftService_listLocalDir_result() {
  }

  virtual ~ThriftService_listLocalDir_result() throw() {}

  std::vector<File_Node>  success;

  _ThriftService_listLocalDir_result__isset __isset;

  void __set_success(const std::vector<File_Node> & val) {
    success = val;
  }

  bool operator == (const ThriftService_listLocalDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_listLocalDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_listLocalDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_listLocalDir_presult__isset {
  _ThriftService_listLocalDir_presult__isset() : success(false) {}
  bool success;
} _ThriftService_listLocalDir_presult__isset;

class ThriftService_listLocalDir_presult {
 public:


  virtual ~ThriftService_listLocalDir_presult() throw() {}

  std::vector<File_Node> * success;

  _ThriftService_listLocalDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_GetPathName_args__isset {
  _ThriftService_GetPathName_args__isset() : fileId(false) {}
  bool fileId;
} _ThriftService_GetPathName_args__isset;

class ThriftService_GetPathName_args {
 public:

  ThriftService_GetPathName_args() : fileId(0) {
  }

  virtual ~ThriftService_GetPathName_args() throw() {}

  int64_t fileId;

  _ThriftService_GetPathName_args__isset __isset;

  void __set_fileId(const int64_t val) {
    fileId = val;
  }

  bool operator == (const ThriftService_GetPathName_args & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    return true;
  }
  bool operator != (const ThriftService_GetPathName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_GetPathName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_GetPathName_pargs {
 public:


  virtual ~ThriftService_GetPathName_pargs() throw() {}

  const int64_t* fileId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_GetPathName_result__isset {
  _ThriftService_GetPathName_result__isset() : success(false) {}
  bool success;
} _ThriftService_GetPathName_result__isset;

class ThriftService_GetPathName_result {
 public:

  ThriftService_GetPathName_result() : success() {
  }

  virtual ~ThriftService_GetPathName_result() throw() {}

  std::string success;

  _ThriftService_GetPathName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ThriftService_GetPathName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_GetPathName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_GetPathName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_GetPathName_presult__isset {
  _ThriftService_GetPathName_presult__isset() : success(false) {}
  bool success;
} _ThriftService_GetPathName_presult__isset;

class ThriftService_GetPathName_presult {
 public:


  virtual ~ThriftService_GetPathName_presult() throw() {}

  std::string* success;

  _ThriftService_GetPathName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_upload_args__isset {
  _ThriftService_upload_args__isset() : localPath(false), remoteParentId(false), userId(false), userType(false), group(false) {}
  bool localPath;
  bool remoteParentId;
  bool userId;
  bool userType;
  bool group;
} _ThriftService_upload_args__isset;

class ThriftService_upload_args {
 public:

  ThriftService_upload_args() : localPath(), remoteParentId(0), userId(0), userType(0), group() {
  }

  virtual ~ThriftService_upload_args() throw() {}

  std::string localPath;
  int64_t remoteParentId;
  int64_t userId;
  int32_t userType;
  std::string group;

  _ThriftService_upload_args__isset __isset;

  void __set_localPath(const std::string& val) {
    localPath = val;
  }

  void __set_remoteParentId(const int64_t val) {
    remoteParentId = val;
  }

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_userType(const int32_t val) {
    userType = val;
  }

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_upload_args & rhs) const
  {
    if (!(localPath == rhs.localPath))
      return false;
    if (!(remoteParentId == rhs.remoteParentId))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(userType == rhs.userType))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_upload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_upload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_upload_pargs {
 public:


  virtual ~ThriftService_upload_pargs() throw() {}

  const std::string* localPath;
  const int64_t* remoteParentId;
  const int64_t* userId;
  const int32_t* userType;
  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_upload_result__isset {
  _ThriftService_upload_result__isset() : success(false) {}
  bool success;
} _ThriftService_upload_result__isset;

class ThriftService_upload_result {
 public:

  ThriftService_upload_result() : success(0) {
  }

  virtual ~ThriftService_upload_result() throw() {}

  int32_t success;

  _ThriftService_upload_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_upload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_upload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_upload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_upload_presult__isset {
  _ThriftService_upload_presult__isset() : success(false) {}
  bool success;
} _ThriftService_upload_presult__isset;

class ThriftService_upload_presult {
 public:


  virtual ~ThriftService_upload_presult() throw() {}

  int32_t* success;

  _ThriftService_upload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_getTask_args__isset {
  _ThriftService_getTask_args__isset() : group(false) {}
  bool group;
} _ThriftService_getTask_args__isset;

class ThriftService_getTask_args {
 public:

  ThriftService_getTask_args() : group() {
  }

  virtual ~ThriftService_getTask_args() throw() {}

  std::string group;

  _ThriftService_getTask_args__isset __isset;

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_getTask_args & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_getTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_getTask_pargs {
 public:


  virtual ~ThriftService_getTask_pargs() throw() {}

  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getTask_result__isset {
  _ThriftService_getTask_result__isset() : success(false) {}
  bool success;
} _ThriftService_getTask_result__isset;

class ThriftService_getTask_result {
 public:

  ThriftService_getTask_result() {
  }

  virtual ~ThriftService_getTask_result() throw() {}

  TransTask_RootNode success;

  _ThriftService_getTask_result__isset __isset;

  void __set_success(const TransTask_RootNode& val) {
    success = val;
  }

  bool operator == (const ThriftService_getTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_getTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getTask_presult__isset {
  _ThriftService_getTask_presult__isset() : success(false) {}
  bool success;
} _ThriftService_getTask_presult__isset;

class ThriftService_getTask_presult {
 public:


  virtual ~ThriftService_getTask_presult() throw() {}

  TransTask_RootNode* success;

  _ThriftService_getTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_pauseTask_args__isset {
  _ThriftService_pauseTask_args__isset() : group(false) {}
  bool group;
} _ThriftService_pauseTask_args__isset;

class ThriftService_pauseTask_args {
 public:

  ThriftService_pauseTask_args() : group() {
  }

  virtual ~ThriftService_pauseTask_args() throw() {}

  std::string group;

  _ThriftService_pauseTask_args__isset __isset;

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_pauseTask_args & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_pauseTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_pauseTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_pauseTask_pargs {
 public:


  virtual ~ThriftService_pauseTask_pargs() throw() {}

  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_pauseTask_result__isset {
  _ThriftService_pauseTask_result__isset() : success(false) {}
  bool success;
} _ThriftService_pauseTask_result__isset;

class ThriftService_pauseTask_result {
 public:

  ThriftService_pauseTask_result() : success(0) {
  }

  virtual ~ThriftService_pauseTask_result() throw() {}

  int32_t success;

  _ThriftService_pauseTask_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_pauseTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_pauseTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_pauseTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_pauseTask_presult__isset {
  _ThriftService_pauseTask_presult__isset() : success(false) {}
  bool success;
} _ThriftService_pauseTask_presult__isset;

class ThriftService_pauseTask_presult {
 public:


  virtual ~ThriftService_pauseTask_presult() throw() {}

  int32_t* success;

  _ThriftService_pauseTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_delTask_args__isset {
  _ThriftService_delTask_args__isset() : group(false) {}
  bool group;
} _ThriftService_delTask_args__isset;

class ThriftService_delTask_args {
 public:

  ThriftService_delTask_args() : group() {
  }

  virtual ~ThriftService_delTask_args() throw() {}

  std::string group;

  _ThriftService_delTask_args__isset __isset;

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_delTask_args & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_delTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_delTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_delTask_pargs {
 public:


  virtual ~ThriftService_delTask_pargs() throw() {}

  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_delTask_result__isset {
  _ThriftService_delTask_result__isset() : success(false) {}
  bool success;
} _ThriftService_delTask_result__isset;

class ThriftService_delTask_result {
 public:

  ThriftService_delTask_result() : success(0) {
  }

  virtual ~ThriftService_delTask_result() throw() {}

  int32_t success;

  _ThriftService_delTask_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_delTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_delTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_delTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_delTask_presult__isset {
  _ThriftService_delTask_presult__isset() : success(false) {}
  bool success;
} _ThriftService_delTask_presult__isset;

class ThriftService_delTask_presult {
 public:


  virtual ~ThriftService_delTask_presult() throw() {}

  int32_t* success;

  _ThriftService_delTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_resumeTask_args__isset {
  _ThriftService_resumeTask_args__isset() : group(false) {}
  bool group;
} _ThriftService_resumeTask_args__isset;

class ThriftService_resumeTask_args {
 public:

  ThriftService_resumeTask_args() : group() {
  }

  virtual ~ThriftService_resumeTask_args() throw() {}

  std::string group;

  _ThriftService_resumeTask_args__isset __isset;

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_resumeTask_args & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_resumeTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_resumeTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_resumeTask_pargs {
 public:


  virtual ~ThriftService_resumeTask_pargs() throw() {}

  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_resumeTask_result__isset {
  _ThriftService_resumeTask_result__isset() : success(false) {}
  bool success;
} _ThriftService_resumeTask_result__isset;

class ThriftService_resumeTask_result {
 public:

  ThriftService_resumeTask_result() : success(0) {
  }

  virtual ~ThriftService_resumeTask_result() throw() {}

  int32_t success;

  _ThriftService_resumeTask_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_resumeTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_resumeTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_resumeTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_resumeTask_presult__isset {
  _ThriftService_resumeTask_presult__isset() : success(false) {}
  bool success;
} _ThriftService_resumeTask_presult__isset;

class ThriftService_resumeTask_presult {
 public:


  virtual ~ThriftService_resumeTask_presult() throw() {}

  int32_t* success;

  _ThriftService_resumeTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_isTaskExist_args__isset {
  _ThriftService_isTaskExist_args__isset() : group(false) {}
  bool group;
} _ThriftService_isTaskExist_args__isset;

class ThriftService_isTaskExist_args {
 public:

  ThriftService_isTaskExist_args() : group() {
  }

  virtual ~ThriftService_isTaskExist_args() throw() {}

  std::string group;

  _ThriftService_isTaskExist_args__isset __isset;

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_isTaskExist_args & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_isTaskExist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_isTaskExist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_isTaskExist_pargs {
 public:


  virtual ~ThriftService_isTaskExist_pargs() throw() {}

  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_isTaskExist_result__isset {
  _ThriftService_isTaskExist_result__isset() : success(false) {}
  bool success;
} _ThriftService_isTaskExist_result__isset;

class ThriftService_isTaskExist_result {
 public:

  ThriftService_isTaskExist_result() : success(0) {
  }

  virtual ~ThriftService_isTaskExist_result() throw() {}

  int32_t success;

  _ThriftService_isTaskExist_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_isTaskExist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_isTaskExist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_isTaskExist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_isTaskExist_presult__isset {
  _ThriftService_isTaskExist_presult__isset() : success(false) {}
  bool success;
} _ThriftService_isTaskExist_presult__isset;

class ThriftService_isTaskExist_presult {
 public:


  virtual ~ThriftService_isTaskExist_presult() throw() {}

  int32_t* success;

  _ThriftService_isTaskExist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_createShareLink_args__isset {
  _ThriftService_createShareLink_args__isset() : fileId(false) {}
  bool fileId;
} _ThriftService_createShareLink_args__isset;

class ThriftService_createShareLink_args {
 public:

  ThriftService_createShareLink_args() : fileId(0) {
  }

  virtual ~ThriftService_createShareLink_args() throw() {}

  int64_t fileId;

  _ThriftService_createShareLink_args__isset __isset;

  void __set_fileId(const int64_t val) {
    fileId = val;
  }

  bool operator == (const ThriftService_createShareLink_args & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    return true;
  }
  bool operator != (const ThriftService_createShareLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_createShareLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_createShareLink_pargs {
 public:


  virtual ~ThriftService_createShareLink_pargs() throw() {}

  const int64_t* fileId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_createShareLink_result__isset {
  _ThriftService_createShareLink_result__isset() : success(false) {}
  bool success;
} _ThriftService_createShareLink_result__isset;

class ThriftService_createShareLink_result {
 public:

  ThriftService_createShareLink_result() : success() {
  }

  virtual ~ThriftService_createShareLink_result() throw() {}

  std::string success;

  _ThriftService_createShareLink_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ThriftService_createShareLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_createShareLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_createShareLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_createShareLink_presult__isset {
  _ThriftService_createShareLink_presult__isset() : success(false) {}
  bool success;
} _ThriftService_createShareLink_presult__isset;

class ThriftService_createShareLink_presult {
 public:


  virtual ~ThriftService_createShareLink_presult() throw() {}

  std::string* success;

  _ThriftService_createShareLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_addNotify_args__isset {
  _ThriftService_addNotify_args__isset() : handle(false) {}
  bool handle;
} _ThriftService_addNotify_args__isset;

class ThriftService_addNotify_args {
 public:

  ThriftService_addNotify_args() : handle(0) {
  }

  virtual ~ThriftService_addNotify_args() throw() {}

  int64_t handle;

  _ThriftService_addNotify_args__isset __isset;

  void __set_handle(const int64_t val) {
    handle = val;
  }

  bool operator == (const ThriftService_addNotify_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    return true;
  }
  bool operator != (const ThriftService_addNotify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_addNotify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_addNotify_pargs {
 public:


  virtual ~ThriftService_addNotify_pargs() throw() {}

  const int64_t* handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_addNotify_result__isset {
  _ThriftService_addNotify_result__isset() : success(false) {}
  bool success;
} _ThriftService_addNotify_result__isset;

class ThriftService_addNotify_result {
 public:

  ThriftService_addNotify_result() : success(0) {
  }

  virtual ~ThriftService_addNotify_result() throw() {}

  int32_t success;

  _ThriftService_addNotify_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_addNotify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_addNotify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_addNotify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_addNotify_presult__isset {
  _ThriftService_addNotify_presult__isset() : success(false) {}
  bool success;
} _ThriftService_addNotify_presult__isset;

class ThriftService_addNotify_presult {
 public:


  virtual ~ThriftService_addNotify_presult() throw() {}

  int32_t* success;

  _ThriftService_addNotify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_removeNotify_args__isset {
  _ThriftService_removeNotify_args__isset() : handle(false) {}
  bool handle;
} _ThriftService_removeNotify_args__isset;

class ThriftService_removeNotify_args {
 public:

  ThriftService_removeNotify_args() : handle(0) {
  }

  virtual ~ThriftService_removeNotify_args() throw() {}

  int64_t handle;

  _ThriftService_removeNotify_args__isset __isset;

  void __set_handle(const int64_t val) {
    handle = val;
  }

  bool operator == (const ThriftService_removeNotify_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    return true;
  }
  bool operator != (const ThriftService_removeNotify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_removeNotify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_removeNotify_pargs {
 public:


  virtual ~ThriftService_removeNotify_pargs() throw() {}

  const int64_t* handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_removeNotify_result__isset {
  _ThriftService_removeNotify_result__isset() : success(false) {}
  bool success;
} _ThriftService_removeNotify_result__isset;

class ThriftService_removeNotify_result {
 public:

  ThriftService_removeNotify_result() : success(0) {
  }

  virtual ~ThriftService_removeNotify_result() throw() {}

  int32_t success;

  _ThriftService_removeNotify_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_removeNotify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_removeNotify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_removeNotify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_removeNotify_presult__isset {
  _ThriftService_removeNotify_presult__isset() : success(false) {}
  bool success;
} _ThriftService_removeNotify_presult__isset;

class ThriftService_removeNotify_presult {
 public:


  virtual ~ThriftService_removeNotify_presult() throw() {}

  int32_t* success;

  _ThriftService_removeNotify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ThriftService_listTeamspace_args {
 public:

  ThriftService_listTeamspace_args() {
  }

  virtual ~ThriftService_listTeamspace_args() throw() {}


  bool operator == (const ThriftService_listTeamspace_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_listTeamspace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_listTeamspace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_listTeamspace_pargs {
 public:


  virtual ~ThriftService_listTeamspace_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_listTeamspace_result__isset {
  _ThriftService_listTeamspace_result__isset() : success(false) {}
  bool success;
} _ThriftService_listTeamspace_result__isset;

class ThriftService_listTeamspace_result {
 public:

  ThriftService_listTeamspace_result() {
  }

  virtual ~ThriftService_listTeamspace_result() throw() {}

  std::vector<TeamSpace_Node>  success;

  _ThriftService_listTeamspace_result__isset __isset;

  void __set_success(const std::vector<TeamSpace_Node> & val) {
    success = val;
  }

  bool operator == (const ThriftService_listTeamspace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_listTeamspace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_listTeamspace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_listTeamspace_presult__isset {
  _ThriftService_listTeamspace_presult__isset() : success(false) {}
  bool success;
} _ThriftService_listTeamspace_presult__isset;

class ThriftService_listTeamspace_presult {
 public:


  virtual ~ThriftService_listTeamspace_presult() throw() {}

  std::vector<TeamSpace_Node> * success;

  _ThriftService_listTeamspace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_sendMessage_args__isset {
  _ThriftService_sendMessage_args__isset() : type(false), msg1(false), msg2(false), msg3(false), msg4(false), msg5(false) {}
  bool type;
  bool msg1;
  bool msg2;
  bool msg3;
  bool msg4;
  bool msg5;
} _ThriftService_sendMessage_args__isset;

class ThriftService_sendMessage_args {
 public:

  ThriftService_sendMessage_args() : type(0), msg1(), msg2(), msg3(), msg4(), msg5() {
  }

  virtual ~ThriftService_sendMessage_args() throw() {}

  int32_t type;
  std::string msg1;
  std::string msg2;
  std::string msg3;
  std::string msg4;
  std::string msg5;

  _ThriftService_sendMessage_args__isset __isset;

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_msg1(const std::string& val) {
    msg1 = val;
  }

  void __set_msg2(const std::string& val) {
    msg2 = val;
  }

  void __set_msg3(const std::string& val) {
    msg3 = val;
  }

  void __set_msg4(const std::string& val) {
    msg4 = val;
  }

  void __set_msg5(const std::string& val) {
    msg5 = val;
  }

  bool operator == (const ThriftService_sendMessage_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(msg1 == rhs.msg1))
      return false;
    if (!(msg2 == rhs.msg2))
      return false;
    if (!(msg3 == rhs.msg3))
      return false;
    if (!(msg4 == rhs.msg4))
      return false;
    if (!(msg5 == rhs.msg5))
      return false;
    return true;
  }
  bool operator != (const ThriftService_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_sendMessage_pargs {
 public:


  virtual ~ThriftService_sendMessage_pargs() throw() {}

  const int32_t* type;
  const std::string* msg1;
  const std::string* msg2;
  const std::string* msg3;
  const std::string* msg4;
  const std::string* msg5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_sendMessage_result__isset {
  _ThriftService_sendMessage_result__isset() : success(false) {}
  bool success;
} _ThriftService_sendMessage_result__isset;

class ThriftService_sendMessage_result {
 public:

  ThriftService_sendMessage_result() : success(0) {
  }

  virtual ~ThriftService_sendMessage_result() throw() {}

  int32_t success;

  _ThriftService_sendMessage_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_sendMessage_presult__isset {
  _ThriftService_sendMessage_presult__isset() : success(false) {}
  bool success;
} _ThriftService_sendMessage_presult__isset;

class ThriftService_sendMessage_presult {
 public:


  virtual ~ThriftService_sendMessage_presult() throw() {}

  int32_t* success;

  _ThriftService_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_getNewName_args__isset {
  _ThriftService_getNewName_args__isset() : userId(false), userType(false), parentId(false), defaultName(false) {}
  bool userId;
  bool userType;
  bool parentId;
  bool defaultName;
} _ThriftService_getNewName_args__isset;

class ThriftService_getNewName_args {
 public:

  ThriftService_getNewName_args() : userId(0), userType(0), parentId(0), defaultName() {
  }

  virtual ~ThriftService_getNewName_args() throw() {}

  int64_t userId;
  int32_t userType;
  int64_t parentId;
  std::string defaultName;

  _ThriftService_getNewName_args__isset __isset;

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_userType(const int32_t val) {
    userType = val;
  }

  void __set_parentId(const int64_t val) {
    parentId = val;
  }

  void __set_defaultName(const std::string& val) {
    defaultName = val;
  }

  bool operator == (const ThriftService_getNewName_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userType == rhs.userType))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(defaultName == rhs.defaultName))
      return false;
    return true;
  }
  bool operator != (const ThriftService_getNewName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getNewName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_getNewName_pargs {
 public:


  virtual ~ThriftService_getNewName_pargs() throw() {}

  const int64_t* userId;
  const int32_t* userType;
  const int64_t* parentId;
  const std::string* defaultName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getNewName_result__isset {
  _ThriftService_getNewName_result__isset() : success(false) {}
  bool success;
} _ThriftService_getNewName_result__isset;

class ThriftService_getNewName_result {
 public:

  ThriftService_getNewName_result() : success() {
  }

  virtual ~ThriftService_getNewName_result() throw() {}

  std::string success;

  _ThriftService_getNewName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ThriftService_getNewName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_getNewName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_getNewName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_getNewName_presult__isset {
  _ThriftService_getNewName_presult__isset() : success(false) {}
  bool success;
} _ThriftService_getNewName_presult__isset;

class ThriftService_getNewName_presult {
 public:


  virtual ~ThriftService_getNewName_presult() throw() {}

  std::string* success;

  _ThriftService_getNewName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_createFolder_args__isset {
  _ThriftService_createFolder_args__isset() : userId(false), userType(false), parentId(false), name(false) {}
  bool userId;
  bool userType;
  bool parentId;
  bool name;
} _ThriftService_createFolder_args__isset;

class ThriftService_createFolder_args {
 public:

  ThriftService_createFolder_args() : userId(0), userType(0), parentId(0), name() {
  }

  virtual ~ThriftService_createFolder_args() throw() {}

  int64_t userId;
  int32_t userType;
  int64_t parentId;
  std::string name;

  _ThriftService_createFolder_args__isset __isset;

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_userType(const int32_t val) {
    userType = val;
  }

  void __set_parentId(const int64_t val) {
    parentId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ThriftService_createFolder_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userType == rhs.userType))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftService_createFolder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_createFolder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_createFolder_pargs {
 public:


  virtual ~ThriftService_createFolder_pargs() throw() {}

  const int64_t* userId;
  const int32_t* userType;
  const int64_t* parentId;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_createFolder_result__isset {
  _ThriftService_createFolder_result__isset() : success(false) {}
  bool success;
} _ThriftService_createFolder_result__isset;

class ThriftService_createFolder_result {
 public:

  ThriftService_createFolder_result() {
  }

  virtual ~ThriftService_createFolder_result() throw() {}

  File_Node success;

  _ThriftService_createFolder_result__isset __isset;

  void __set_success(const File_Node& val) {
    success = val;
  }

  bool operator == (const ThriftService_createFolder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_createFolder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_createFolder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_createFolder_presult__isset {
  _ThriftService_createFolder_presult__isset() : success(false) {}
  bool success;
} _ThriftService_createFolder_presult__isset;

class ThriftService_createFolder_presult {
 public:


  virtual ~ThriftService_createFolder_presult() throw() {}

  File_Node* success;

  _ThriftService_createFolder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_createFolderNoSync_args__isset {
  _ThriftService_createFolderNoSync_args__isset() : userId(false), userType(false), parentId(false), name(false), extraType(false) {}
  bool userId;
  bool userType;
  bool parentId;
  bool name;
  bool extraType;
} _ThriftService_createFolderNoSync_args__isset;

class ThriftService_createFolderNoSync_args {
 public:

  ThriftService_createFolderNoSync_args() : userId(0), userType(0), parentId(0), name(), extraType(0) {
  }

  virtual ~ThriftService_createFolderNoSync_args() throw() {}

  int64_t userId;
  int32_t userType;
  int64_t parentId;
  std::string name;
  int32_t extraType;

  _ThriftService_createFolderNoSync_args__isset __isset;

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_userType(const int32_t val) {
    userType = val;
  }

  void __set_parentId(const int64_t val) {
    parentId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_extraType(const int32_t val) {
    extraType = val;
  }

  bool operator == (const ThriftService_createFolderNoSync_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userType == rhs.userType))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(extraType == rhs.extraType))
      return false;
    return true;
  }
  bool operator != (const ThriftService_createFolderNoSync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_createFolderNoSync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_createFolderNoSync_pargs {
 public:


  virtual ~ThriftService_createFolderNoSync_pargs() throw() {}

  const int64_t* userId;
  const int32_t* userType;
  const int64_t* parentId;
  const std::string* name;
  const int32_t* extraType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_createFolderNoSync_result__isset {
  _ThriftService_createFolderNoSync_result__isset() : success(false) {}
  bool success;
} _ThriftService_createFolderNoSync_result__isset;

class ThriftService_createFolderNoSync_result {
 public:

  ThriftService_createFolderNoSync_result() {
  }

  virtual ~ThriftService_createFolderNoSync_result() throw() {}

  File_Node success;

  _ThriftService_createFolderNoSync_result__isset __isset;

  void __set_success(const File_Node& val) {
    success = val;
  }

  bool operator == (const ThriftService_createFolderNoSync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_createFolderNoSync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_createFolderNoSync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_createFolderNoSync_presult__isset {
  _ThriftService_createFolderNoSync_presult__isset() : success(false) {}
  bool success;
} _ThriftService_createFolderNoSync_presult__isset;

class ThriftService_createFolderNoSync_presult {
 public:


  virtual ~ThriftService_createFolderNoSync_presult() throw() {}

  File_Node* success;

  _ThriftService_createFolderNoSync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_renameFolder_args__isset {
  _ThriftService_renameFolder_args__isset() : userId(false), userType(false), fileId(false), name(false) {}
  bool userId;
  bool userType;
  bool fileId;
  bool name;
} _ThriftService_renameFolder_args__isset;

class ThriftService_renameFolder_args {
 public:

  ThriftService_renameFolder_args() : userId(0), userType(0), fileId(0), name() {
  }

  virtual ~ThriftService_renameFolder_args() throw() {}

  int64_t userId;
  int32_t userType;
  int64_t fileId;
  std::string name;

  _ThriftService_renameFolder_args__isset __isset;

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_userType(const int32_t val) {
    userType = val;
  }

  void __set_fileId(const int64_t val) {
    fileId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ThriftService_renameFolder_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userType == rhs.userType))
      return false;
    if (!(fileId == rhs.fileId))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftService_renameFolder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_renameFolder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_renameFolder_pargs {
 public:


  virtual ~ThriftService_renameFolder_pargs() throw() {}

  const int64_t* userId;
  const int32_t* userType;
  const int64_t* fileId;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_renameFolder_result__isset {
  _ThriftService_renameFolder_result__isset() : success(false) {}
  bool success;
} _ThriftService_renameFolder_result__isset;

class ThriftService_renameFolder_result {
 public:

  ThriftService_renameFolder_result() : success(0) {
  }

  virtual ~ThriftService_renameFolder_result() throw() {}

  int32_t success;

  _ThriftService_renameFolder_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_renameFolder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_renameFolder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_renameFolder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_renameFolder_presult__isset {
  _ThriftService_renameFolder_presult__isset() : success(false) {}
  bool success;
} _ThriftService_renameFolder_presult__isset;

class ThriftService_renameFolder_presult {
 public:


  virtual ~ThriftService_renameFolder_presult() throw() {}

  int32_t* success;

  _ThriftService_renameFolder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_uploadOutlook_args__isset {
  _ThriftService_uploadOutlook_args__isset() : localPath(false), remoteParentId(false), group(false) {}
  bool localPath;
  bool remoteParentId;
  bool group;
} _ThriftService_uploadOutlook_args__isset;

class ThriftService_uploadOutlook_args {
 public:

  ThriftService_uploadOutlook_args() : localPath(), remoteParentId(0), group() {
  }

  virtual ~ThriftService_uploadOutlook_args() throw() {}

  std::string localPath;
  int64_t remoteParentId;
  std::string group;

  _ThriftService_uploadOutlook_args__isset __isset;

  void __set_localPath(const std::string& val) {
    localPath = val;
  }

  void __set_remoteParentId(const int64_t val) {
    remoteParentId = val;
  }

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_uploadOutlook_args & rhs) const
  {
    if (!(localPath == rhs.localPath))
      return false;
    if (!(remoteParentId == rhs.remoteParentId))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_uploadOutlook_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_uploadOutlook_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_uploadOutlook_pargs {
 public:


  virtual ~ThriftService_uploadOutlook_pargs() throw() {}

  const std::string* localPath;
  const int64_t* remoteParentId;
  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_uploadOutlook_result__isset {
  _ThriftService_uploadOutlook_result__isset() : success(false) {}
  bool success;
} _ThriftService_uploadOutlook_result__isset;

class ThriftService_uploadOutlook_result {
 public:

  ThriftService_uploadOutlook_result() : success(0) {
  }

  virtual ~ThriftService_uploadOutlook_result() throw() {}

  int32_t success;

  _ThriftService_uploadOutlook_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_uploadOutlook_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_uploadOutlook_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_uploadOutlook_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_uploadOutlook_presult__isset {
  _ThriftService_uploadOutlook_presult__isset() : success(false) {}
  bool success;
} _ThriftService_uploadOutlook_presult__isset;

class ThriftService_uploadOutlook_presult {
 public:


  virtual ~ThriftService_uploadOutlook_presult() throw() {}

  int32_t* success;

  _ThriftService_uploadOutlook_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_uploadOffice_args__isset {
  _ThriftService_uploadOffice_args__isset() : localPath(false), remoteParentId(false), group(false) {}
  bool localPath;
  bool remoteParentId;
  bool group;
} _ThriftService_uploadOffice_args__isset;

class ThriftService_uploadOffice_args {
 public:

  ThriftService_uploadOffice_args() : localPath(), remoteParentId(0), group() {
  }

  virtual ~ThriftService_uploadOffice_args() throw() {}

  std::string localPath;
  int64_t remoteParentId;
  std::string group;

  _ThriftService_uploadOffice_args__isset __isset;

  void __set_localPath(const std::string& val) {
    localPath = val;
  }

  void __set_remoteParentId(const int64_t val) {
    remoteParentId = val;
  }

  void __set_group(const std::string& val) {
    group = val;
  }

  bool operator == (const ThriftService_uploadOffice_args & rhs) const
  {
    if (!(localPath == rhs.localPath))
      return false;
    if (!(remoteParentId == rhs.remoteParentId))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const ThriftService_uploadOffice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_uploadOffice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_uploadOffice_pargs {
 public:


  virtual ~ThriftService_uploadOffice_pargs() throw() {}

  const std::string* localPath;
  const int64_t* remoteParentId;
  const std::string* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_uploadOffice_result__isset {
  _ThriftService_uploadOffice_result__isset() : success(false) {}
  bool success;
} _ThriftService_uploadOffice_result__isset;

class ThriftService_uploadOffice_result {
 public:

  ThriftService_uploadOffice_result() : success(0) {
  }

  virtual ~ThriftService_uploadOffice_result() throw() {}

  int32_t success;

  _ThriftService_uploadOffice_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_uploadOffice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_uploadOffice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_uploadOffice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_uploadOffice_presult__isset {
  _ThriftService_uploadOffice_presult__isset() : success(false) {}
  bool success;
} _ThriftService_uploadOffice_presult__isset;

class ThriftService_uploadOffice_presult {
 public:


  virtual ~ThriftService_uploadOffice_presult() throw() {}

  int32_t* success;

  _ThriftService_uploadOffice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_needAddFullBackup_args__isset {
  _ThriftService_needAddFullBackup_args__isset() : strPath(false) {}
  bool strPath;
} _ThriftService_needAddFullBackup_args__isset;

class ThriftService_needAddFullBackup_args {
 public:

  ThriftService_needAddFullBackup_args() : strPath() {
  }

  virtual ~ThriftService_needAddFullBackup_args() throw() {}

  std::string strPath;

  _ThriftService_needAddFullBackup_args__isset __isset;

  void __set_strPath(const std::string& val) {
    strPath = val;
  }

  bool operator == (const ThriftService_needAddFullBackup_args & rhs) const
  {
    if (!(strPath == rhs.strPath))
      return false;
    return true;
  }
  bool operator != (const ThriftService_needAddFullBackup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_needAddFullBackup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_needAddFullBackup_pargs {
 public:


  virtual ~ThriftService_needAddFullBackup_pargs() throw() {}

  const std::string* strPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_needAddFullBackup_result__isset {
  _ThriftService_needAddFullBackup_result__isset() : success(false) {}
  bool success;
} _ThriftService_needAddFullBackup_result__isset;

class ThriftService_needAddFullBackup_result {
 public:

  ThriftService_needAddFullBackup_result() : success(0) {
  }

  virtual ~ThriftService_needAddFullBackup_result() throw() {}

  bool success;

  _ThriftService_needAddFullBackup_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ThriftService_needAddFullBackup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_needAddFullBackup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_needAddFullBackup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_needAddFullBackup_presult__isset {
  _ThriftService_needAddFullBackup_presult__isset() : success(false) {}
  bool success;
} _ThriftService_needAddFullBackup_presult__isset;

class ThriftService_needAddFullBackup_presult {
 public:


  virtual ~ThriftService_needAddFullBackup_presult() throw() {}

  bool* success;

  _ThriftService_needAddFullBackup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_addFullBackup_args__isset {
  _ThriftService_addFullBackup_args__isset() : strPath(false) {}
  bool strPath;
} _ThriftService_addFullBackup_args__isset;

class ThriftService_addFullBackup_args {
 public:

  ThriftService_addFullBackup_args() : strPath() {
  }

  virtual ~ThriftService_addFullBackup_args() throw() {}

  std::string strPath;

  _ThriftService_addFullBackup_args__isset __isset;

  void __set_strPath(const std::string& val) {
    strPath = val;
  }

  bool operator == (const ThriftService_addFullBackup_args & rhs) const
  {
    if (!(strPath == rhs.strPath))
      return false;
    return true;
  }
  bool operator != (const ThriftService_addFullBackup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_addFullBackup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_addFullBackup_pargs {
 public:


  virtual ~ThriftService_addFullBackup_pargs() throw() {}

  const std::string* strPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_addFullBackup_result__isset {
  _ThriftService_addFullBackup_result__isset() : success(false) {}
  bool success;
} _ThriftService_addFullBackup_result__isset;

class ThriftService_addFullBackup_result {
 public:

  ThriftService_addFullBackup_result() : success(0) {
  }

  virtual ~ThriftService_addFullBackup_result() throw() {}

  int32_t success;

  _ThriftService_addFullBackup_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ThriftService_addFullBackup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_addFullBackup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_addFullBackup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_addFullBackup_presult__isset {
  _ThriftService_addFullBackup_presult__isset() : success(false) {}
  bool success;
} _ThriftService_addFullBackup_presult__isset;

class ThriftService_addFullBackup_presult {
 public:


  virtual ~ThriftService_addFullBackup_presult() throw() {}

  int32_t* success;

  _ThriftService_addFullBackup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftServiceClient : virtual public ThriftServiceIf {
 public:
  ThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t getServiceStatus();
  void send_getServiceStatus();
  int32_t recv_getServiceStatus();
  int64_t getCurrentUserId();
  void send_getCurrentUserId();
  int64_t recv_getCurrentUserId();
  void listRemoteDir(std::vector<File_Node> & _return, const int64_t fileId, const int64_t userId, const int32_t userType);
  void send_listRemoteDir(const int64_t fileId, const int64_t userId, const int32_t userType);
  void recv_listRemoteDir(std::vector<File_Node> & _return);
  void listLocalDir(std::vector<File_Node> & _return, const std::string& localPath);
  void send_listLocalDir(const std::string& localPath);
  void recv_listLocalDir(std::vector<File_Node> & _return);
  void GetPathName(std::string& _return, const int64_t fileId);
  void send_GetPathName(const int64_t fileId);
  void recv_GetPathName(std::string& _return);
  int32_t upload(const std::string& localPath, const int64_t remoteParentId, const int64_t userId, const int32_t userType, const std::string& group);
  void send_upload(const std::string& localPath, const int64_t remoteParentId, const int64_t userId, const int32_t userType, const std::string& group);
  int32_t recv_upload();
  void getTask(TransTask_RootNode& _return, const std::string& group);
  void send_getTask(const std::string& group);
  void recv_getTask(TransTask_RootNode& _return);
  int32_t pauseTask(const std::string& group);
  void send_pauseTask(const std::string& group);
  int32_t recv_pauseTask();
  int32_t delTask(const std::string& group);
  void send_delTask(const std::string& group);
  int32_t recv_delTask();
  int32_t resumeTask(const std::string& group);
  void send_resumeTask(const std::string& group);
  int32_t recv_resumeTask();
  int32_t isTaskExist(const std::string& group);
  void send_isTaskExist(const std::string& group);
  int32_t recv_isTaskExist();
  void createShareLink(std::string& _return, const int64_t fileId);
  void send_createShareLink(const int64_t fileId);
  void recv_createShareLink(std::string& _return);
  int32_t addNotify(const int64_t handle);
  void send_addNotify(const int64_t handle);
  int32_t recv_addNotify();
  int32_t removeNotify(const int64_t handle);
  void send_removeNotify(const int64_t handle);
  int32_t recv_removeNotify();
  void listTeamspace(std::vector<TeamSpace_Node> & _return);
  void send_listTeamspace();
  void recv_listTeamspace(std::vector<TeamSpace_Node> & _return);
  int32_t sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5);
  void send_sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5);
  int32_t recv_sendMessage();
  void getNewName(std::string& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& defaultName);
  void send_getNewName(const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& defaultName);
  void recv_getNewName(std::string& _return);
  void createFolder(File_Node& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name);
  void send_createFolder(const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name);
  void recv_createFolder(File_Node& _return);
  void createFolderNoSync(File_Node& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name, const int32_t extraType);
  void send_createFolderNoSync(const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name, const int32_t extraType);
  void recv_createFolderNoSync(File_Node& _return);
  int32_t renameFolder(const int64_t userId, const int32_t userType, const int64_t fileId, const std::string& name);
  void send_renameFolder(const int64_t userId, const int32_t userType, const int64_t fileId, const std::string& name);
  int32_t recv_renameFolder();
  int32_t uploadOutlook(const std::string& localPath, const int64_t remoteParentId, const std::string& group);
  void send_uploadOutlook(const std::string& localPath, const int64_t remoteParentId, const std::string& group);
  int32_t recv_uploadOutlook();
  int32_t uploadOffice(const std::string& localPath, const int64_t remoteParentId, const std::string& group);
  void send_uploadOffice(const std::string& localPath, const int64_t remoteParentId, const std::string& group);
  int32_t recv_uploadOffice();
  bool needAddFullBackup(const std::string& strPath);
  void send_needAddFullBackup(const std::string& strPath);
  bool recv_needAddFullBackup();
  int32_t addFullBackup(const std::string& strPath);
  void send_addFullBackup(const std::string& strPath);
  int32_t recv_addFullBackup();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ThriftServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getServiceStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCurrentUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listRemoteDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listLocalDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPathName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pauseTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resumeTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isTaskExist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createShareLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addNotify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeNotify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listTeamspace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createFolder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createFolderNoSync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_renameFolder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadOutlook(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadOffice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_needAddFullBackup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addFullBackup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftServiceProcessor(boost::shared_ptr<ThriftServiceIf> iface) :
    iface_(iface) {
    processMap_["getServiceStatus"] = &ThriftServiceProcessor::process_getServiceStatus;
    processMap_["getCurrentUserId"] = &ThriftServiceProcessor::process_getCurrentUserId;
    processMap_["listRemoteDir"] = &ThriftServiceProcessor::process_listRemoteDir;
    processMap_["listLocalDir"] = &ThriftServiceProcessor::process_listLocalDir;
    processMap_["GetPathName"] = &ThriftServiceProcessor::process_GetPathName;
    processMap_["upload"] = &ThriftServiceProcessor::process_upload;
    processMap_["getTask"] = &ThriftServiceProcessor::process_getTask;
    processMap_["pauseTask"] = &ThriftServiceProcessor::process_pauseTask;
    processMap_["delTask"] = &ThriftServiceProcessor::process_delTask;
    processMap_["resumeTask"] = &ThriftServiceProcessor::process_resumeTask;
    processMap_["isTaskExist"] = &ThriftServiceProcessor::process_isTaskExist;
    processMap_["createShareLink"] = &ThriftServiceProcessor::process_createShareLink;
    processMap_["addNotify"] = &ThriftServiceProcessor::process_addNotify;
    processMap_["removeNotify"] = &ThriftServiceProcessor::process_removeNotify;
    processMap_["listTeamspace"] = &ThriftServiceProcessor::process_listTeamspace;
    processMap_["sendMessage"] = &ThriftServiceProcessor::process_sendMessage;
    processMap_["getNewName"] = &ThriftServiceProcessor::process_getNewName;
    processMap_["createFolder"] = &ThriftServiceProcessor::process_createFolder;
    processMap_["createFolderNoSync"] = &ThriftServiceProcessor::process_createFolderNoSync;
    processMap_["renameFolder"] = &ThriftServiceProcessor::process_renameFolder;
    processMap_["uploadOutlook"] = &ThriftServiceProcessor::process_uploadOutlook;
    processMap_["uploadOffice"] = &ThriftServiceProcessor::process_uploadOffice;
    processMap_["needAddFullBackup"] = &ThriftServiceProcessor::process_needAddFullBackup;
    processMap_["addFullBackup"] = &ThriftServiceProcessor::process_addFullBackup;
  }

  virtual ~ThriftServiceProcessor() {}
};

class ThriftServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftServiceProcessorFactory(const ::boost::shared_ptr< ThriftServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThriftServiceIfFactory > handlerFactory_;
};

class ThriftServiceMultiface : virtual public ThriftServiceIf {
 public:
  ThriftServiceMultiface(std::vector<boost::shared_ptr<ThriftServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftServiceIf> > ifaces_;
  ThriftServiceMultiface() {}
  void add(boost::shared_ptr<ThriftServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t getServiceStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceStatus();
    }
    return ifaces_[i]->getServiceStatus();
  }

  int64_t getCurrentUserId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentUserId();
    }
    return ifaces_[i]->getCurrentUserId();
  }

  void listRemoteDir(std::vector<File_Node> & _return, const int64_t fileId, const int64_t userId, const int32_t userType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listRemoteDir(_return, fileId, userId, userType);
    }
    ifaces_[i]->listRemoteDir(_return, fileId, userId, userType);
    return;
  }

  void listLocalDir(std::vector<File_Node> & _return, const std::string& localPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listLocalDir(_return, localPath);
    }
    ifaces_[i]->listLocalDir(_return, localPath);
    return;
  }

  void GetPathName(std::string& _return, const int64_t fileId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPathName(_return, fileId);
    }
    ifaces_[i]->GetPathName(_return, fileId);
    return;
  }

  int32_t upload(const std::string& localPath, const int64_t remoteParentId, const int64_t userId, const int32_t userType, const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload(localPath, remoteParentId, userId, userType, group);
    }
    return ifaces_[i]->upload(localPath, remoteParentId, userId, userType, group);
  }

  void getTask(TransTask_RootNode& _return, const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTask(_return, group);
    }
    ifaces_[i]->getTask(_return, group);
    return;
  }

  int32_t pauseTask(const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pauseTask(group);
    }
    return ifaces_[i]->pauseTask(group);
  }

  int32_t delTask(const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delTask(group);
    }
    return ifaces_[i]->delTask(group);
  }

  int32_t resumeTask(const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resumeTask(group);
    }
    return ifaces_[i]->resumeTask(group);
  }

  int32_t isTaskExist(const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isTaskExist(group);
    }
    return ifaces_[i]->isTaskExist(group);
  }

  void createShareLink(std::string& _return, const int64_t fileId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createShareLink(_return, fileId);
    }
    ifaces_[i]->createShareLink(_return, fileId);
    return;
  }

  int32_t addNotify(const int64_t handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addNotify(handle);
    }
    return ifaces_[i]->addNotify(handle);
  }

  int32_t removeNotify(const int64_t handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeNotify(handle);
    }
    return ifaces_[i]->removeNotify(handle);
  }

  void listTeamspace(std::vector<TeamSpace_Node> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listTeamspace(_return);
    }
    ifaces_[i]->listTeamspace(_return);
    return;
  }

  int32_t sendMessage(const int32_t type, const std::string& msg1, const std::string& msg2, const std::string& msg3, const std::string& msg4, const std::string& msg5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(type, msg1, msg2, msg3, msg4, msg5);
    }
    return ifaces_[i]->sendMessage(type, msg1, msg2, msg3, msg4, msg5);
  }

  void getNewName(std::string& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& defaultName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewName(_return, userId, userType, parentId, defaultName);
    }
    ifaces_[i]->getNewName(_return, userId, userType, parentId, defaultName);
    return;
  }

  void createFolder(File_Node& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createFolder(_return, userId, userType, parentId, name);
    }
    ifaces_[i]->createFolder(_return, userId, userType, parentId, name);
    return;
  }

  void createFolderNoSync(File_Node& _return, const int64_t userId, const int32_t userType, const int64_t parentId, const std::string& name, const int32_t extraType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createFolderNoSync(_return, userId, userType, parentId, name, extraType);
    }
    ifaces_[i]->createFolderNoSync(_return, userId, userType, parentId, name, extraType);
    return;
  }

  int32_t renameFolder(const int64_t userId, const int32_t userType, const int64_t fileId, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->renameFolder(userId, userType, fileId, name);
    }
    return ifaces_[i]->renameFolder(userId, userType, fileId, name);
  }

  int32_t uploadOutlook(const std::string& localPath, const int64_t remoteParentId, const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadOutlook(localPath, remoteParentId, group);
    }
    return ifaces_[i]->uploadOutlook(localPath, remoteParentId, group);
  }

  int32_t uploadOffice(const std::string& localPath, const int64_t remoteParentId, const std::string& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadOffice(localPath, remoteParentId, group);
    }
    return ifaces_[i]->uploadOffice(localPath, remoteParentId, group);
  }

  bool needAddFullBackup(const std::string& strPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->needAddFullBackup(strPath);
    }
    return ifaces_[i]->needAddFullBackup(strPath);
  }

  int32_t addFullBackup(const std::string& strPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addFullBackup(strPath);
    }
    return ifaces_[i]->addFullBackup(strPath);
  }

};

} // namespace

#endif
