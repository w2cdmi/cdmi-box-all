// Created by Microsoft (R) C/C++ Compiler Version 11.00.50727.1 (773e595a).
//
// d:\code\virtualdisk\v1r3\client\client_pc_v2\code\extensions\outlookextension\outlookaddin\debug\FM20.tlh
//
// C++ source equivalent of Win32 type library 0D452EE1-E08F-101A-852E-02608C4D0BB4
// compiler-generated file created 01/27/15 at 19:51:41 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Forms {

//
// Forward references and typedefs
//

struct __declspec(uuid("0d452ee1-e08f-101a-852e-02608c4d0bb4"))
/* LIBID */ __MSForms;
struct __declspec(uuid("bef6e003-a874-101a-8bba-00aa00300cab"))
/* dispinterface */ Font;
enum fmDropEffect;
enum fmAction;
struct __declspec(uuid("ec72f590-f375-11ce-b9e8-00aa006b1a69"))
/* dual interface */ IDataAutoWrapper;
struct __declspec(uuid("82b02370-b5bc-11cf-810f-00a0c9030074"))
/* dual interface */ IReturnInteger;
struct __declspec(uuid("82b02371-b5bc-11cf-810f-00a0c9030074"))
/* dual interface */ IReturnBoolean;
struct __declspec(uuid("82b02372-b5bc-11cf-810f-00a0c9030074"))
/* dual interface */ IReturnString;
struct __declspec(uuid("8a683c90-ba84-11cf-8110-00a0c9030074"))
/* dual interface */ IReturnSingle;
struct __declspec(uuid("8a683c91-ba84-11cf-8110-00a0c9030074"))
/* dual interface */ IReturnEffect;
struct /* coclass */ ReturnInteger;
struct /* coclass */ ReturnBoolean;
struct /* coclass */ ReturnString;
struct /* coclass */ ReturnSingle;
struct /* coclass */ ReturnEffect;
struct /* coclass */ DataObject;
enum fmMode;
enum fmMousePointer;
enum fmScrollBars;
enum fmScrollAction;
enum fmCycle;
enum fmZOrder;
enum fmBorderStyle;
enum fmTextAlign;
enum fmAlignment;
enum fmBorders;
enum fmBackStyle;
enum fmButtonStyle;
enum fmPicPosition;
enum fmVerticalScrollBarSide;
enum fmLayoutEffect;
enum fmSpecialEffect;
enum fmDragState;
enum fmPictureSizeMode;
enum fmPictureAlignment;
struct __declspec(uuid("04598fc6-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ IControl;
struct __declspec(uuid("04598fc7-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ Controls;
struct __declspec(uuid("29b86a70-f52e-11ce-9bce-00aa00608e01"))
/* dual interface */ IOptionFrame;
struct __declspec(uuid("04598fc8-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ _UserForm;
struct __declspec(uuid("9a4bbf53-4e46-101b-8bbd-00aa003e3b29"))
/* dispinterface */ ControlEvents;
struct /* coclass */ Control;
struct __declspec(uuid("5b9d8fc8-4a71-101b-97a6-00000b65c08b"))
/* dispinterface */ FormEvents;
struct __declspec(uuid("cf3f94a0-f546-11ce-9bce-00aa00608e01"))
/* dispinterface */ OptionFrameEvents;
struct /* coclass */ UserForm;
struct /* coclass */ Frame;
enum fmButtonEffect;
enum fmOrientation;
enum fmSnapPoint;
enum fmPicturePosition;
enum fmDisplayStyle;
enum fmShowListWhen;
enum fmShowDropButtonWhen;
enum fmMultiSelect;
enum fmListStyle;
enum fmEnterFieldBehavior;
enum fmDragBehavior;
enum fmMatchEntry;
enum fmDropButtonStyle;
enum fmStyle;
enum fmTabOrientation;
enum fmTabStyle;
enum fmIMEMode;
struct __declspec(uuid("04598fc1-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ ILabelControl;
struct __declspec(uuid("04598fc4-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ ICommandButton;
struct __declspec(uuid("8bd21d13-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcText;
struct __declspec(uuid("8bd21d23-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcList;
struct __declspec(uuid("8bd21d33-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcCombo;
struct __declspec(uuid("8bd21d43-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcCheckBox;
struct __declspec(uuid("8bd21d53-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcOptionButton;
struct __declspec(uuid("8bd21d63-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcToggleButton;
struct __declspec(uuid("04598fc3-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ IScrollbar;
struct __declspec(uuid("a38bffc3-a5a0-11ce-8107-00aa00611080"))
/* dual interface */ Tab;
struct __declspec(uuid("944acf93-a1e6-11ce-8104-00aa00611080"))
/* dual interface */ Tabs;
struct __declspec(uuid("04598fc2-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ ITabStrip;
struct __declspec(uuid("79176fb3-b7f2-11ce-97ef-00aa006d2776"))
/* dual interface */ ISpinbutton;
struct __declspec(uuid("4c599243-6926-101b-9992-00000b65c6f9"))
/* dual interface */ IImage;
struct __declspec(uuid("5512d111-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLSubmitButton;
struct __declspec(uuid("5512d113-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLImage;
struct __declspec(uuid("5512d115-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLReset;
struct __declspec(uuid("5512d117-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLCheckbox;
struct __declspec(uuid("5512d119-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLOption;
struct __declspec(uuid("5512d11b-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLText;
struct __declspec(uuid("5512d11d-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLHidden;
struct __declspec(uuid("5512d11f-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLPassword;
struct __declspec(uuid("5512d123-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLSelect;
struct __declspec(uuid("5512d125-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLTextArea;
struct __declspec(uuid("978c9e22-d4b0-11ce-bf2d-00aa003f40d0"))
/* dispinterface */ LabelControlEvents;
struct /* coclass */ Label;
struct __declspec(uuid("7b020ec1-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ CommandButtonEvents;
struct /* coclass */ CommandButton;
struct __declspec(uuid("8bd21d12-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcTextEvents;
struct /* coclass */ TextBox;
struct __declspec(uuid("8bd21d22-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcListEvents;
struct /* coclass */ ListBox;
struct __declspec(uuid("8bd21d32-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcComboEvents;
struct /* coclass */ ComboBox;
struct __declspec(uuid("8bd21d42-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcCheckBoxEvents;
struct __declspec(uuid("8bd21d52-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcOptionButtonEvents;
struct __declspec(uuid("8bd21d62-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcToggleButtonEvents;
struct /* coclass */ CheckBox;
struct /* coclass */ OptionButton;
struct /* coclass */ ToggleButton;
struct /* coclass */ NewFont;
struct __declspec(uuid("7b020ec2-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ ScrollbarEvents;
struct /* coclass */ ScrollBar;
struct __declspec(uuid("7b020ec7-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ TabStripEvents;
struct /* coclass */ TabStrip;
struct __declspec(uuid("79176fb2-b7f2-11ce-97ef-00aa006d2776"))
/* dispinterface */ SpinbuttonEvents;
struct /* coclass */ SpinButton;
struct __declspec(uuid("4c5992a5-6926-101b-9992-00000b65c6f9"))
/* dispinterface */ ImageEvents;
struct /* coclass */ Image;
struct __declspec(uuid("796ed650-5fe9-11cf-8d68-00aa00bdce1d"))
/* dispinterface */ WHTMLControlEvents;
struct __declspec(uuid("47ff8fe0-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents1;
struct __declspec(uuid("47ff8fe1-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents2;
struct __declspec(uuid("47ff8fe2-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents3;
struct __declspec(uuid("47ff8fe3-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents4;
struct __declspec(uuid("47ff8fe4-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents5;
struct __declspec(uuid("47ff8fe5-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents6;
struct __declspec(uuid("47ff8fe6-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents7;
struct __declspec(uuid("47ff8fe8-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents9;
struct __declspec(uuid("47ff8fe9-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents10;
struct /* coclass */ HTMLSubmit;
struct /* coclass */ HTMLImage;
struct /* coclass */ HTMLReset;
struct /* coclass */ HTMLCheckbox;
struct /* coclass */ HTMLOption;
struct /* coclass */ HTMLText;
struct /* coclass */ HTMLHidden;
struct /* coclass */ HTMLPassword;
struct /* coclass */ HTMLSelect;
struct /* coclass */ HTMLTextArea;
enum fmTransitionEffect;
struct __declspec(uuid("5cef5613-713d-11ce-80c9-00aa00611080"))
/* dual interface */ IPage;
struct __declspec(uuid("92e11a03-7358-11ce-80cb-00aa00611080"))
/* dual interface */ Pages;
struct __declspec(uuid("04598fc9-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ IMultiPage;
struct __declspec(uuid("7b020ec8-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ MultiPageEvents;
struct /* coclass */ MultiPage;
struct /* coclass */ Page;
enum fmListBoxStyles;
enum fmRepeatDirection;
enum fmEnAutoSize;
typedef long OLE_COLOR;
typedef long OLE_HANDLE;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef IUnknown * PIROWSET;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(IDataAutoWrapper, __uuidof(IDataAutoWrapper));
_COM_SMARTPTR_TYPEDEF(IReturnInteger, __uuidof(IReturnInteger));
_COM_SMARTPTR_TYPEDEF(IReturnBoolean, __uuidof(IReturnBoolean));
_COM_SMARTPTR_TYPEDEF(IReturnString, __uuidof(IReturnString));
_COM_SMARTPTR_TYPEDEF(IReturnSingle, __uuidof(IReturnSingle));
_COM_SMARTPTR_TYPEDEF(IReturnEffect, __uuidof(IReturnEffect));
_COM_SMARTPTR_TYPEDEF(IControl, __uuidof(IControl));
_COM_SMARTPTR_TYPEDEF(ControlEvents, __uuidof(ControlEvents));
_COM_SMARTPTR_TYPEDEF(Controls, __uuidof(Controls));
_COM_SMARTPTR_TYPEDEF(IOptionFrame, __uuidof(IOptionFrame));
_COM_SMARTPTR_TYPEDEF(_UserForm, __uuidof(_UserForm));
_COM_SMARTPTR_TYPEDEF(FormEvents, __uuidof(FormEvents));
_COM_SMARTPTR_TYPEDEF(OptionFrameEvents, __uuidof(OptionFrameEvents));
_COM_SMARTPTR_TYPEDEF(ILabelControl, __uuidof(ILabelControl));
_COM_SMARTPTR_TYPEDEF(ICommandButton, __uuidof(ICommandButton));
_COM_SMARTPTR_TYPEDEF(IMdcText, __uuidof(IMdcText));
_COM_SMARTPTR_TYPEDEF(IMdcList, __uuidof(IMdcList));
_COM_SMARTPTR_TYPEDEF(IMdcCombo, __uuidof(IMdcCombo));
_COM_SMARTPTR_TYPEDEF(IMdcCheckBox, __uuidof(IMdcCheckBox));
_COM_SMARTPTR_TYPEDEF(IMdcOptionButton, __uuidof(IMdcOptionButton));
_COM_SMARTPTR_TYPEDEF(IMdcToggleButton, __uuidof(IMdcToggleButton));
_COM_SMARTPTR_TYPEDEF(IScrollbar, __uuidof(IScrollbar));
_COM_SMARTPTR_TYPEDEF(Tab, __uuidof(Tab));
_COM_SMARTPTR_TYPEDEF(Tabs, __uuidof(Tabs));
_COM_SMARTPTR_TYPEDEF(ITabStrip, __uuidof(ITabStrip));
_COM_SMARTPTR_TYPEDEF(ISpinbutton, __uuidof(ISpinbutton));
_COM_SMARTPTR_TYPEDEF(IImage, __uuidof(IImage));
_COM_SMARTPTR_TYPEDEF(IWHTMLSubmitButton, __uuidof(IWHTMLSubmitButton));
_COM_SMARTPTR_TYPEDEF(IWHTMLImage, __uuidof(IWHTMLImage));
_COM_SMARTPTR_TYPEDEF(IWHTMLReset, __uuidof(IWHTMLReset));
_COM_SMARTPTR_TYPEDEF(IWHTMLCheckbox, __uuidof(IWHTMLCheckbox));
_COM_SMARTPTR_TYPEDEF(IWHTMLOption, __uuidof(IWHTMLOption));
_COM_SMARTPTR_TYPEDEF(IWHTMLText, __uuidof(IWHTMLText));
_COM_SMARTPTR_TYPEDEF(IWHTMLHidden, __uuidof(IWHTMLHidden));
_COM_SMARTPTR_TYPEDEF(IWHTMLPassword, __uuidof(IWHTMLPassword));
_COM_SMARTPTR_TYPEDEF(IWHTMLSelect, __uuidof(IWHTMLSelect));
_COM_SMARTPTR_TYPEDEF(IWHTMLTextArea, __uuidof(IWHTMLTextArea));
_COM_SMARTPTR_TYPEDEF(LabelControlEvents, __uuidof(LabelControlEvents));
_COM_SMARTPTR_TYPEDEF(CommandButtonEvents, __uuidof(CommandButtonEvents));
_COM_SMARTPTR_TYPEDEF(MdcTextEvents, __uuidof(MdcTextEvents));
_COM_SMARTPTR_TYPEDEF(MdcListEvents, __uuidof(MdcListEvents));
_COM_SMARTPTR_TYPEDEF(MdcComboEvents, __uuidof(MdcComboEvents));
_COM_SMARTPTR_TYPEDEF(MdcCheckBoxEvents, __uuidof(MdcCheckBoxEvents));
_COM_SMARTPTR_TYPEDEF(MdcOptionButtonEvents, __uuidof(MdcOptionButtonEvents));
_COM_SMARTPTR_TYPEDEF(MdcToggleButtonEvents, __uuidof(MdcToggleButtonEvents));
_COM_SMARTPTR_TYPEDEF(ScrollbarEvents, __uuidof(ScrollbarEvents));
_COM_SMARTPTR_TYPEDEF(TabStripEvents, __uuidof(TabStripEvents));
_COM_SMARTPTR_TYPEDEF(SpinbuttonEvents, __uuidof(SpinbuttonEvents));
_COM_SMARTPTR_TYPEDEF(ImageEvents, __uuidof(ImageEvents));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents, __uuidof(WHTMLControlEvents));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents1, __uuidof(WHTMLControlEvents1));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents2, __uuidof(WHTMLControlEvents2));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents3, __uuidof(WHTMLControlEvents3));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents4, __uuidof(WHTMLControlEvents4));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents5, __uuidof(WHTMLControlEvents5));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents6, __uuidof(WHTMLControlEvents6));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents7, __uuidof(WHTMLControlEvents7));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents9, __uuidof(WHTMLControlEvents9));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents10, __uuidof(WHTMLControlEvents10));
_COM_SMARTPTR_TYPEDEF(IPage, __uuidof(IPage));
_COM_SMARTPTR_TYPEDEF(MultiPageEvents, __uuidof(MultiPageEvents));
_COM_SMARTPTR_TYPEDEF(Pages, __uuidof(Pages));
_COM_SMARTPTR_TYPEDEF(IMultiPage, __uuidof(IMultiPage));

//
// Type library items
//

struct __declspec(uuid("bef6e003-a874-101a-8bba-00aa00300cab"))
Font : IDispatch
{};

enum __declspec(uuid("10bb4720-f797-11ce-b9ec-00aa006b1a69"))
fmDropEffect
{
    fmDropEffectNone = 0,
    fmDropEffectCopy = 1,
    fmDropEffectMove = 2,
    fmDropEffectCopyOrMove = 3
};

enum __declspec(uuid("570c03e0-f797-11ce-b9ec-00aa006b1a69"))
fmAction
{
    fmActionCut = 0,
    fmActionCopy = 1,
    fmActionPaste = 2,
    fmActionDragDrop = 3
};

struct __declspec(uuid("ec72f590-f375-11ce-b9e8-00aa006b1a69"))
IDataAutoWrapper : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall GetFormat (
        /*[in]*/ VARIANT Format,
        /*[out,retval]*/ VARIANT_BOOL * Support ) = 0;
      virtual HRESULT __stdcall GetText (
        /*[in]*/ VARIANT Format,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall SetText (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall PutInClipboard ( ) = 0;
      virtual HRESULT __stdcall GetFromClipboard ( ) = 0;
      virtual HRESULT __stdcall StartDrag (
        /*[in]*/ VARIANT OKEffect,
        /*[out,retval]*/ enum fmDropEffect * Effect ) = 0;
};

struct __declspec(uuid("82b02370-b5bc-11cf-810f-00a0c9030074"))
IReturnInteger : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ int Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ int * Value ) = 0;
};

struct __declspec(uuid("82b02371-b5bc-11cf-810f-00a0c9030074"))
IReturnBoolean : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("82b02372-b5bc-11cf-810f-00a0c9030074"))
IReturnString : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("8a683c90-ba84-11cf-8110-00a0c9030074"))
IReturnSingle : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ float * Value ) = 0;
};

struct __declspec(uuid("8a683c91-ba84-11cf-8110-00a0c9030074"))
IReturnEffect : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ enum fmDropEffect Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ enum fmDropEffect * Value ) = 0;
};

struct __declspec(uuid("82b02373-b5bc-11cf-810f-00a0c9030074"))
ReturnInteger;
    // [ default ] interface IReturnInteger

struct __declspec(uuid("82b02374-b5bc-11cf-810f-00a0c9030074"))
ReturnBoolean;
    // [ default ] interface IReturnBoolean

struct __declspec(uuid("82b02375-b5bc-11cf-810f-00a0c9030074"))
ReturnString;
    // [ default ] interface IReturnString

struct __declspec(uuid("8a683c92-ba84-11cf-8110-00a0c9030074"))
ReturnSingle;
    // [ default ] interface IReturnSingle

struct __declspec(uuid("8a683c93-ba84-11cf-8110-00a0c9030074"))
ReturnEffect;
    // [ default ] interface IReturnEffect

struct __declspec(uuid("1c3b4210-f441-11ce-b9ea-00aa006b1a69"))
DataObject;
    // [ default ] interface IDataAutoWrapper

enum __declspec(uuid("c63bd250-bcaa-11ce-b64d-00aa004cd6d8"))
fmMode
{
    fmModeInherit = -2,
    fmModeOn = -1,
    fmModeOff = 0
};

enum __declspec(uuid("593104f8-16ba-101b-989c-00006b82871a"))
fmMousePointer
{
    fmMousePointerDefault = 0,
    fmMousePointerArrow = 1,
    fmMousePointerCross = 2,
    fmMousePointerIBeam = 3,
    fmMousePointerSizeNESW = 6,
    fmMousePointerSizeNS = 7,
    fmMousePointerSizeNWSE = 8,
    fmMousePointerSizeWE = 9,
    fmMousePointerUpArrow = 10,
    fmMousePointerHourGlass = 11,
    fmMousePointerNoDrop = 12,
    fmMousePointerAppStarting = 13,
    fmMousePointerHelp = 14,
    fmMousePointerSizeAll = 15,
    fmMousePointerCustom = 99
};

enum __declspec(uuid("5931055e-16ba-101b-989c-00006b82871a"))
fmScrollBars
{
    fmScrollBarsNone = 0,
    fmScrollBarsHorizontal = 1,
    fmScrollBarsVertical = 2,
    fmScrollBarsBoth = 3
};

enum __declspec(uuid("e0abc3c0-d199-11ce-8cce-00aa0044bb60"))
fmScrollAction
{
    fmScrollActionNoChange = 0,
    fmScrollActionLineUp = 1,
    fmScrollActionLineDown = 2,
    fmScrollActionPageUp = 3,
    fmScrollActionPageDown = 4,
    fmScrollActionBegin = 5,
    fmScrollActionEnd = 6,
    _fmScrollActionAbsoluteChange = 7,
    fmScrollActionPropertyChange = 8,
    fmScrollActionControlRequest = 9,
    fmScrollActionFocusRequest = 10
};

enum __declspec(uuid("3dbdd630-dd73-11ce-8cd1-00aa0044bb60"))
fmCycle
{
    fmCycleAllForms = 0,
    fmCycleCurrentForm = 2
};

enum __declspec(uuid("14c73c30-1612-11ce-9e98-00aa00574a4f"))
fmZOrder
{
    fmZOrderFront = 0,
    fmZOrderBack = 1
};

enum __declspec(uuid("5931055c-16ba-101b-989c-00006b82871a"))
fmBorderStyle
{
    fmBorderStyleNone = 0,
    fmBorderStyleSingle = 1
};

enum __declspec(uuid("66baac90-7c2a-11ce-b783-00aa004ba6ae"))
fmTextAlign
{
    fmTextAlignLeft = 1,
    fmTextAlignCenter = 2,
    fmTextAlignRight = 3
};

enum __declspec(uuid("cd474e84-a35f-101a-beb9-00006b827da8"))
fmAlignment
{
    fmAlignmentLeft = 0,
    fmAlignmentRight = 1
};

enum __declspec(uuid("e1fc1640-70df-101b-bc16-00aa003e3b29"))
fmBorders
{
    fmBordersNone = 0,
    fmBordersBox = 1,
    fmBordersLeft = 2,
    fmBordersTop = 3
};

enum __declspec(uuid("1afb3130-c129-11cd-a777-00dd01143c57"))
fmBackStyle
{
    fmBackStyleTransparent = 0,
    fmBackStyleOpaque = 1
};

enum __declspec(uuid("fde774c0-9aa8-11cd-84db-00006b82871a"))
fmButtonStyle
{
    fmButtonStylePushButton = 0,
    fmButtonStyleToggleButton = 1
};

enum __declspec(uuid("9011f7a0-c130-11cd-9be1-00006b82871a"))
fmPicPosition
{
    fmPicPositionCenter = 0,
    fmPicPositionTopLeft = 1,
    fmPicPositionTopCenter = 2,
    fmPicPositionTopRight = 3,
    fmPicPositionCenterLeft = 4,
    fmPicPositionCenterRight = 5,
    fmPicPositionBottomLeft = 6,
    fmPicPositionBottomCenter = 7,
    fmPicPositionBottomRight = 8
};

enum __declspec(uuid("d625ca10-cc59-11ce-b653-00aa004cd6d8"))
fmVerticalScrollBarSide
{
    fmVerticalScrollBarSideRight = 0,
    fmVerticalScrollBarSideLeft = 1
};

enum __declspec(uuid("02dfd4f0-ea2b-11ce-8043-00aa006009fa"))
fmLayoutEffect
{
    fmLayoutEffectNone = 0,
    fmLayoutEffectInitiate = 1,
    _fmLayoutEffectRespond = 2
};

enum __declspec(uuid("a7946240-ea45-11ce-8043-00aa006009fa"))
fmSpecialEffect
{
    fmSpecialEffectFlat = 0,
    fmSpecialEffectRaised = 1,
    fmSpecialEffectSunken = 2,
    fmSpecialEffectEtched = 3,
    fmSpecialEffectBump = 6
};

enum __declspec(uuid("82074c80-ea51-11ce-8043-00aa006009fa"))
fmDragState
{
    fmDragStateEnter = 0,
    fmDragStateLeave = 1,
    fmDragStateOver = 2
};

enum __declspec(uuid("53327010-e90b-11ce-9e0b-00aa006002f3"))
fmPictureSizeMode
{
    fmPictureSizeModeClip = 0,
    fmPictureSizeModeStretch = 1,
    fmPictureSizeModeZoom = 3
};

enum __declspec(uuid("3574bbe0-f520-11ce-83f6-00aa00479846"))
fmPictureAlignment
{
    fmPictureAlignmentTopLeft = 0,
    fmPictureAlignmentTopRight = 1,
    fmPictureAlignmentCenter = 2,
    fmPictureAlignmentBottomLeft = 3,
    fmPictureAlignmentBottomRight = 4
};

struct __declspec(uuid("04598fc6-866c-11cf-ab7c-00aa00c08fcf"))
IControl : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Cancel (
        /*[in]*/ VARIANT_BOOL Cancel ) = 0;
      virtual HRESULT __stdcall get_Cancel (
        /*[out,retval]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall put_ControlSource (
        /*[in]*/ BSTR ControlSource ) = 0;
      virtual HRESULT __stdcall get_ControlSource (
        /*[out,retval]*/ BSTR * ControlSource ) = 0;
      virtual HRESULT __stdcall put_ControlTipText (
        /*[in]*/ BSTR ControlTipText ) = 0;
      virtual HRESULT __stdcall get_ControlTipText (
        /*[out,retval]*/ BSTR * ControlTipText ) = 0;
      virtual HRESULT __stdcall put_Default (
        /*[in]*/ VARIANT_BOOL Default ) = 0;
      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ VARIANT_BOOL * Default ) = 0;
      virtual HRESULT __stdcall _SetHeight (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall _GetHeight (
        /*[out]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long HelpContextID ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * HelpContextID ) = 0;
      virtual HRESULT __stdcall put_InSelection (
        /*[in]*/ VARIANT_BOOL InSelection ) = 0;
      virtual HRESULT __stdcall get_InSelection (
        /*[out,retval]*/ VARIANT_BOOL * InSelection ) = 0;
      virtual HRESULT __stdcall get_LayoutEffect (
        /*[out,retval]*/ enum fmLayoutEffect * LayoutEffect ) = 0;
      virtual HRESULT __stdcall _SetLeft (
        /*[in]*/ long Left ) = 0;
      virtual HRESULT __stdcall _GetLeft (
        /*[out]*/ long * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall _GetOldHeight (
        /*[out]*/ long * OldHeight ) = 0;
      virtual HRESULT __stdcall get_OldHeight (
        /*[out,retval]*/ float * OldHeight ) = 0;
      virtual HRESULT __stdcall _GetOldLeft (
        /*[out]*/ long * OldLeft ) = 0;
      virtual HRESULT __stdcall get_OldLeft (
        /*[out,retval]*/ float * OldLeft ) = 0;
      virtual HRESULT __stdcall _GetOldTop (
        /*[out]*/ long * OldTop ) = 0;
      virtual HRESULT __stdcall get_OldTop (
        /*[out,retval]*/ float * OldTop ) = 0;
      virtual HRESULT __stdcall _GetOldWidth (
        /*[out]*/ long * OldWidth ) = 0;
      virtual HRESULT __stdcall get_OldWidth (
        /*[out,retval]*/ float * OldWidth ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall put_RowSource (
        /*[in]*/ BSTR RowSource ) = 0;
      virtual HRESULT __stdcall get_RowSource (
        /*[out,retval]*/ BSTR * RowSource ) = 0;
      virtual HRESULT __stdcall put_RowSourceType (
        /*[in]*/ short RowSourceType ) = 0;
      virtual HRESULT __stdcall get_RowSourceType (
        /*[out,retval]*/ short * RowSourceType ) = 0;
      virtual HRESULT __stdcall put_TabIndex (
        /*[in]*/ short TabIndex ) = 0;
      virtual HRESULT __stdcall get_TabIndex (
        /*[out,retval]*/ short * TabIndex ) = 0;
      virtual HRESULT __stdcall put_TabStop (
        /*[in]*/ VARIANT_BOOL TabStop ) = 0;
      virtual HRESULT __stdcall get_TabStop (
        /*[out,retval]*/ VARIANT_BOOL * TabStop ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall _SetTop (
        /*[in]*/ long Top ) = 0;
      virtual HRESULT __stdcall _GetTop (
        /*[out]*/ long * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_BoundValue (
        /*[in]*/ VARIANT * BoundValue ) = 0;
      virtual HRESULT __stdcall get_BoundValue (
        /*[out,retval]*/ VARIANT * BoundValue ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall _SetWidth (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall _GetWidth (
        /*[out]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall Move (
        /*[in]*/ VARIANT Left = vtMissing,
        /*[in]*/ VARIANT Top = vtMissing,
        /*[in]*/ VARIANT Width = vtMissing,
        /*[in]*/ VARIANT Height = vtMissing,
        /*[in]*/ VARIANT Layout = vtMissing ) = 0;
      virtual HRESULT __stdcall ZOrder (
        /*[in]*/ VARIANT zPosition = vtMissing ) = 0;
      virtual HRESULT __stdcall Select (
        /*[in]*/ VARIANT_BOOL SelectInGroup ) = 0;
      virtual HRESULT __stdcall SetFocus ( ) = 0;
      virtual HRESULT __stdcall _GethWnd (
        /*[out,retval]*/ int * hWnd ) = 0;
      virtual HRESULT __stdcall _GetID (
        /*[out,retval]*/ long * ID ) = 0;
      virtual HRESULT __stdcall _Move (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall _ZOrder (
        /*[in]*/ enum fmZOrder zPosition ) = 0;
};

struct __declspec(uuid("9a4bbf53-4e46-101b-8bbd-00aa003e3b29"))
ControlEvents : IDispatch
{};

struct __declspec(uuid("909e0ae0-16dc-11ce-9e98-00aa00574a4f"))
Control;
    // [ default ] interface IControl
    // [ default, source ] dispinterface ControlEvents

struct __declspec(uuid("04598fc7-866c-11cf-ab7c-00aa00c08fcf"))
Controls : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall Item (
        /*[in]*/ VARIANT varg,
        /*[out,retval]*/ IDispatch * * ppDispatch ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall _Move (
        /*[in]*/ long cx,
        /*[in]*/ long cy ) = 0;
      virtual HRESULT __stdcall SelectAll ( ) = 0;
      virtual HRESULT __stdcall _AddByClass (
        /*[in]*/ long * clsid,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall AlignToGrid ( ) = 0;
      virtual HRESULT __stdcall BringForward ( ) = 0;
      virtual HRESULT __stdcall BringToFront ( ) = 0;
      virtual HRESULT __stdcall Copy ( ) = 0;
      virtual HRESULT __stdcall Cut ( ) = 0;
      virtual HRESULT __stdcall Enum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall _GetItemByIndex (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall _GetItemByName (
        /*[in]*/ BSTR pstr,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall _GetItemByID (
        /*[in]*/ long ID,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall SendBackward ( ) = 0;
      virtual HRESULT __stdcall SendToBack ( ) = 0;
      virtual HRESULT __stdcall Move (
        /*[in]*/ float cx,
        /*[in]*/ float cy ) = 0;
      virtual HRESULT __stdcall Add (
        /*[in]*/ BSTR bstrProgID,
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Visible,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ VARIANT varg ) = 0;
};

struct __declspec(uuid("29b86a70-f52e-11ce-9bce-00aa00608e01"))
IOptionFrame : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActiveControl (
        /*[out,retval]*/ struct IControl * * ActiveControl ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall get_CanRedo (
        /*[out,retval]*/ VARIANT_BOOL * CanRedo ) = 0;
      virtual HRESULT __stdcall get_CanUndo (
        /*[out,retval]*/ VARIANT_BOOL * CanUndo ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct Controls * * Controls ) = 0;
      virtual HRESULT __stdcall put_Cycle (
        /*[in]*/ enum fmCycle Cycle ) = 0;
      virtual HRESULT __stdcall get_Cycle (
        /*[out,retval]*/ enum fmCycle * Cycle ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall _GetInsideHeight (
        /*[out]*/ long * InsideHeight ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ float * InsideHeight ) = 0;
      virtual HRESULT __stdcall _GetInsideWidth (
        /*[out]*/ long * InsideWidth ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ float * InsideWidth ) = 0;
      virtual HRESULT __stdcall put_KeepScrollBarsVisible (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_KeepScrollBarsVisible (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_PictureAlignment (
        /*[in]*/ enum fmPictureAlignment PictureAlignment ) = 0;
      virtual HRESULT __stdcall get_PictureAlignment (
        /*[out,retval]*/ enum fmPictureAlignment * PictureAlignment ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PictureSizeMode (
        /*[in]*/ enum fmPictureSizeMode PictureSizeMode ) = 0;
      virtual HRESULT __stdcall get_PictureSizeMode (
        /*[out,retval]*/ enum fmPictureSizeMode * PictureSizeMode ) = 0;
      virtual HRESULT __stdcall put_PictureTiling (
        /*[in]*/ VARIANT_BOOL PictureTiling ) = 0;
      virtual HRESULT __stdcall get_PictureTiling (
        /*[out,retval]*/ VARIANT_BOOL * PictureTiling ) = 0;
      virtual HRESULT __stdcall put_ScrollBars (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_ScrollBars (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall _SetScrollHeight (
        /*[in]*/ long ScrollHeight ) = 0;
      virtual HRESULT __stdcall _GetScrollHeight (
        /*[out]*/ long * ScrollHeight ) = 0;
      virtual HRESULT __stdcall put_ScrollHeight (
        /*[in]*/ float ScrollHeight ) = 0;
      virtual HRESULT __stdcall get_ScrollHeight (
        /*[out,retval]*/ float * ScrollHeight ) = 0;
      virtual HRESULT __stdcall _SetScrollLeft (
        /*[in]*/ long ScrollLeft ) = 0;
      virtual HRESULT __stdcall _GetScrollLeft (
        /*[out]*/ long * ScrollLeft ) = 0;
      virtual HRESULT __stdcall put_ScrollLeft (
        /*[in]*/ float ScrollLeft ) = 0;
      virtual HRESULT __stdcall get_ScrollLeft (
        /*[out,retval]*/ float * ScrollLeft ) = 0;
      virtual HRESULT __stdcall _SetScrollTop (
        /*[in]*/ long ScrollTop ) = 0;
      virtual HRESULT __stdcall _GetScrollTop (
        /*[out]*/ long * ScrollTop ) = 0;
      virtual HRESULT __stdcall put_ScrollTop (
        /*[in]*/ float ScrollTop ) = 0;
      virtual HRESULT __stdcall get_ScrollTop (
        /*[out,retval]*/ float * ScrollTop ) = 0;
      virtual HRESULT __stdcall _SetScrollWidth (
        /*[in]*/ long ScrollWidth ) = 0;
      virtual HRESULT __stdcall _GetScrollWidth (
        /*[out]*/ long * ScrollWidth ) = 0;
      virtual HRESULT __stdcall put_ScrollWidth (
        /*[in]*/ float ScrollWidth ) = 0;
      virtual HRESULT __stdcall get_ScrollWidth (
        /*[out,retval]*/ float * ScrollWidth ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ struct Controls * * Selected ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_VerticalScrollBarSide (
        /*[in]*/ enum fmVerticalScrollBarSide side ) = 0;
      virtual HRESULT __stdcall get_VerticalScrollBarSide (
        /*[out,retval]*/ enum fmVerticalScrollBarSide * side ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ short Zoom ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ short * Zoom ) = 0;
      virtual HRESULT __stdcall Copy ( ) = 0;
      virtual HRESULT __stdcall Cut ( ) = 0;
      virtual HRESULT __stdcall Paste ( ) = 0;
      virtual HRESULT __stdcall RedoAction ( ) = 0;
      virtual HRESULT __stdcall Repaint ( ) = 0;
      virtual HRESULT __stdcall Scroll (
        /*[in]*/ VARIANT xAction = vtMissing,
        /*[in]*/ VARIANT yAction = vtMissing ) = 0;
      virtual HRESULT __stdcall SetDefaultTabOrder ( ) = 0;
      virtual HRESULT __stdcall UndoAction ( ) = 0;
      virtual HRESULT __stdcall put_DesignMode (
        /*[in]*/ enum fmMode DesignMode ) = 0;
      virtual HRESULT __stdcall get_DesignMode (
        /*[out,retval]*/ enum fmMode * DesignMode ) = 0;
      virtual HRESULT __stdcall put_ShowToolbox (
        /*[in]*/ enum fmMode ShowToolbox ) = 0;
      virtual HRESULT __stdcall get_ShowToolbox (
        /*[out,retval]*/ enum fmMode * ShowToolbox ) = 0;
      virtual HRESULT __stdcall put_ShowGridDots (
        /*[in]*/ enum fmMode ShowGridDots ) = 0;
      virtual HRESULT __stdcall get_ShowGridDots (
        /*[out,retval]*/ enum fmMode * ShowGridDots ) = 0;
      virtual HRESULT __stdcall put_SnapToGrid (
        /*[in]*/ enum fmMode SnapToGrid ) = 0;
      virtual HRESULT __stdcall get_SnapToGrid (
        /*[out,retval]*/ enum fmMode * SnapToGrid ) = 0;
      virtual HRESULT __stdcall put_GridX (
        /*[in]*/ float GridX ) = 0;
      virtual HRESULT __stdcall get_GridX (
        /*[out,retval]*/ float * GridX ) = 0;
      virtual HRESULT __stdcall _SetGridX (
        /*[in]*/ long GridX ) = 0;
      virtual HRESULT __stdcall _GetGridX (
        /*[out]*/ long * GridX ) = 0;
      virtual HRESULT __stdcall put_GridY (
        /*[in]*/ float GridY ) = 0;
      virtual HRESULT __stdcall get_GridY (
        /*[out,retval]*/ float * GridY ) = 0;
      virtual HRESULT __stdcall _SetGridY (
        /*[in]*/ long GridY ) = 0;
      virtual HRESULT __stdcall _GetGridY (
        /*[out]*/ long * GridY ) = 0;
};

struct __declspec(uuid("04598fc8-866c-11cf-ab7c-00aa00c08fcf"))
_UserForm : IOptionFrame
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DrawBuffer (
        /*[in]*/ long DrawBuffer ) = 0;
      virtual HRESULT __stdcall get_DrawBuffer (
        /*[out,retval]*/ long * DrawBuffer ) = 0;
};

struct __declspec(uuid("5b9d8fc8-4a71-101b-97a6-00000b65c08b"))
FormEvents : IDispatch
{};

struct __declspec(uuid("cf3f94a0-f546-11ce-9bce-00aa00608e01"))
OptionFrameEvents : IDispatch
{};

struct __declspec(uuid("c62a69f0-16dc-11ce-9e98-00aa00574a4f"))
UserForm;
    // [ default ] interface _UserForm
    // [ default, source ] dispinterface FormEvents

struct __declspec(uuid("6e182020-f460-11ce-9bcd-00aa00608e01"))
Frame;
    // [ default ] interface IOptionFrame
    // [ default, source ] dispinterface OptionFrameEvents

enum __declspec(uuid("317a54c0-c7b1-11ce-9afd-00aa00600ab8"))
fmButtonEffect
{
    fmButtonEffectFlat = 0,
    fmButtonEffectSunken = 2
};

enum __declspec(uuid("16e571e0-040b-11cf-8283-00aa004ba6ae"))
fmOrientation
{
    fmOrientationAuto = -1,
    fmOrientationVertical = 0,
    fmOrientationHorizontal = 1
};

enum __declspec(uuid("317a54c1-c7b1-11ce-9afd-00aa00600ab8"))
fmSnapPoint
{
    fmSnapPointTopLeft = 0,
    fmSnapPointTopCenter = 1,
    fmSnapPointTopRight = 2,
    fmSnapPointCenterLeft = 3,
    fmSnapPointCenter = 4,
    fmSnapPointCenterRight = 5,
    fmSnapPointBottomLeft = 6,
    fmSnapPointBottomCenter = 7,
    fmSnapPointBottomRight = 8
};

enum __declspec(uuid("317a54c2-c7b1-11ce-9afd-00aa00600ab8"))
fmPicturePosition
{
    fmPicturePositionLeftTop = 0,
    fmPicturePositionLeftCenter = 1,
    fmPicturePositionLeftBottom = 2,
    fmPicturePositionRightTop = 3,
    fmPicturePositionRightCenter = 4,
    fmPicturePositionRightBottom = 5,
    fmPicturePositionAboveLeft = 6,
    fmPicturePositionAboveCenter = 7,
    fmPicturePositionAboveRight = 8,
    fmPicturePositionBelowLeft = 9,
    fmPicturePositionBelowCenter = 10,
    fmPicturePositionBelowRight = 11,
    fmPicturePositionCenter = 12
};

enum __declspec(uuid("a4069f25-4221-11ce-8ea0-00aa004ba6ae"))
fmDisplayStyle
{
    fmDisplayStyleText = 1,
    fmDisplayStyleList = 2,
    fmDisplayStyleCombo = 3,
    fmDisplayStyleCheckBox = 4,
    fmDisplayStyleOptionButton = 5,
    fmDisplayStyleToggle = 6,
    fmDisplayStyleDropList = 7
};

enum __declspec(uuid("a4069f24-4221-11ce-8ea0-00aa004ba6ae"))
fmShowListWhen
{
    fmShowListWhenNever = 0,
    fmShowListWhenButton = 1,
    fmShowListWhenFocus = 2,
    fmShowListWhenAlways = 3
};

enum __declspec(uuid("c5d98c41-4eb2-11ce-8ea0-00aa004ba6ae"))
fmShowDropButtonWhen
{
    fmShowDropButtonWhenNever = 0,
    fmShowDropButtonWhenFocus = 1,
    fmShowDropButtonWhenAlways = 2
};

enum __declspec(uuid("f00164c0-b17b-11ce-a95d-00aa006cb389"))
fmMultiSelect
{
    fmMultiSelectSingle = 0,
    fmMultiSelectMulti = 1,
    fmMultiSelectExtended = 2
};

enum __declspec(uuid("f00164c1-b17b-11ce-a95d-00aa006cb389"))
fmListStyle
{
    fmListStylePlain = 0,
    fmListStyleOption = 1
};

enum __declspec(uuid("6a7167f1-2432-11cf-956f-00aa004b9dfa"))
fmEnterFieldBehavior
{
    fmEnterFieldBehaviorSelectAll = 0,
    fmEnterFieldBehaviorRecallSelection = 1
};

enum __declspec(uuid("e25eb550-24f6-11cf-a6e2-00aa00c0098d"))
fmDragBehavior
{
    fmDragBehaviorDisabled = 0,
    fmDragBehaviorEnabled = 1
};

enum __declspec(uuid("8ccd0ac2-b1ad-11ce-8276-00aa004ba6ae"))
fmMatchEntry
{
    fmMatchEntryFirstLetter = 0,
    fmMatchEntryComplete = 1,
    fmMatchEntryNone = 2
};

enum __declspec(uuid("14d122b0-c6e7-11ce-827c-00aa004ba6ae"))
fmDropButtonStyle
{
    fmDropButtonStylePlain = 0,
    fmDropButtonStyleArrow = 1,
    fmDropButtonStyleEllipsis = 2,
    fmDropButtonStyleReduce = 3
};

enum __declspec(uuid("9c37f9d0-fde5-11ce-9560-00aa004b9dfa"))
fmStyle
{
    fmStyleDropDownCombo = 0,
    fmStyleDropDownList = 2
};

enum __declspec(uuid("ebc7fde1-6899-11ce-80c0-00aa00611080"))
fmTabOrientation
{
    fmTabOrientationTop = 0,
    fmTabOrientationBottom = 1,
    fmTabOrientationLeft = 2,
    fmTabOrientationRight = 3
};

enum __declspec(uuid("ebc7fde3-6899-11ce-80c0-00aa00611080"))
fmTabStyle
{
    fmTabStyleTabs = 0,
    fmTabStyleButtons = 1,
    fmTabStyleNone = 2
};

enum __declspec(uuid("4d067cd0-0d74-11cf-b474-00aa006eb734"))
fmIMEMode
{
    fmIMEModeNoControl = 0,
    fmIMEModeOn = 1,
    fmIMEModeOff = 2,
    fmIMEModeDisable = 3,
    fmIMEModeHiragana = 4,
    fmIMEModeKatakana = 5,
    fmIMEModeKatakanaHalf = 6,
    fmIMEModeAlphaFull = 7,
    fmIMEModeAlpha = 8,
    fmIMEModeHangulFull = 9,
    fmIMEModeHangul = 10,
    fmIMEModeHanziFull = 11,
    fmIMEModeHanzi = 12
};

struct __declspec(uuid("04598fc1-866c-11cf-ab7c-00aa00c08fcf"))
ILabelControl : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL fvbAutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * fvbAutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR bstrCaption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * pPicture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * pPicture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * pPicture ) = 0;
      virtual HRESULT __stdcall put_PicturePosition (
        /*[in]*/ enum fmPicturePosition PicPos ) = 0;
      virtual HRESULT __stdcall get_PicturePosition (
        /*[out,retval]*/ enum fmPicturePosition * PicPos ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put__Value (
        /*[in]*/ BSTR bstrCaption ) = 0;
      virtual HRESULT __stdcall get__Value (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
};

struct __declspec(uuid("04598fc4-866c-11cf-ab7c-00aa00c08fcf"))
ICommandButton : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL fvbAutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * fvbAutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR bstrCaption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_TakeFocusOnClick (
        /*[in]*/ VARIANT_BOOL TakeFocusOnClick ) = 0;
      virtual HRESULT __stdcall get_TakeFocusOnClick (
        /*[out,retval]*/ VARIANT_BOOL * TakeFocusOnClick ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL fLocked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * fLocked ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer mouseptr ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * mouseptr ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PicturePosition (
        /*[in]*/ enum fmPicturePosition PicturePosition ) = 0;
      virtual HRESULT __stdcall get_PicturePosition (
        /*[out,retval]*/ enum fmPicturePosition * PicturePosition ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT_BOOL fValue ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * fValue ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
};

struct __declspec(uuid("8bd21d13-ec42-11ce-9e0d-00aa006002f3"))
IMdcText : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL AutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoTab (
        /*[in]*/ VARIANT_BOOL AutoTab ) = 0;
      virtual HRESULT __stdcall get_AutoTab (
        /*[out,retval]*/ VARIANT_BOOL * AutoTab ) = 0;
      virtual HRESULT __stdcall put_AutoWordSelect (
        /*[in]*/ VARIANT_BOOL AutoWordSelect ) = 0;
      virtual HRESULT __stdcall get_AutoWordSelect (
        /*[out,retval]*/ VARIANT_BOOL * AutoWordSelect ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall put_CurLine (
        /*[in]*/ long CurLine ) = 0;
      virtual HRESULT __stdcall get_CurLine (
        /*[out,retval]*/ long * CurLine ) = 0;
      virtual HRESULT __stdcall get_CurTargetX (
        /*[out,retval]*/ long * CurTargetX ) = 0;
      virtual HRESULT __stdcall get_CurTargetY (
        /*[out,retval]*/ long * CurTargetY ) = 0;
      virtual HRESULT __stdcall put_CurX (
        /*[in]*/ long CurX ) = 0;
      virtual HRESULT __stdcall get_CurX (
        /*[out,retval]*/ long * CurX ) = 0;
      virtual HRESULT __stdcall put_CurY (
        /*[in]*/ long CurY ) = 0;
      virtual HRESULT __stdcall get_CurY (
        /*[out,retval]*/ long * CurY ) = 0;
      virtual HRESULT __stdcall put_DropButtonStyle (
        /*[in]*/ enum fmDropButtonStyle DropButtonStyle ) = 0;
      virtual HRESULT __stdcall get_DropButtonStyle (
        /*[out,retval]*/ enum fmDropButtonStyle * DropButtonStyle ) = 0;
      virtual HRESULT __stdcall put_EnterKeyBehavior (
        /*[in]*/ VARIANT_BOOL EnterKeyBehavior ) = 0;
      virtual HRESULT __stdcall get_EnterKeyBehavior (
        /*[out,retval]*/ VARIANT_BOOL * EnterKeyBehavior ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_HideSelection (
        /*[in]*/ VARIANT_BOOL HideSelection ) = 0;
      virtual HRESULT __stdcall get_HideSelection (
        /*[out,retval]*/ VARIANT_BOOL * HideSelection ) = 0;
      virtual HRESULT __stdcall put_IntegralHeight (
        /*[in]*/ VARIANT_BOOL IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_IntegralHeight (
        /*[out,retval]*/ VARIANT_BOOL * IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_LineCount (
        /*[out,retval]*/ long * LineCount ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL MultiLine ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * MultiLine ) = 0;
      virtual HRESULT __stdcall put_PasswordChar (
        /*[in]*/ BSTR PasswordChar ) = 0;
      virtual HRESULT __stdcall get_PasswordChar (
        /*[out,retval]*/ BSTR * PasswordChar ) = 0;
      virtual HRESULT __stdcall put_ScrollBars (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_ScrollBars (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall put_SelectionMargin (
        /*[in]*/ VARIANT_BOOL SelectionMargin ) = 0;
      virtual HRESULT __stdcall get_SelectionMargin (
        /*[out,retval]*/ VARIANT_BOOL * SelectionMargin ) = 0;
      virtual HRESULT __stdcall put_SelLength (
        /*[in]*/ long SelLength ) = 0;
      virtual HRESULT __stdcall get_SelLength (
        /*[out,retval]*/ long * SelLength ) = 0;
      virtual HRESULT __stdcall put_SelStart (
        /*[in]*/ long SelStart ) = 0;
      virtual HRESULT __stdcall get_SelStart (
        /*[out,retval]*/ long * SelStart ) = 0;
      virtual HRESULT __stdcall put_SelText (
        /*[in]*/ BSTR SelText ) = 0;
      virtual HRESULT __stdcall get_SelText (
        /*[out,retval]*/ BSTR * SelText ) = 0;
      virtual HRESULT __stdcall put_ShowDropButtonWhen (
        /*[in]*/ enum fmShowDropButtonWhen ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall get_ShowDropButtonWhen (
        /*[out,retval]*/ enum fmShowDropButtonWhen * ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_TabKeyBehavior (
        /*[in]*/ VARIANT_BOOL TabKeyBehavior ) = 0;
      virtual HRESULT __stdcall get_TabKeyBehavior (
        /*[out,retval]*/ VARIANT_BOOL * TabKeyBehavior ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextLength (
        /*[out,retval]*/ long * TextLength ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall Copy ( ) = 0;
      virtual HRESULT __stdcall Cut ( ) = 0;
      virtual HRESULT __stdcall Paste ( ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ enum fmIMEMode IMEMode ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ enum fmIMEMode * IMEMode ) = 0;
      virtual HRESULT __stdcall put_EnterFieldBehavior (
        /*[in]*/ enum fmEnterFieldBehavior EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall get_EnterFieldBehavior (
        /*[out,retval]*/ enum fmEnterFieldBehavior * EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall put_DragBehavior (
        /*[in]*/ enum fmDragBehavior DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DragBehavior (
        /*[out,retval]*/ enum fmDragBehavior * DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
};

struct __declspec(uuid("8bd21d23-ec42-11ce-9e0d-00aa006002f3"))
IMdcList : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall put_BoundColumn (
        /*[in]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall get_BoundColumn (
        /*[out,retval]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall put_ColumnCount (
        /*[in]*/ long ColumnCount ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * ColumnCount ) = 0;
      virtual HRESULT __stdcall put_ColumnHeads (
        /*[in]*/ VARIANT_BOOL ColumnHeads ) = 0;
      virtual HRESULT __stdcall get_ColumnHeads (
        /*[out,retval]*/ VARIANT_BOOL * ColumnHeads ) = 0;
      virtual HRESULT __stdcall put_ColumnWidths (
        /*[in]*/ BSTR ColumnWidths ) = 0;
      virtual HRESULT __stdcall get_ColumnWidths (
        /*[out,retval]*/ BSTR * ColumnWidths ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_IntegralHeight (
        /*[in]*/ VARIANT_BOOL IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_IntegralHeight (
        /*[out,retval]*/ VARIANT_BOOL * IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * ListCount ) = 0;
      virtual HRESULT __stdcall put_ListCursor (
        /*[in]*/ PIROWSET ListCursor ) = 0;
      virtual HRESULT __stdcall get_ListCursor (
        /*[out,retval]*/ PIROWSET * ListCursor ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall put_ListStyle (
        /*[in]*/ enum fmListStyle ListStyle ) = 0;
      virtual HRESULT __stdcall get_ListStyle (
        /*[out,retval]*/ enum fmListStyle * ListStyle ) = 0;
      virtual HRESULT __stdcall put_ListWidth (
        /*[in]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall get_ListWidth (
        /*[out,retval]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MatchEntry (
        /*[in]*/ enum fmMatchEntry MatchEntry ) = 0;
      virtual HRESULT __stdcall get_MatchEntry (
        /*[out,retval]*/ enum fmMatchEntry * MatchEntry ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ enum fmMultiSelect MultiSelect ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ enum fmMultiSelect * MultiSelect ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TextColumn (
        /*[in]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall get_TextColumn (
        /*[out,retval]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall put_TopIndex (
        /*[in]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_TopIndex (
        /*[out,retval]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT * pvargIndex,
        /*[out,retval]*/ VARIANT_BOOL * pfvb ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT_BOOL pfvb ) = 0;
      virtual HRESULT __stdcall AddItem (
        /*[in]*/ VARIANT * pvargItem = &vtMissing,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall RemoveItem (
        /*[in]*/ VARIANT * pvargIndex ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ enum fmIMEMode IMEMode ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ enum fmIMEMode * IMEMode ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
};

struct __declspec(uuid("8bd21d33-ec42-11ce-9e0d-00aa006002f3"))
IMdcCombo : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL AutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoTab (
        /*[in]*/ VARIANT_BOOL AutoTab ) = 0;
      virtual HRESULT __stdcall get_AutoTab (
        /*[out,retval]*/ VARIANT_BOOL * AutoTab ) = 0;
      virtual HRESULT __stdcall put_AutoWordSelect (
        /*[in]*/ VARIANT_BOOL AutoWordSelect ) = 0;
      virtual HRESULT __stdcall get_AutoWordSelect (
        /*[out,retval]*/ VARIANT_BOOL * AutoWordSelect ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall put_BoundColumn (
        /*[in]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall get_BoundColumn (
        /*[out,retval]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall put_ColumnCount (
        /*[in]*/ long ColumnCount ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * ColumnCount ) = 0;
      virtual HRESULT __stdcall put_ColumnHeads (
        /*[in]*/ VARIANT_BOOL ColumnHeads ) = 0;
      virtual HRESULT __stdcall get_ColumnHeads (
        /*[out,retval]*/ VARIANT_BOOL * ColumnHeads ) = 0;
      virtual HRESULT __stdcall put_ColumnWidths (
        /*[in]*/ BSTR ColumnWidths ) = 0;
      virtual HRESULT __stdcall get_ColumnWidths (
        /*[out,retval]*/ BSTR * ColumnWidths ) = 0;
      virtual HRESULT __stdcall get_CurTargetX (
        /*[out,retval]*/ long * CurTargetX ) = 0;
      virtual HRESULT __stdcall get_CurTargetY (
        /*[out,retval]*/ long * CurTargetY ) = 0;
      virtual HRESULT __stdcall put_CurX (
        /*[in]*/ long CurX ) = 0;
      virtual HRESULT __stdcall get_CurX (
        /*[out,retval]*/ long * CurX ) = 0;
      virtual HRESULT __stdcall put_DropButtonStyle (
        /*[in]*/ enum fmDropButtonStyle DropButtonStyle ) = 0;
      virtual HRESULT __stdcall get_DropButtonStyle (
        /*[out,retval]*/ enum fmDropButtonStyle * DropButtonStyle ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_HideSelection (
        /*[in]*/ VARIANT_BOOL HideSelection ) = 0;
      virtual HRESULT __stdcall get_HideSelection (
        /*[out,retval]*/ VARIANT_BOOL * HideSelection ) = 0;
      virtual HRESULT __stdcall get_LineCount (
        /*[out,retval]*/ long * LineCount ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * ListCount ) = 0;
      virtual HRESULT __stdcall put_ListCursor (
        /*[in]*/ PIROWSET ListCursor ) = 0;
      virtual HRESULT __stdcall get_ListCursor (
        /*[out,retval]*/ PIROWSET * ListCursor ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall put_ListRows (
        /*[in]*/ long ListRows ) = 0;
      virtual HRESULT __stdcall get_ListRows (
        /*[out,retval]*/ long * ListRows ) = 0;
      virtual HRESULT __stdcall put_ListStyle (
        /*[in]*/ enum fmListStyle ListStyle ) = 0;
      virtual HRESULT __stdcall get_ListStyle (
        /*[out,retval]*/ enum fmListStyle * ListStyle ) = 0;
      virtual HRESULT __stdcall put_ListWidth (
        /*[in]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall get_ListWidth (
        /*[out,retval]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MatchEntry (
        /*[in]*/ enum fmMatchEntry MatchEntry ) = 0;
      virtual HRESULT __stdcall get_MatchEntry (
        /*[out,retval]*/ enum fmMatchEntry * MatchEntry ) = 0;
      virtual HRESULT __stdcall get_MatchFound (
        /*[out,retval]*/ VARIANT_BOOL * MatchFound ) = 0;
      virtual HRESULT __stdcall put_MatchRequired (
        /*[in]*/ VARIANT_BOOL MatchRequired ) = 0;
      virtual HRESULT __stdcall get_MatchRequired (
        /*[out,retval]*/ VARIANT_BOOL * MatchRequired ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_SelectionMargin (
        /*[in]*/ VARIANT_BOOL SelectionMargin ) = 0;
      virtual HRESULT __stdcall get_SelectionMargin (
        /*[out,retval]*/ VARIANT_BOOL * SelectionMargin ) = 0;
      virtual HRESULT __stdcall put_SelLength (
        /*[in]*/ long SelLength ) = 0;
      virtual HRESULT __stdcall get_SelLength (
        /*[out,retval]*/ long * SelLength ) = 0;
      virtual HRESULT __stdcall put_SelStart (
        /*[in]*/ long SelStart ) = 0;
      virtual HRESULT __stdcall get_SelStart (
        /*[out,retval]*/ long * SelStart ) = 0;
      virtual HRESULT __stdcall put_SelText (
        /*[in]*/ BSTR SelText ) = 0;
      virtual HRESULT __stdcall get_SelText (
        /*[out,retval]*/ BSTR * SelText ) = 0;
      virtual HRESULT __stdcall put_ShowDropButtonWhen (
        /*[in]*/ enum fmShowDropButtonWhen ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall get_ShowDropButtonWhen (
        /*[out,retval]*/ enum fmShowDropButtonWhen * ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum fmStyle Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum fmStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
      virtual HRESULT __stdcall put_TextColumn (
        /*[in]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall get_TextColumn (
        /*[out,retval]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall get_TextLength (
        /*[out,retval]*/ long * TextLength ) = 0;
      virtual HRESULT __stdcall put_TopIndex (
        /*[in]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_TopIndex (
        /*[out,retval]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall AddItem (
        /*[in]*/ VARIANT * pvargItem = &vtMissing,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall DropDown ( ) = 0;
      virtual HRESULT __stdcall RemoveItem (
        /*[in]*/ VARIANT * pvargIndex ) = 0;
      virtual HRESULT __stdcall Copy ( ) = 0;
      virtual HRESULT __stdcall Cut ( ) = 0;
      virtual HRESULT __stdcall Paste ( ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ enum fmIMEMode IMEMode ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ enum fmIMEMode * IMEMode ) = 0;
      virtual HRESULT __stdcall put_EnterFieldBehavior (
        /*[in]*/ enum fmEnterFieldBehavior EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall get_EnterFieldBehavior (
        /*[out,retval]*/ enum fmEnterFieldBehavior * EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall put_DragBehavior (
        /*[in]*/ enum fmDragBehavior DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DragBehavior (
        /*[out,retval]*/ enum fmDragBehavior * DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
};

struct __declspec(uuid("8bd21d43-ec42-11ce-9e0d-00aa006002f3"))
IMdcCheckBox : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum fmAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum fmAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL AutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * AutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ enum fmMultiSelect MultiSelect ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ enum fmMultiSelect * MultiSelect ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PicturePosition (
        /*[in]*/ enum fmPicturePosition PicPos ) = 0;
      virtual HRESULT __stdcall get_PicturePosition (
        /*[out,retval]*/ enum fmPicturePosition * PicPos ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmButtonEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmButtonEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_TripleState (
        /*[in]*/ VARIANT_BOOL TripleState ) = 0;
      virtual HRESULT __stdcall get_TripleState (
        /*[out,retval]*/ VARIANT_BOOL * TripleState ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
      virtual HRESULT __stdcall put_GroupName (
        /*[in]*/ BSTR GroupName ) = 0;
      virtual HRESULT __stdcall get_GroupName (
        /*[out,retval]*/ BSTR * GroupName ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
};

struct __declspec(uuid("8bd21d53-ec42-11ce-9e0d-00aa006002f3"))
IMdcOptionButton : IMdcCheckBox
{};

struct __declspec(uuid("8bd21d63-ec42-11ce-9e0d-00aa006002f3"))
IMdcToggleButton : IMdcCheckBox
{};

struct __declspec(uuid("04598fc3-866c-11cf-ab7c-00aa00c08fcf"))
IScrollbar : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long Min ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * Min ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * Max ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long SmallChange ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * SmallChange ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long LargeChange ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * LargeChange ) = 0;
      virtual HRESULT __stdcall put_ProportionalThumb (
        /*[in]*/ VARIANT_BOOL ProportionalThumb ) = 0;
      virtual HRESULT __stdcall get_ProportionalThumb (
        /*[out,retval]*/ VARIANT_BOOL * ProportionalThumb ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum fmOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum fmOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Delay ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Delay ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
};

struct __declspec(uuid("a38bffc3-a5a0-11ce-8107-00aa00611080"))
Tab : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_ControlTipText (
        /*[in]*/ BSTR ControlTipText ) = 0;
      virtual HRESULT __stdcall get_ControlTipText (
        /*[out,retval]*/ BSTR * ControlTipText ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
};

struct __declspec(uuid("944acf93-a1e6-11ce-8104-00aa00611080"))
Tabs : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall _GetItemByIndex (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall _GetItemByName (
        /*[in]*/ BSTR bstr,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall Item (
        /*[in]*/ VARIANT varg,
        /*[out,retval]*/ IDispatch * * ppDisp ) = 0;
      virtual HRESULT __stdcall Enum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall Add (
        /*[in]*/ VARIANT bstrName,
        /*[in]*/ VARIANT bstrCaption,
        /*[in]*/ VARIANT lIndex,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall _Add (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall _Insert (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ VARIANT varg ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
};

struct __declspec(uuid("04598fc2-866c-11cf-ab7c-00aa00c08fcf"))
ITabStrip : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnder ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnder ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrike ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrike ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fnabled ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiRow (
        /*[in]*/ VARIANT_BOOL MultiRow ) = 0;
      virtual HRESULT __stdcall get_MultiRow (
        /*[out,retval]*/ VARIANT_BOOL * MultiRow ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum fmTabStyle TabStyle ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum fmTabStyle * TabStyle ) = 0;
      virtual HRESULT __stdcall put_TabOrientation (
        /*[in]*/ enum fmTabOrientation TabOrientation ) = 0;
      virtual HRESULT __stdcall get_TabOrientation (
        /*[out,retval]*/ enum fmTabOrientation * TabOrientation ) = 0;
      virtual HRESULT __stdcall _SetTabFixedWidth (
        /*[in]*/ long TabFixedWidth ) = 0;
      virtual HRESULT __stdcall _GetTabFixedWidth (
        /*[out]*/ long * TabFixedWidth ) = 0;
      virtual HRESULT __stdcall _SetTabFixedHeight (
        /*[in]*/ long TabFixedHeight ) = 0;
      virtual HRESULT __stdcall _GetTabFixedHeight (
        /*[out]*/ long * TabFixedHeight ) = 0;
      virtual HRESULT __stdcall _GetClientTop (
        /*[out]*/ long * ClientTop ) = 0;
      virtual HRESULT __stdcall get_ClientTop (
        /*[out,retval]*/ float * ClientTop ) = 0;
      virtual HRESULT __stdcall _GetClientLeft (
        /*[out]*/ long * ClientLeft ) = 0;
      virtual HRESULT __stdcall get_ClientLeft (
        /*[out,retval]*/ float * ClientLeft ) = 0;
      virtual HRESULT __stdcall _GetClientWidth (
        /*[out]*/ long * ClientWidth ) = 0;
      virtual HRESULT __stdcall get_ClientWidth (
        /*[out,retval]*/ float * ClientWidth ) = 0;
      virtual HRESULT __stdcall _GetClientHeight (
        /*[out]*/ long * ClientHeight ) = 0;
      virtual HRESULT __stdcall get_ClientHeight (
        /*[out,retval]*/ float * ClientHeight ) = 0;
      virtual HRESULT __stdcall get_Tabs (
        /*[out,retval]*/ struct Tabs * * Tabs ) = 0;
      virtual HRESULT __stdcall get_SelectedItem (
        /*[out,retval]*/ struct Tab * * ActiveTab ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_TabFixedWidth (
        /*[in]*/ float TabFixedWidth ) = 0;
      virtual HRESULT __stdcall get_TabFixedWidth (
        /*[out,retval]*/ float * TabFixedWidth ) = 0;
      virtual HRESULT __stdcall put_TabFixedHeight (
        /*[in]*/ float TabFixedHeight ) = 0;
      virtual HRESULT __stdcall get_TabFixedHeight (
        /*[out,retval]*/ float * TabFixedHeight ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
};

struct __declspec(uuid("79176fb3-b7f2-11ce-97ef-00aa006d2776"))
ISpinbutton : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long Min ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * Min ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * Max ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long SmallChange ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * SmallChange ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum fmOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum fmOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Delay ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Delay ) = 0;
};

struct __declspec(uuid("4c599243-6926-101b-9992-00000b65c6f9"))
IImage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL fAutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * fAutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle Style ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_PictureSizeMode (
        /*[in]*/ enum fmPictureSizeMode PictureSizeMode ) = 0;
      virtual HRESULT __stdcall get_PictureSizeMode (
        /*[out,retval]*/ enum fmPictureSizeMode * PictureSizeMode ) = 0;
      virtual HRESULT __stdcall put_PictureAlignment (
        /*[in]*/ enum fmPictureAlignment PictureAlignment ) = 0;
      virtual HRESULT __stdcall get_PictureAlignment (
        /*[out,retval]*/ enum fmPictureAlignment * PictureAlignment ) = 0;
      virtual HRESULT __stdcall put_PictureTiling (
        /*[in]*/ VARIANT_BOOL PictureTiling ) = 0;
      virtual HRESULT __stdcall get_PictureTiling (
        /*[out,retval]*/ VARIANT_BOOL * PictureTiling ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
};

struct __declspec(uuid("5512d111-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLSubmitButton : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Action (
        /*[in]*/ BSTR Action ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ BSTR * Action ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ BSTR Encoding ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ BSTR * Encoding ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ BSTR Method ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ BSTR * Method ) = 0;
      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d113-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLImage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Action (
        /*[in]*/ BSTR Action ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ BSTR * Action ) = 0;
      virtual HRESULT __stdcall put_Source (
        /*[in]*/ BSTR Source ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ BSTR * Source ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ BSTR Encoding ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ BSTR * Encoding ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ BSTR Method ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ BSTR * Method ) = 0;
      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d115-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLReset : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d117-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLCheckbox : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL Checked ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * Checked ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d119-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLOption : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL Checked ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * Checked ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
};

struct __declspec(uuid("5512d11b-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLText : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d11d-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLHidden : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d11f-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLPassword : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d123-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLSelect : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall put_DisplayValues (
        /*[in]*/ VARIANT * DisplayValues ) = 0;
      virtual HRESULT __stdcall get_DisplayValues (
        /*[out,retval]*/ VARIANT * DisplayValues ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ BSTR Selected ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ BSTR * Selected ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ VARIANT_BOOL MultiSelect ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ VARIANT_BOOL * MultiSelect ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
};

struct __declspec(uuid("5512d125-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLTextArea : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Rows (
        /*[in]*/ long Rows ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ long * Rows ) = 0;
      virtual HRESULT __stdcall put_Columns (
        /*[in]*/ long Columns ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ long * Columns ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ BSTR WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ BSTR * WordWrap ) = 0;
};

struct __declspec(uuid("978c9e22-d4b0-11ce-bf2d-00aa003f40d0"))
LabelControlEvents : IDispatch
{};

struct __declspec(uuid("978c9e23-d4b0-11ce-bf2d-00aa003f40d0"))
Label;
    // [ default ] interface ILabelControl
    // [ default, source ] dispinterface LabelControlEvents

struct __declspec(uuid("7b020ec1-af6c-11ce-9f46-00aa00574a4f"))
CommandButtonEvents : IDispatch
{};

struct __declspec(uuid("d7053240-ce69-11cd-a777-00dd01143c57"))
CommandButton;
    // [ default ] interface ICommandButton
    // [ default, source ] dispinterface CommandButtonEvents

struct __declspec(uuid("8bd21d12-ec42-11ce-9e0d-00aa006002f3"))
MdcTextEvents : IDispatch
{};

struct __declspec(uuid("8bd21d10-ec42-11ce-9e0d-00aa006002f3"))
TextBox;
    // [ default ] interface IMdcText
    // [ default, source ] dispinterface MdcTextEvents

struct __declspec(uuid("8bd21d22-ec42-11ce-9e0d-00aa006002f3"))
MdcListEvents : IDispatch
{};

struct __declspec(uuid("8bd21d20-ec42-11ce-9e0d-00aa006002f3"))
ListBox;
    // [ default ] interface IMdcList
    // [ default, source ] dispinterface MdcListEvents

struct __declspec(uuid("8bd21d32-ec42-11ce-9e0d-00aa006002f3"))
MdcComboEvents : IDispatch
{};

struct __declspec(uuid("8bd21d30-ec42-11ce-9e0d-00aa006002f3"))
ComboBox;
    // [ default ] interface IMdcCombo
    // [ default, source ] dispinterface MdcComboEvents

struct __declspec(uuid("8bd21d42-ec42-11ce-9e0d-00aa006002f3"))
MdcCheckBoxEvents : IDispatch
{};

struct __declspec(uuid("8bd21d52-ec42-11ce-9e0d-00aa006002f3"))
MdcOptionButtonEvents : IDispatch
{};

struct __declspec(uuid("8bd21d62-ec42-11ce-9e0d-00aa006002f3"))
MdcToggleButtonEvents : IDispatch
{};

struct __declspec(uuid("8bd21d40-ec42-11ce-9e0d-00aa006002f3"))
CheckBox;
    // [ default ] interface IMdcCheckBox
    // [ default, source ] dispinterface MdcCheckBoxEvents

struct __declspec(uuid("8bd21d50-ec42-11ce-9e0d-00aa006002f3"))
OptionButton;
    // [ default ] interface IMdcOptionButton
    // [ default, source ] dispinterface MdcOptionButtonEvents

struct __declspec(uuid("8bd21d60-ec42-11ce-9e0d-00aa006002f3"))
ToggleButton;
    // [ default ] interface IMdcToggleButton
    // [ default, source ] dispinterface MdcToggleButtonEvents

struct __declspec(uuid("afc20920-da4e-11ce-b943-00aa006887b4"))
NewFont;
    // interface IUnknown
    // [ default ] dispinterface Font

struct __declspec(uuid("7b020ec2-af6c-11ce-9f46-00aa00574a4f"))
ScrollbarEvents : IDispatch
{};

struct __declspec(uuid("dfd181e0-5e2f-11ce-a449-00aa004a803d"))
ScrollBar;
    // [ default ] interface IScrollbar
    // [ default, source ] dispinterface ScrollbarEvents

struct __declspec(uuid("7b020ec7-af6c-11ce-9f46-00aa00574a4f"))
TabStripEvents : IDispatch
{};

struct __declspec(uuid("eae50eb0-4a62-11ce-bed6-00aa00611080"))
TabStrip;
    // [ default ] interface ITabStrip
    // [ default, source ] dispinterface TabStripEvents

struct __declspec(uuid("79176fb2-b7f2-11ce-97ef-00aa006d2776"))
SpinbuttonEvents : IDispatch
{};

struct __declspec(uuid("79176fb0-b7f2-11ce-97ef-00aa006d2776"))
SpinButton;
    // [ default ] interface ISpinbutton
    // [ default, source ] dispinterface SpinbuttonEvents

struct __declspec(uuid("4c5992a5-6926-101b-9992-00000b65c6f9"))
ImageEvents : IDispatch
{};

struct __declspec(uuid("4c599241-6926-101b-9992-00000b65c6f9"))
Image;
    // [ default ] interface IImage
    // [ default, source ] dispinterface ImageEvents

struct __declspec(uuid("796ed650-5fe9-11cf-8d68-00aa00bdce1d"))
WHTMLControlEvents : IDispatch
{};

struct __declspec(uuid("47ff8fe0-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents1 : IDispatch
{};

struct __declspec(uuid("47ff8fe1-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents2 : IDispatch
{};

struct __declspec(uuid("47ff8fe2-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents3 : IDispatch
{};

struct __declspec(uuid("47ff8fe3-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents4 : IDispatch
{};

struct __declspec(uuid("47ff8fe4-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents5 : IDispatch
{};

struct __declspec(uuid("47ff8fe5-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents6 : IDispatch
{};

struct __declspec(uuid("47ff8fe6-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents7 : IDispatch
{};

struct __declspec(uuid("47ff8fe8-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents9 : IDispatch
{};

struct __declspec(uuid("47ff8fe9-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents10 : IDispatch
{};

struct __declspec(uuid("5512d110-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLSubmit;
    // [ default ] interface IWHTMLSubmitButton
    // [ default, source ] dispinterface WHTMLControlEvents

struct __declspec(uuid("5512d112-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLImage;
    // [ default ] interface IWHTMLImage
    // [ default, source ] dispinterface WHTMLControlEvents1

struct __declspec(uuid("5512d114-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLReset;
    // [ default ] interface IWHTMLReset
    // [ default, source ] dispinterface WHTMLControlEvents2

struct __declspec(uuid("5512d116-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLCheckbox;
    // [ default ] interface IWHTMLCheckbox
    // [ default, source ] dispinterface WHTMLControlEvents3

struct __declspec(uuid("5512d118-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLOption;
    // [ default ] interface IWHTMLOption
    // [ default, source ] dispinterface WHTMLControlEvents4

struct __declspec(uuid("5512d11a-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLText;
    // [ default ] interface IWHTMLText
    // [ default, source ] dispinterface WHTMLControlEvents5

struct __declspec(uuid("5512d11c-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLHidden;
    // [ default ] interface IWHTMLHidden
    // [ default, source ] dispinterface WHTMLControlEvents6

struct __declspec(uuid("5512d11e-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLPassword;
    // [ default ] interface IWHTMLPassword
    // [ default, source ] dispinterface WHTMLControlEvents7

struct __declspec(uuid("5512d122-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLSelect;
    // [ default ] interface IWHTMLSelect
    // [ default, source ] dispinterface WHTMLControlEvents9

struct __declspec(uuid("5512d124-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLTextArea;
    // [ default ] interface IWHTMLTextArea
    // [ default, source ] dispinterface WHTMLControlEvents10

enum __declspec(uuid("0ee49f40-e956-11ce-8141-00aa00611080"))
fmTransitionEffect
{
    fmTransitionEffectNone = 0,
    fmTransitionEffectCoverUp = 1,
    fmTransitionEffectCoverRightUp = 2,
    fmTransitionEffectCoverRight = 3,
    fmTransitionEffectCoverRightDown = 4,
    fmTransitionEffectCoverDown = 5,
    fmTransitionEffectCoverLeftDown = 6,
    fmTransitionEffectCoverLeft = 7,
    fmTransitionEffectCoverLeftUp = 8,
    fmTransitionEffectPushUp = 9,
    fmTransitionEffectPushRight = 10,
    fmTransitionEffectPushDown = 11,
    fmTransitionEffectPushLeft = 12
};

struct __declspec(uuid("5cef5613-713d-11ce-80c9-00aa00611080"))
IPage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct Controls * * Controls ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ struct Controls * * Selected ) = 0;
      virtual HRESULT __stdcall get_ActiveControl (
        /*[out,retval]*/ struct IControl * * ActiveControl ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall get_CanRedo (
        /*[out,retval]*/ VARIANT_BOOL * CanRedo ) = 0;
      virtual HRESULT __stdcall get_CanUndo (
        /*[out,retval]*/ VARIANT_BOOL * CanUndo ) = 0;
      virtual HRESULT __stdcall put_Cycle (
        /*[in]*/ enum fmCycle Cycle ) = 0;
      virtual HRESULT __stdcall get_Cycle (
        /*[out,retval]*/ enum fmCycle * Cycle ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_ControlTipText (
        /*[in]*/ BSTR tooltip ) = 0;
      virtual HRESULT __stdcall get_ControlTipText (
        /*[out,retval]*/ BSTR * tooltip ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall _GetInsideHeight (
        /*[out]*/ long * InsideHeight ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ float * InsideHeight ) = 0;
      virtual HRESULT __stdcall _GetInsideWidth (
        /*[out]*/ long * InsideWidth ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ float * InsideWidth ) = 0;
      virtual HRESULT __stdcall put_KeepScrollBarsVisible (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_KeepScrollBarsVisible (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_PictureAlignment (
        /*[in]*/ enum fmPictureAlignment PictureAlignment ) = 0;
      virtual HRESULT __stdcall get_PictureAlignment (
        /*[out,retval]*/ enum fmPictureAlignment * PictureAlignment ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PictureSizeMode (
        /*[in]*/ enum fmPictureSizeMode PictureSizeMode ) = 0;
      virtual HRESULT __stdcall get_PictureSizeMode (
        /*[out,retval]*/ enum fmPictureSizeMode * PictureSizeMode ) = 0;
      virtual HRESULT __stdcall put_PictureTiling (
        /*[in]*/ VARIANT_BOOL PictureTiling ) = 0;
      virtual HRESULT __stdcall get_PictureTiling (
        /*[out,retval]*/ VARIANT_BOOL * PictureTiling ) = 0;
      virtual HRESULT __stdcall put_ScrollBars (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_ScrollBars (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall _SetScrollHeight (
        /*[in]*/ long ScrollHeight ) = 0;
      virtual HRESULT __stdcall _GetScrollHeight (
        /*[out]*/ long * ScrollHeight ) = 0;
      virtual HRESULT __stdcall put_ScrollHeight (
        /*[in]*/ float ScrollHeight ) = 0;
      virtual HRESULT __stdcall get_ScrollHeight (
        /*[out,retval]*/ float * ScrollHeight ) = 0;
      virtual HRESULT __stdcall _SetScrollLeft (
        /*[in]*/ long ScrollLeft ) = 0;
      virtual HRESULT __stdcall _GetScrollLeft (
        /*[out]*/ long * ScrollLeft ) = 0;
      virtual HRESULT __stdcall put_ScrollLeft (
        /*[in]*/ float ScrollLeft ) = 0;
      virtual HRESULT __stdcall get_ScrollLeft (
        /*[out,retval]*/ float * ScrollLeft ) = 0;
      virtual HRESULT __stdcall _SetScrollTop (
        /*[in]*/ long ScrollTop ) = 0;
      virtual HRESULT __stdcall _GetScrollTop (
        /*[out]*/ long * ScrollTop ) = 0;
      virtual HRESULT __stdcall put_ScrollTop (
        /*[in]*/ float ScrollTop ) = 0;
      virtual HRESULT __stdcall get_ScrollTop (
        /*[out,retval]*/ float * ScrollTop ) = 0;
      virtual HRESULT __stdcall _SetScrollWidth (
        /*[in]*/ long ScrollWidth ) = 0;
      virtual HRESULT __stdcall _GetScrollWidth (
        /*[out]*/ long * ScrollWidth ) = 0;
      virtual HRESULT __stdcall put_ScrollWidth (
        /*[in]*/ float ScrollWidth ) = 0;
      virtual HRESULT __stdcall get_ScrollWidth (
        /*[out,retval]*/ float * ScrollWidth ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall put_TransitionEffect (
        /*[in]*/ enum fmTransitionEffect TransitionEffect ) = 0;
      virtual HRESULT __stdcall get_TransitionEffect (
        /*[out,retval]*/ enum fmTransitionEffect * TransitionEffect ) = 0;
      virtual HRESULT __stdcall put_TransitionPeriod (
        /*[in]*/ long TransitionPeriod ) = 0;
      virtual HRESULT __stdcall get_TransitionPeriod (
        /*[out,retval]*/ long * TransitionPeriod ) = 0;
      virtual HRESULT __stdcall put_VerticalScrollBarSide (
        /*[in]*/ enum fmVerticalScrollBarSide side ) = 0;
      virtual HRESULT __stdcall get_VerticalScrollBarSide (
        /*[out,retval]*/ enum fmVerticalScrollBarSide * side ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL fVisible ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * fVisible ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ short Zoom ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ short * Zoom ) = 0;
      virtual HRESULT __stdcall put_DesignMode (
        /*[in]*/ enum fmMode DesignMode ) = 0;
      virtual HRESULT __stdcall get_DesignMode (
        /*[out,retval]*/ enum fmMode * DesignMode ) = 0;
      virtual HRESULT __stdcall put_ShowToolbox (
        /*[in]*/ enum fmMode ShowToolbox ) = 0;
      virtual HRESULT __stdcall get_ShowToolbox (
        /*[out,retval]*/ enum fmMode * ShowToolbox ) = 0;
      virtual HRESULT __stdcall put_ShowGridDots (
        /*[in]*/ enum fmMode ShowGridDots ) = 0;
      virtual HRESULT __stdcall get_ShowGridDots (
        /*[out,retval]*/ enum fmMode * ShowGridDots ) = 0;
      virtual HRESULT __stdcall put_SnapToGrid (
        /*[in]*/ enum fmMode SnapToGrid ) = 0;
      virtual HRESULT __stdcall get_SnapToGrid (
        /*[out,retval]*/ enum fmMode * SnapToGrid ) = 0;
      virtual HRESULT __stdcall put_GridX (
        /*[in]*/ float GridX ) = 0;
      virtual HRESULT __stdcall get_GridX (
        /*[out,retval]*/ float * GridX ) = 0;
      virtual HRESULT __stdcall _SetGridX (
        /*[in]*/ long GridX ) = 0;
      virtual HRESULT __stdcall _GetGridX (
        /*[out]*/ long * GridX ) = 0;
      virtual HRESULT __stdcall put_GridY (
        /*[in]*/ float GridY ) = 0;
      virtual HRESULT __stdcall get_GridY (
        /*[out,retval]*/ float * GridY ) = 0;
      virtual HRESULT __stdcall _SetGridY (
        /*[in]*/ long GridY ) = 0;
      virtual HRESULT __stdcall _GetGridY (
        /*[out]*/ long * GridY ) = 0;
      virtual HRESULT __stdcall Copy ( ) = 0;
      virtual HRESULT __stdcall Cut ( ) = 0;
      virtual HRESULT __stdcall Paste ( ) = 0;
      virtual HRESULT __stdcall RedoAction ( ) = 0;
      virtual HRESULT __stdcall Repaint ( ) = 0;
      virtual HRESULT __stdcall Scroll (
        /*[in]*/ VARIANT xAction = vtMissing,
        /*[in]*/ VARIANT yAction = vtMissing ) = 0;
      virtual HRESULT __stdcall SetDefaultTabOrder ( ) = 0;
      virtual HRESULT __stdcall UndoAction ( ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("7b020ec8-af6c-11ce-9f46-00aa00574a4f"))
MultiPageEvents : IDispatch
{};

struct __declspec(uuid("46e31370-3f7a-11ce-bed6-00aa00611080"))
MultiPage;
    // [ default ] interface IMultiPage
    // [ default, source ] dispinterface MultiPageEvents

struct __declspec(uuid("5cef5610-713d-11ce-80c9-00aa00611080"))
Page;
    // [ default ] interface IPage

struct __declspec(uuid("92e11a03-7358-11ce-80cb-00aa00611080"))
Pages : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall Item (
        /*[in]*/ VARIANT varg,
        /*[out,retval]*/ IDispatch * * ppDisap ) = 0;
      virtual HRESULT __stdcall Enum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall Add (
        /*[in]*/ VARIANT bstrName,
        /*[in]*/ VARIANT bstrCaption,
        /*[in]*/ VARIANT lIndex,
        /*[out,retval]*/ struct IPage * * ppPage ) = 0;
      virtual HRESULT __stdcall _AddCtrl (
        /*[in]*/ long * clsid,
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[out,retval]*/ struct IPage * * ppPage ) = 0;
      virtual HRESULT __stdcall _InsertCtrl (
        /*[in]*/ long * clsid,
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IPage * * ppCtrl ) = 0;
      virtual HRESULT __stdcall _GetItemByIndex (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IControl * * ppCtrl ) = 0;
      virtual HRESULT __stdcall _GetItemByName (
        /*[in]*/ BSTR pstrName,
        /*[out,retval]*/ struct IControl * * ppCtrl ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ VARIANT varg ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
};

struct __declspec(uuid("04598fc9-866c-11cf-ab7c-00aa00c08fcf"))
IMultiPage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL fBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * fBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL fItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * fItalic ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL fUnder ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * fUnder ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL fStrike ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * fStrike ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY Size ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * Size ) = 0;
      virtual HRESULT __stdcall put_MultiRow (
        /*[in]*/ VARIANT_BOOL fMultiRow ) = 0;
      virtual HRESULT __stdcall get_MultiRow (
        /*[out,retval]*/ VARIANT_BOOL * fMultiRow ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum fmTabStyle Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum fmTabStyle * Style ) = 0;
      virtual HRESULT __stdcall put_TabOrientation (
        /*[in]*/ enum fmTabOrientation Layout ) = 0;
      virtual HRESULT __stdcall get_TabOrientation (
        /*[out,retval]*/ enum fmTabOrientation * Layout ) = 0;
      virtual HRESULT __stdcall _SetTabFixedWidth (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall _GetTabFixedWidth (
        /*[out]*/ long * Width ) = 0;
      virtual HRESULT __stdcall _SetTabFixedHeight (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall _GetTabFixedHeight (
        /*[out]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall get_SelectedItem (
        /*[out,retval]*/ struct IPage * * ppPage ) = 0;
      virtual HRESULT __stdcall get_Pages (
        /*[out,retval]*/ struct Pages * * ppPages ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_TabFixedWidth (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_TabFixedWidth (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_TabFixedHeight (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_TabFixedHeight (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
};

enum __declspec(uuid("f00164c2-b17b-11ce-a95d-00aa006cb389"))
fmListBoxStyles
{
    _fmListBoxStylesNone = 0,
    _fmListBoxStylesListBox = 1,
    _fmListBoxStylesComboBox = 2
};

enum __declspec(uuid("c3689f20-c231-11ce-a30c-00aa004a3d3c"))
fmRepeatDirection
{
    _fmRepeatDirectionHorizontal = 0,
    _fmRepeatDirectionVertical = 1
};

enum __declspec(uuid("c3689f20-c231-11ce-a30c-00aa004a3d3d"))
fmEnAutoSize
{
    _fmEnAutoSizeNone = 0,
    _fmEnAutoSizeHorizontal = 1,
    _fmEnAutoSizeVertical = 2,
    _fmEnAutoSizeBoth = 3
};

} // namespace Forms

#pragma pack(pop)
